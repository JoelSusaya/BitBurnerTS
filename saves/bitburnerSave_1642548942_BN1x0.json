{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":427,\"hp\":13,\"max_hp\":13,\"strength\":32,\"defense\":32,\"dexterity\":26,\"agility\":26,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.1550000000000002,\"hacking_speed_mult\":1.0823281200000001,\"hacking_money_mult\":1.25,\"hacking_grow_mult\":1,\"hacking_exp\":16770615.954278255,\"strength_exp\":660.8992500000109,\"defense_exp\":660.8992500000109,\"dexterity_exp\":660.8992500000109,\"agility_exp\":660.8992500000109,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.2859560000000003,\"strength_mult\":1.2,\"defense_mult\":1.2,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1.4225640000000004,\"hacking_exp_mult\":2.1384825000000003,\"strength_exp_mult\":1.265,\"defense_exp_mult\":1.265,\"dexterity_exp_mult\":1.265,\"agility_exp_mult\":1.265,\"charisma_exp_mult\":1.3632905000000002,\"company_rep_mult\":1.7995434600000002,\"faction_rep_mult\":1.3632905000000002,\"money\":428754430.1110137,\"city\":\"Ishima\",\"location\":\"Omega Software\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":140,\"moneyGainRatePerSecond\":3989.519507512691,\"onlineTimeSeconds\":92658.39999929657,\"ram\":64,\"totalMoneyGenerated\":115501576.74900982,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":140,\"moneyGainRatePerSecond\":3989.519507512691,\"onlineTimeSeconds\":92653.59999929664,\"ram\":64,\"totalMoneyGenerated\":115498713.15035595,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":140,\"moneyGainRatePerSecond\":3989.519507512691,\"onlineTimeSeconds\":92653.19999929664,\"ram\":64,\"totalMoneyGenerated\":115494904.31540681,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":5,\"level\":140,\"moneyGainRatePerSecond\":4432.799452791879,\"onlineTimeSeconds\":92649.7999992967,\"ram\":64,\"totalMoneyGenerated\":111891301.45703372,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":140,\"moneyGainRatePerSecond\":1326.8731304847272,\"onlineTimeSeconds\":92647.99999929672,\"ram\":32,\"totalMoneyGenerated\":61383620.48979226,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":140,\"moneyGainRatePerSecond\":1326.8731304847272,\"onlineTimeSeconds\":92647.59999929673,\"ram\":32,\"totalMoneyGenerated\":61384397.958566636,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":140,\"moneyGainRatePerSecond\":1326.8731304847272,\"onlineTimeSeconds\":92044.5999993055,\"ram\":32,\"totalMoneyGenerated\":61373553.536948174,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":140,\"moneyGainRatePerSecond\":1326.8731304847272,\"onlineTimeSeconds\":92044.1999993055,\"ram\":32,\"totalMoneyGenerated\":61372907.86321935,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":140,\"moneyGainRatePerSecond\":1326.8731304847272,\"onlineTimeSeconds\":92043.99999930551,\"ram\":32,\"totalMoneyGenerated\":61372887.46361803,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":140,\"moneyGainRatePerSecond\":1326.8731304847272,\"onlineTimeSeconds\":85289.9999994038,\"ram\":32,\"totalMoneyGenerated\":55705441.84499823,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":140,\"moneyGainRatePerSecond\":1326.8731304847272,\"onlineTimeSeconds\":85289.3999994038,\"ram\":32,\"totalMoneyGenerated\":55704008.89737473,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":3,\"level\":140,\"moneyGainRatePerSecond\":1179.442782653091,\"onlineTimeSeconds\":85288.99999940381,\"ram\":32,\"totalMoneyGenerated\":52989194.728298485,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":3,\"level\":140,\"moneyGainRatePerSecond\":1179.442782653091,\"onlineTimeSeconds\":37903.20000000869,\"ram\":32,\"totalMoneyGenerated\":40730946.69449056,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":3,\"level\":140,\"moneyGainRatePerSecond\":1179.442782653091,\"onlineTimeSeconds\":37902.8000000087,\"ram\":32,\"totalMoneyGenerated\":40730237.36688439,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":3,\"level\":140,\"moneyGainRatePerSecond\":1179.442782653091,\"onlineTimeSeconds\":37902.4000000087,\"ram\":32,\"totalMoneyGenerated\":40729606.85438815,\"name\":\"hacknet-node-14\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Netburners\",\"Sector-12\",\"Tian Di Hui\",\"NiteSec\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neurotrainer I\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.0777,\"crime_success_mult\":1.0777,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"The Black Hand\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.32077237500000005,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.5970513266666667,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":13426.569300380545,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":23097.148698586643,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":8371400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.9547,\"hacknet_node_money_mult\":1.45,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1642548941974,\"totalPlaytime\":439161200,\"playtimeSinceLastAug\":92686600,\"playtimeSinceLastBitnode\":439161200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":600000000,\"hacknet\":1051863299.3156183,\"hacknet_expenses\":-134130129.8696873,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-779178739.4073737,\"total\":427754430.1109526,\"work\":0,\"servers\":0,\"other\":-310800000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-400000000,\"class\":-64726040,\"codingcontract\":750000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":27955054380.19,\"hacknet\":48370566593.357605,\"hacknet_expenses\":-132150303633.74281,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":31268644000192.336,\"total\":363929349334.546,\"work\":1448765.5,\"servers\":-8278747916493.835,\"other\":-5622800000,\"augmentations\":-22564805973837.664}},\"scriptProdSinceLastAug\":64441387752.51833,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642110450530},{\"ID\":\"NS2\",\"unlockedOn\":1642111950521},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642115796686},{\"ID\":\"TOR\",\"unlockedOn\":1642118076679},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642120036185},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642126767776},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642148465933},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642166619871},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642197369785},{\"ID\":\"4S\",\"unlockedOn\":1642240378617},{\"ID\":\"NITESEC\",\"unlockedOn\":1642251602407},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642254542403},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642254542406},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642254542408},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642265342623},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642275543354},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1642277297080},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642285996978},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642310712278},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642407414975},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642447864073},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642456264072},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642540593795}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":5,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"17.2.3.4\",\"isConnectedTo\":true,\"maxRam\":131072,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"fl1ght.exe\",\"ServerProfiler.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"ramUsed\":128281.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"STONKS\",0,0.6],\"dataMap\":{},\"filename\":\"/js/stocks/startBot.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":51152631845.04243,\"onlineRunningTime\":16477.210000024883,\"pid\":128,\"ramUsage\":31.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///fe503abf-6a76-45ed-8cfd-60b6342f210b\",\"moduleSequenceNumber\":12002},{\"filename\":\"/js/common/budget.js\",\"url\":\"blob:file:///6c97ed82-ee3a-4691-b05d-d38bcf7a4c04\",\"moduleSequenceNumber\":17273},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///fe503abf-6a76-45ed-8cfd-60b6342f210b\",\"moduleSequenceNumber\":12002},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///aef43294-aaa0-4829-ad3f-fa23ff2c19b0\",\"moduleSequenceNumber\":56},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///fe503abf-6a76-45ed-8cfd-60b6342f210b\",\"moduleSequenceNumber\":12002},{\"filename\":\"/js/common/budget.js\",\"url\":\"blob:file:///6c97ed82-ee3a-4691-b05d-d38bcf7a4c04\",\"moduleSequenceNumber\":17273},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///fe503abf-6a76-45ed-8cfd-60b6342f210b\",\"moduleSequenceNumber\":12002},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/stocks/position.js\",\"url\":\"blob:file:///17baf7d9-b0ca-4580-8d3a-b5a1da19ff57\",\"moduleSequenceNumber\":12010},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/stocks/stock.js\",\"url\":\"blob:file:///8290487b-a6ad-49e8-8b9a-5bf379d29948\",\"moduleSequenceNumber\":12018},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/stocks/tradeBot.js\",\"url\":\"blob:file:///29b365b8-7424-477f-b020-4a2723f72a30\",\"moduleSequenceNumber\":17283},{\"filename\":\"/js/stocks/startBot.js\",\"url\":\"blob:file:///93917369-0c4b-47e5-93ea-fbb65bdc398c\",\"moduleSequenceNumber\":17956}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",19000],\"dataMap\":{\"hong-fang-tea\":[375000000,95000,95000,304000]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6235846.597500002,\"onlineMoneyMade\":375000000,\"onlineRunningTime\":2018.6100000003219,\"pid\":214,\"ramUsage\":6.75,\"server\":\"home\",\"threads\":19000,\"dependencies\":[{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///aef43294-aaa0-4829-ad3f-fa23ff2c19b0\",\"moduleSequenceNumber\":56},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///a69ce668-653f-4eab-9efe-f5ae15390732\",\"moduleSequenceNumber\":28355}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nimport { Argument } from \\\"js/common/argument\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.9;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[1] is invalid. Expected a string, but got %s\\\", argument);\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = argument;\\n        // arg[1] - Threads\\n        // Default to 1 if no argument is passed in\\n        if (ns.args.length > 1) {\\n            [isArgumentValid, argument] = Argument.validateNumber(ns.args[1]);\\n            if (!isArgumentValid || argument < 0) {\\n                ns.tprintf(\\\"Error: arg[1] is invalid. Expected a number above 0, but got %s\\\", typeof (argument));\\n                ns.exit();\\n            }\\n        }\\n        else {\\n            argument = 1;\\n        }\\n        const THREADS = argument;\\n        let opts = {\\n            threads: THREADS\\n        };\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER, opts);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER, opts);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER, opts);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n                if (moneyAvailable < maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD) {\\n                    await preHack();\\n                }\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel) {\\n                await ns.weaken(TARGET_SERVER, opts);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS, ns.getServer().cpuCores);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///aef43294-aaa0-4829-ad3f-fa23ff2c19b0\",\"moduleSequenceNumber\":56},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///a69ce668-653f-4eab-9efe-f5ae15390732\",\"moduleSequenceNumber\":28355}],\"dependents\":[],\"ramUsage\":6.75,\"server\":\"home\",\"_hash\":\"9a93855b9c6bf2ee440044b0981f28aae646e92e3c09f98d2425fb2367726040\",\"moduleSequenceNumber\":28355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // Blatantly remove all .js scripts from a machine\\n    // Made under the premise that files are stored remotely, e.g. I am using a remote text editor and have a repo\\n    // Hopefully useful for cleaning out scripts when you remove, rename, or move them\\n    async function deleteAllScripts() {\\n        const HOST_SERVER = ns.getHostname();\\n        const SCRIPT_EXTENSION = \\\".js\\\";\\n        let files = ns.ls(HOST_SERVER, SCRIPT_EXTENSION);\\n        for (let file of files) {\\n            ns.rm(file, HOST_SERVER);\\n        }\\n        ns.sprintf(\\\"Deleted %1$s files from system.\\\", files.length);\\n    }\\n    // Run the function or it's useless\\n    await deleteAllScripts();\\n}\",\"filename\":\"/js/util/deleteAllScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/util/deleteAllScripts.js\",\"url\":\"blob:file:///9fcc2ab6-2368-438d-bd35-d27cba873bf2\"}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"home\",\"_hash\":\"08d08c375184af031ac75758634ccdc2f93d96d6ce3f5e9dd55af910aecac7f6\",\"moduleSequenceNumber\":44,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\",\"filename\":\"/js/common/constants/stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"5ecf2f4d83e6260dabd6ec48e76d8ddebccf956563f34072221bf960d3b8c255\",\"moduleSequenceNumber\":45,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V2);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        allPrograms.push(PROGRAMS.RELAY_SMTP);\\n        allPrograms.push(PROGRAMS.HTTP_WORM);\\n        allPrograms.push(PROGRAMS.SQL_INJECT);\\n        allPrograms.push(PROGRAMS.FORMULAS);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.DEEPSCAN_V2 = \\\"DeepscanV2.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\\nPROGRAMS.RELAY_SMTP = \\\"relaySMTP.exe\\\";\\nPROGRAMS.HTTP_WORM = \\\"HTTPWorm.exe\\\";\\nPROGRAMS.SQL_INJECT = \\\"SQLInject.exe\\\";\\nPROGRAMS.FORMULAS = \\\"Formulas.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"8f1e2ac8b8694b731f014bb9e4e640068a1fba7cc43295c52c9991ce1ba9976e\",\"moduleSequenceNumber\":19322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        let hasRelaySMTP;\\n        let hasHTTPWorm;\\n        let hasSQLInject;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            hasRelaySMTP = ns.fileExists(PROGRAMS.RELAY_SMTP, HOST_SERVER);\\n            hasHTTPWorm = ns.fileExists(PROGRAMS.HTTP_WORM, HOST_SERVER);\\n            hasSQLInject = ns.fileExists(PROGRAMS.SQL_INJECT, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open FTP port.\\\");\\n                }\\n            }\\n            if (!server.smtpPortOpen) {\\n                if (hasRelaySMTP) {\\n                    ns.relaysmtp(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SMTP port.\\\");\\n                }\\n            }\\n            if (!server.httpPortOpen) {\\n                if (hasHTTPWorm) {\\n                    ns.httpworm(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open HTTP port.\\\");\\n                }\\n            }\\n            if (!server.sqlPortOpen) {\\n                if (hasSQLInject) {\\n                    ns.sqlinject(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SQL port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///43bf13b3-4fa0-400d-8d21-739a446735cf\",\"moduleSequenceNumber\":19322},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///ed70c760-a1d3-454f-a353-231f7cb02059\",\"moduleSequenceNumber\":19710}],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"_hash\":\"9d3a1bf53bdeb270390db9530d8abb0fcbb425fade2ec090d3cf9b9eb8e56ac3\",\"moduleSequenceNumber\":19710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\n// Once again I am dumb. You can't even copy programs to servers.\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    ns.tail();\\n    // Function must be async\\n    // Get purchased servers and copy all available scripts to them\\n    async function copyProgramsToServers() {\\n        const HOST_SERVER = ns.getHostname();\\n        let purchasedServers;\\n        let filesToCopy = [];\\n        let failedCopies = [];\\n        /*\\n        // For checking avialble programs on the system\\n        let hasNuke             : boolean;\\n        let hasAutoLink         : boolean;\\n        let hasDeepScanV1       : boolean;\\n        let hasServerProfiler   : boolean;\\n        let hasBruteSSH         : boolean;\\n        let hasFTPCrack         : boolean;\\n        */\\n        function initialize() {\\n            // Check which programs are available on this computer\\n            /*\\n            hasNuke \\t        = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink         = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasDeepScanV1       = ns.fileExists(PROGRAMS.DEEPSCAN_V1, HOST_SERVER);\\n            hasServerProfiler   = ns.fileExists(PROGRAMS.SERVER_PROFILER, HOST_SERVER);\\n            hasBruteSSH         = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack         = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            */\\n            purchasedServers = ns.getPurchasedServers();\\n            for (let program of PROGRAMS.all()) {\\n                ns.tprint(program);\\n                ns.tprint(HOST_SERVER);\\n                ns.tprint(ns.fileExists(program, HOST_SERVER));\\n                if (ns.fileExists(program, HOST_SERVER)) {\\n                    filesToCopy.push(program);\\n                }\\n            }\\n            ns.tprint(\\\"Files ready to copy: \\\" + filesToCopy);\\n        }\\n        async function copyFiles() {\\n            for (let server in purchasedServers) {\\n                let fileCopied = await ns.scp(filesToCopy, HOST_SERVER, server);\\n                if (!fileCopied) {\\n                    failedCopies.push(server);\\n                }\\n            }\\n            ns.tprint(\\\"Finished copying. \\\" + failedCopies.length + \\\" Failures. Failed servers: \\\" + failedCopies);\\n        }\\n        initialize();\\n        await copyFiles();\\n    }\\n    // Run the function or it's useless\\n    await copyProgramsToServers();\\n}\",\"filename\":\"/js/util/copyProgramsToServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"_hash\":\"04f453fa269e9f227e89f0f733aeded27fa694cddebfe748855db84480a2522b\",\"moduleSequenceNumber\":19256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nimport { Position } from \\\"js/stocks/position\\\";\\nexport class Stock {\\n    constructor(netscape, stockSymbol) {\\n        this.ns = netscape;\\n        this.TIX = this.ns.stock;\\n        let allSymbols = this.TIX.getSymbols();\\n        if (!allSymbols.includes(stockSymbol)) {\\n            this.ns.tprintf(\\\"Error: Stock symbol %s not found.\\\", stockSymbol);\\n            this.ns.exit();\\n        }\\n        this.symbol = stockSymbol;\\n        this.maxShares = this.TIX.getMaxShares(this.symbol);\\n        this.update();\\n    }\\n    update() {\\n        this.price = this.TIX.getPrice(this.symbol);\\n        this.askPrice = this.TIX.getAskPrice(this.symbol);\\n        this.bidPrice = this.TIX.getBidPrice(this.symbol);\\n        this.forecast = this.TIX.getForecast(this.symbol);\\n        this.volatility = this.TIX.getVolatility(this.symbol);\\n        // Figure out the position we should take from the forecast\\n        // Also calculate a raw magnitude for the forecast, so we can compare\\n        // the potential of long and short positions.\\n        if (this.forecast > .5) {\\n            this.forecastType = CONSTANTS.STOCKS.LONG_POSITION;\\n            this.forecastMagnitude = this.forecast;\\n        }\\n        else {\\n            this.forecastType = CONSTANTS.STOCKS.SHORT_POSITION;\\n            this.forecastMagnitude = 1 - this.forecast;\\n        }\\n        // Create a Position from the position data, so we can know what position we have, if any\\n        this.positionData = this.TIX.getPosition(this.symbol);\\n        [this.hasPosition, this.position]\\n            = Position.getPositionFromData(this.ns, this.positionData);\\n        this.availableShares = this.maxShares - this.position.shares;\\n        this.marketCap = this.price * this.maxShares;\\n    }\\n    // A method for buying stocks at market price\\n    // Arguments:\\n    // Shares - The number of shares to buy\\n    // Budget - An optional number denoting the amount of budget available for the purchase\\n    buy(shares) {\\n        return this.marketOrder(CONSTANTS.STOCKS.LONG_POSITION, shares);\\n    }\\n    sell(shares) {\\n        return this.marketSell(shares);\\n    }\\n    short(shares) {\\n        return this.marketOrder(CONSTANTS.STOCKS.SHORT_POSITION, shares);\\n    }\\n    shortSell(shares) {\\n        return this.marketSell(shares);\\n    }\\n    placeOrder() {\\n    }\\n    // Method for buying and shorting at market price\\n    // Arguments\\n    // positionType - long or short\\n    // shares - The number of shares to buy\\n    // budget? - Optional budget information to check to make sure the sale doesn't go over budget. Maybe shouldn't be part of this method.\\n    // Method returns [orderSuccess: boolean, orderCost: number]\\n    // orderSuccess will be false if the order fails for any reason\\n    // orderCost will be 0 if the order fails\\n    marketOrder(positionType, shares) {\\n        // If the shares number isn't valid, exit\\n        if (!this.isValidShares(shares)) {\\n            this.ns.print(this.ns.vsprintf(\\\"Error: Invalid number of shares to buy. Got %s\\\", [shares]));\\n            return 0;\\n        }\\n        // Make sure we have the latest stock data\\n        this.update();\\n        let purchaseCost = 0;\\n        // Make sure the position we are in matches the type of order we are trying to place\\n        if (this.position.type != positionType && this.position.type != CONSTANTS.STOCKS.NO_POSITION) {\\n            this.ns.print(this.ns.sprintf(\\\"Error: Trying to take %1$s position, but currently in %2$s position\\\", positionType, this.position.type));\\n            return 0;\\n        }\\n        if (positionType == CONSTANTS.STOCKS.LONG_POSITION) {\\n            purchaseCost = this.TIX.buy(this.symbol, shares);\\n        }\\n        else if (positionType == CONSTANTS.STOCKS.SHORT_POSITION) {\\n            purchaseCost = this.TIX.short(this.symbol, shares);\\n        }\\n        else {\\n            this.ns.print(this.ns.sprintf(\\\"Error: Invalid position. How did that happen?!\\\"));\\n            return 0;\\n        }\\n        let total = purchaseCost * shares;\\n        return total;\\n    }\\n    marketSell(shares) {\\n        // If the shares number isn't valid, exit\\n        if (!this.isValidShares(shares)) {\\n            this.ns.vsprintf(\\\"Error: Invalid number of shares to buy. Got %s\\\", [shares]);\\n            return 0;\\n        }\\n        // Make sure we have the latest stock data\\n        this.update();\\n        let sellPrice = 0;\\n        // Make sure the position we are in matches the type of order we are trying to place\\n        // Unlike buying, we need to be in a position to sell\\n        if (this.position.type == CONSTANTS.STOCKS.NO_POSITION) {\\n            this.ns.print(this.ns.sprintf(\\\"Error: Trying to sell %1$s, but we don't own any.\\\", this.symbol));\\n            return 0;\\n        }\\n        if (this.position.type == CONSTANTS.STOCKS.LONG_POSITION) {\\n            sellPrice = this.TIX.sell(this.symbol, shares);\\n        }\\n        else if (this.position.type == CONSTANTS.STOCKS.SHORT_POSITION) {\\n            sellPrice = this.TIX.sellShort(this.symbol, shares);\\n        }\\n        else {\\n            this.ns.print(this.ns.sprintf(\\\"Error: Invalid position. How did that happen?!\\\"));\\n            return 0;\\n        }\\n        let total = sellPrice * shares;\\n        // Detect if the sale was successful. Will be 0 if it failed.\\n        return total;\\n    }\\n    isValidOrdidType(orderType) {\\n        if (CONSTANTS.ORDER_TYPES.includes(orderType)) {\\n            return true;\\n        }\\n        else {\\n            this.ns.print(this.ns.vsprintf(\\\"Error: Order type not found. Expected limit | stop, got %s\\\", [orderType]));\\n            return false;\\n        }\\n    }\\n    isValidShares(shares) {\\n        if (shares >= 0) {\\n            return true;\\n        }\\n        else {\\n            this.ns.print(this.ns.vsprintf(\\\"Error: Shares must be a postive number got %s\\\", [shares]));\\n            return false;\\n        }\\n    }\\n}\",\"filename\":\"/js/stocks/stock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":28.6,\"server\":\"home\",\"_hash\":\"58a2c708d8d665a2fded68f183b233db96b8f61a56dce325c16c27ec2ba8e3fe\",\"moduleSequenceNumber\":12018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Stock } from \\\"js/stocks/stock\\\";\\nimport { Formatter } from \\\"js/common/formatter\\\";\\nexport async function main(ns) {\\n    async function stockQuery() {\\n        // I use EMPTY_STRING because it is easier for me to visually grep and semantically understand\\n        const EMPTY_STRING = \\\"\\\";\\n        // Create a constant for the TIX API, which we can get access to through ns.stock.\\n        // We could check if we have API access, but I think that persists through Augmentations, so I won't bother.\\n        const TIX = ns.stock;\\n        // Check to see if we have access to the necessary APIS\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = EMPTY_STRING;\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. arg[0] should be the stock symbol to query. Got: \\\" + ns.args[0]);\\n            ns.exit();\\n        }\\n        // I'm really sorry about this.\\n        // Declare a constant, setting it to arg0 if it isn't empty.\\n        // Then check if STOCK_SYMBOL is empty and exit if it is.\\n        const STOCK_SYMBOL = (arg0 != EMPTY_STRING) ? arg0 : EMPTY_STRING;\\n        if (STOCK_SYMBOL == EMPTY_STRING) {\\n            ns.tprint(\\\"Error: args[0] is missing. args[0] should be the stock symbol to query.\\\");\\n            ns.exit();\\n        }\\n        let formatter = new Formatter(ns);\\n        let stock = new Stock(ns, STOCK_SYMBOL);\\n        // Format the currency, percentages, and other numbers\\n        let currencyData = [stock.price, stock.askPrice, stock.bidPrice, stock.marketCap, stock.position.price].map(formatter.formatCurrency);\\n        let percentageData = [stock.forecast, stock.volatility, stock.forecastMagnitude].map(formatter.formatPercentage);\\n        let numberData = [stock.maxShares, stock.position.shares].map(formatter.formatNumber);\\n        // Prepare a formatted string to print to the terminal.\\n        let outputData = ns.sprintf(`\\r\\n            Price:      %1$s\\r\\n            Ask Price: \\t%2$s\\r\\n            Bid Price:\\t%3$s\\r\\n    \\r\\n            Volatility:\\t%7$s\\r\\n\\r\\n            Forecast:\\t%6$s\\r\\n            Magnitude:  %8$s\\r\\n\\r\\n            Position:   %11$s\\r\\n            Shares:     %10$s\\r\\n            Price:      %5$s\\r\\n    \\r\\n            Max Shares:\\t%9$s\\r\\n            Market Cap: %4$s\\r\\n        `, ...currencyData, ...percentageData, ...numberData, stock.position.type);\\n        ns.tprint(outputData);\\n    }\\n    await stockQuery();\\n}\",\"filename\":\"/js/stocks/stockQuery.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///49fb1fc1-23f3-4d4b-8d6a-c336fd11d32e\"},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///5e26b9f3-649b-4196-a275-32570c01c5fe\"},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/stocks/position.js\",\"url\":\"blob:file:///f0f66ee2-224a-482d-b18f-6ff325d6d3a5\"},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///f1140a77-68c1-4df9-ac44-e5f7a70f0e7f\"},{\"filename\":\"/js/stocks/stock.js\",\"url\":\"blob:file:///63445492-c2b4-40a8-8482-f53a22788232\"},{\"filename\":\"/js/stocks/stockQuery.js\",\"url\":\"blob:file:///7fcfc82d-88c8-458e-8927-3542125dc9b3\"}],\"dependents\":[],\"ramUsage\":28.6,\"server\":\"home\",\"_hash\":\"59317ee31526cb8e7d9066bbe395a0b3663b1fd814644e48aca591def64b50a6\",\"moduleSequenceNumber\":12020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\\nCONSTANTS.HOME_SERVER = \\\"home\\\";\\nCONSTANTS.NEWLINE = \\\"\\\\n\\\";\\nCONSTANTS.SPACE = \\\" \\\";\\nCONSTANTS.DIRECTORIES = {\\n    CRAWL_LOGS: '/logs',\\n};\\nCONSTANTS.TEXT_FILES = {\\n    KNOWN_HOSTS: '/known-hosts.txt',\\n    CRAWL_REPORT: '/crawl-report.txt',\\n    HOST_INFO: '/host-info.txt',\\n    ROOTED_HOSTS: '/rooted-hosts.txt',\\n    CRAWLED_CONTRACTS: '/contracts.txt',\\n    TRADE_RECORD: '/trades.txt'\\n};\\nCONSTANTS.FILE_EXTENSIONS = {\\n    NS1: '.script',\\n    NS2: '.js',\\n    TEXT: '.txt',\\n    MESSAGE: '.msg',\\n    CODING_CONTRACT: '.cct'\\n};\\nCONSTANTS.STOCKS = {\\n    MARKET_ORDER: 'market',\\n    LIMIT_ORDER: 'limit',\\n    STOP_ORDER: 'stop',\\n    LONG_POSITION: 'long',\\n    SHORT_POSITION: 'short',\\n    NO_POSITION: 'none',\\n    COMMISSION_FEE: 100000,\\n    UPDATE_TICK_DURATION: 6000,\\n    SHARE_PURCHASE_MULTIPLIER: 0.96\\n};\\n// Create some strings needed to format currency using ns.nFormat()\\n// See http://numeraljs.com/\\nCONSTANTS.FORMAT = {\\n    CURRENCY: \\\"($ 0,0[.]00)\\\",\\n    PERCENTAGE: \\\"0 %\\\",\\n    NUMBER: \\\"0,0.0000\\\"\\n};\\nCONSTANTS.ORDER_TYPES = [CONSTANTS.STOCKS.LIMIT_ORDER, CONSTANTS.STOCKS.STOP_ORDER];\\nCONSTANTS.POSITIONS = [CONSTANTS.STOCKS.LONG_POSITION, CONSTANTS.STOCKS.SHORT_POSITION,\\n    CONSTANTS.STOCKS.NO_POSITION];\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"dbbcc7421d1b111dd214242782148e7fc7c2abd0b0706b728674de3602cb6399\",\"moduleSequenceNumber\":12003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport class Position {\\n    constructor(netscript, positionType, positionShares, positionPrice) {\\n        this.ns = netscript;\\n        this.type = positionType;\\n        this.shares = positionShares;\\n        this.price = positionPrice;\\n        this.value = this.shares * this.price;\\n    }\\n    get type() {\\n        return this._type;\\n    }\\n    set type(value) {\\n        if (CONSTANTS.POSITIONS.includes(value)) {\\n            this._type = value;\\n        }\\n        else {\\n            this.ns.tprintf(\\\"Error: Expected %s, but got %s\\\", CONSTANTS.POSITIONS, value);\\n        }\\n    }\\n    get shares() {\\n        return this._shares;\\n    }\\n    set shares(value) {\\n        if (value >= 0) {\\n            this._shares = value;\\n        }\\n        else {\\n            this.ns.tprintf(\\\"Error: Expected shares to be >= 0. Got %s.\\\", value);\\n        }\\n    }\\n    get price() {\\n        return this._price;\\n    }\\n    set price(value) {\\n        if (value >= 0) {\\n            this._price = value;\\n        }\\n        else {\\n            this.ns.tprintf(\\\"Error: Price must be >= 0. Got %s.\\\", value);\\n        }\\n    }\\n    static getPositionFromData(ns, positionData) {\\n        if (positionData.length == 4) {\\n            let [positionType, positionShares, positionPrice] = this.getPosition(positionData);\\n            let position = new Position(ns, positionType, positionShares, positionPrice);\\n            if (positionType != CONSTANTS.STOCKS.NO_POSITION && positionPrice) {\\n                return [true, position];\\n            }\\n            else {\\n                return [false, position];\\n            }\\n        }\\n        else {\\n            // If we don't get a valid input, return false and no position, but report an error.\\n            ns.tprintf(\\\"Error: Expected %s, but got %s\\\", \\\"[#, #, #, #]\\\", positionData);\\n            return [false, new Position(ns, CONSTANTS.STOCKS.NO_POSITION, 0, 0)];\\n        }\\n    }\\n    static getPosition(positionData) {\\n        if (positionData[0] > 0) {\\n            return [CONSTANTS.STOCKS.LONG_POSITION, positionData[0], positionData[1]];\\n        }\\n        else if (positionData[2] > 0) {\\n            return [CONSTANTS.STOCKS.SHORT_POSITION, positionData[2], positionData[3]];\\n        }\\n        else {\\n            return [CONSTANTS.STOCKS.NO_POSITION, 0, 0];\\n        }\\n    }\\n}\",\"filename\":\"/js/stocks/position.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"_hash\":\"1c8fa63683665282afc8b545a07df09ef375617a229649ad540ff7ecc15f92d6\",\"moduleSequenceNumber\":12010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Stock } from \\\"js/stocks/stock\\\";\\nexport class TradeBot {\\n    constructor(netscript) {\\n        this.ns = netscript;\\n        this.TIX = this.ns.stock;\\n        // Get all of the stock symbols\\n        this.stockSymbols = this.TIX.getSymbols();\\n        // Create an array of Stocks\\n        this.stocks = new Array();\\n        for (let stockSymbol of this.stockSymbols) {\\n            this.stocks.push(new Stock(this.ns, stockSymbol));\\n        }\\n    }\\n    // Run the AutoTrader\\n    run() {\\n    }\\n    stop() {\\n    }\\n    updateStockData() {\\n        for (let stock of this.stocks) {\\n            stock.update();\\n        }\\n    }\\n    sortForecasts() {\\n        // Update the stock data.\\n        this.updateStockData();\\n        // Sort stocks by the absolute value of their forecast\\n        // We don't care which direction it is going because we can take long or short positions\\n        this.stocks.sort((stockA, stockB) => Math.abs(stockA.forecast) - Math.abs(stockB.forecast));\\n    }\\n}\",\"filename\":\"/js/stocks/botManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":28.6,\"server\":\"home\",\"_hash\":\"0f3e899f2e67f90fac832920bbf53e9084597ecc5aca768b28f897cb1f0e4efd\",\"moduleSequenceNumber\":53,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nimport { Stock } from \\\"js/stocks/stock\\\";\\nimport { Formatter } from \\\"js/common/formatter\\\";\\nimport { BUDGET } from \\\"js/common/budget\\\";\\nexport class TradeBot {\\n    constructor(netscript, name, forecastThreshold, ...symbolsToAdd) {\\n        this.ns = netscript;\\n        this.TIX = this.ns.stock;\\n        this.formatter = new Formatter(this.ns);\\n        this.name = name;\\n        // this.fileName = \\\"/data/stocks/\\\" + this.name + \\\".txt\\\";\\n        this.ns.print(this.ns.vsprintf(\\\"Budget: %s, \\\", [BUDGET.STOCKS].map(this.formatter.formatCurrency)));\\n        //this.ns.print(BUDGET.STOCKS);\\n        this.forecastThreshold = forecastThreshold;\\n        this.portfolioValue = 0;\\n        // Get all of the stock symbols\\n        this.stockSymbols = this.TIX.getSymbols();\\n        // Create an array of Stocks\\n        this.stocks = new Array();\\n        for (let stockSymbol of this.stockSymbols) {\\n            this.stocks.push(new Stock(this.ns, stockSymbol));\\n        }\\n        // Check if we should add any symbols to our portfolio\\n        this.portfolio = new Array();\\n        if (symbolsToAdd) {\\n            for (let stockSymbol of symbolsToAdd) {\\n                let stock = new Stock(this.ns, stockSymbol);\\n                this.portfolio.push(stock);\\n                this.portfolioValue += stock.position.value;\\n            }\\n        }\\n    }\\n    // Tick the TradeBot\\n    async tick() {\\n        // Update our portfolio, selling off anything below our threshold\\n        this.updatePortfolio();\\n        //this.ns.print(this.ns.vsprintf(\\\"Budget: %s\\\", [this.budget]));\\n        // Our potential budget is our budget plus the value of our portfolio\\n        //let potentialBudget = this.budget + this.portfolioValue;\\n        // Spend our budget. If we want to buy a stock, but don't have enough money, check if we have any stocks\\n        // in our portfolio that have a worse forcast. Sell the worst stocks and buy better ones.\\n        // Update our stock data, which also sorts by forecast\\n        this.updateStockData();\\n        // for (let stock of this.stocks) {\\n        //     this.ns.print(this.ns.vsprintf(\\\"Stock: %s, forecast: %s, fMag: %s\\\", [stock.symbol, stock.forecast, stock.forecastMagnitude]))\\n        // }\\n        // Calculate how to spend the potential budget based on the stock forecasts.\\n        for (let stock of this.stocks) {\\n            //this.ns.print(this.ns.vsprintf(\\\"Checking %s, Forecast: %s, Available Shares %s\\\", [stock.symbol, stock.forecast, stock.availableShares]));\\n            // Apparently shorting stocks isn't available until you get some shit I don't have, so we will\\n            // skip any short positions for now\\n            if (stock.forecastType == CONSTANTS.STOCKS.SHORT_POSITION) {\\n                continue;\\n            }\\n            // Skip this one if there are no available shares\\n            if (stock.availableShares == 0) {\\n                continue;\\n            }\\n            //this.ns.print(this.ns.vsprintf(\\\"Stock: %s, forecast: %s, fMag: %s\\\", [stock.symbol, stock.forecast, stock.forecastMagnitude]))\\n            // Stocks are sorted by forecast, so if we hit one beneath our threshold before our budget is gone,\\n            // just stop\\n            if (stock.forecastMagnitude < this.forecastThreshold) {\\n                this.ns.print(this.ns.vsprintf(\\\"Does not meet threshold %s / %s\\\", [stock.forecastMagnitude, this.forecastThreshold]));\\n                break;\\n            }\\n            // Next check how much it would cost to buy all available shares\\n            // We use the API to make sure the price is accurate\\n            // this.ns.print(this.ns.vsprintf(\\\"Calculating puchase cost for %s, %s shares available, %s position\\\", \\n            //                 [stock.symbol, stock.availableShares, stock.position.type]));\\n            let purchaseCost = this.TIX.getPurchaseCost(stock.symbol, stock.availableShares, stock.forecastType);\\n            // If we have enough budget, sell our worst forecasted stock first\\n            // Unless we have no portfolio, then skip\\n            if (this.portfolio.length > 0 && purchaseCost > BUDGET.STOCKS) {\\n                // Get the worst forecasted stock\\n                let worstPortfolioStock = this.portfolio[this.portfolio.length - 1];\\n                // If our worst portfolio stock has a better forecast than this one\\n                // skip the rest\\n                // Also check that the stock isn't the same as the one we are buying\\n                if (worstPortfolioStock.symbol != stock.symbol && worstPortfolioStock.forecastMagnitude < stock.forecastMagnitude) {\\n                    this.ns.print(\\\"Trying to rebalance...\\\");\\n                    // Find out how much we need to sell\\n                    // Add a bit of room for error\\n                    let neededBudget = purchaseCost - BUDGET.STOCKS;\\n                    let sharesToSell = Math.ceil(neededBudget / worstPortfolioStock.position.price);\\n                    sharesToSell *= 1.05;\\n                    // Sell the shares\\n                    let sellPrice = worstPortfolioStock.marketSell(sharesToSell);\\n                    if (sellPrice != 0) {\\n                        let budgetSuccess = BUDGET.addToStockBudget(this.ns, sellPrice);\\n                        // TEMP FIX: my budgeter sometimes refuses to add money to the budget, so just yolo it all\\n                        // if that happens\\n                        if (!budgetSuccess) {\\n                            BUDGET.stock_yolo(this.ns.getPlayer());\\n                        }\\n                    }\\n                }\\n            }\\n            // Check again if we meet the budget, if we don't check to see if our budget is less than the commission fee\\n            // if it is, skip this\\n            if (purchaseCost > BUDGET.STOCKS) {\\n                // If we couldn't rebalance and we have a smaller budget than the commission fee, don't waste money\\n                if (BUDGET.STOCKS < CONSTANTS.STOCKS.COMMISSION_FEE) {\\n                    break;\\n                }\\n                this.ns.print(this.ns.vsprintf(\\\"Can't afford %s. Trying to budget starting with %s.\\\", [purchaseCost, BUDGET.STOCKS].map(this.formatter.formatCurrency)));\\n                // If we don't have enough money, buy as much of the stock as we can\\n                // Leave a bit of room because the price may be higher than estimated\\n                let approxSharesCanBuy = Math.floor(BUDGET.STOCKS / stock.price) * CONSTANTS.STOCKS.SHARE_PURCHASE_MULTIPLIER;\\n                // We're out of money if this happens, so break\\n                if (approxSharesCanBuy == 0) {\\n                    break;\\n                }\\n                let buyPrice = stock.marketOrder(stock.forecastType, approxSharesCanBuy);\\n                // If we succeeded, add the stock to our profolio and subtract the buy price from our budget\\n                if (buyPrice != 0) {\\n                    // If we just bought more of the stock, we don't want to add it\\n                    if (!this.portfolio.includes(stock)) {\\n                        this.portfolio.push(stock);\\n                    }\\n                    BUDGET.withdrawFromStockBudget(this.ns, buyPrice);\\n                    this.ns.print(this.ns.vsprintf(\\\"Purchased successfully. Bought %s for %s.\\\", [stock.symbol, this.formatter.formatCurrency(buyPrice)]));\\n                }\\n                // Exit because we are out of budget if we got here\\n                break;\\n            }\\n            this.ns.print(this.ns.vsprintf(\\\"Trying to purchase %s, %s shares, %s position\\\", [stock.symbol, stock.availableShares, stock.forecastType]));\\n            // Try to buy the stock\\n            let buyPrice = stock.marketOrder(stock.forecastType, stock.availableShares);\\n            // If we succeeded, add the stock to our profolio and subtract the buy price from our budget\\n            if (buyPrice != 0) {\\n                // If we just bought more of the stock, we don't want to add it\\n                if (!this.portfolio.includes(stock)) {\\n                    this.portfolio.push(stock);\\n                }\\n                BUDGET.withdrawFromStockBudget(this.ns, buyPrice);\\n                this.ns.print(this.ns.vsprintf(\\\"Purchased successfully. Bought %s for %s.\\\", [stock.symbol, this.formatter.formatCurrency(buyPrice)]));\\n            }\\n        }\\n        // Update external portfolio file\\n        // this.ns.rm(this.fileName, this.ns.getHostname());\\n        // for (let stock of this.portfolio) {\\n        //     // Write the stock symbol to a file in case we end the bot\\n        //     await this.ns.write(this.fileName, stock.symbol + \\\"\\\\n\\\", \\\"a\\\");\\n        // }\\n    }\\n    liquidate() {\\n    }\\n    // Go through each stock and update it. Also update our portfolio stocks to make sure they are up-to-date.\\n    updateStockData() {\\n        let newPortfolio = new Array();\\n        for (let stock of this.stocks) {\\n            stock.update();\\n            if (stock.hasPosition) {\\n                newPortfolio.push(stock);\\n            }\\n        }\\n        this.portfolio = newPortfolio;\\n        this.sortForecasts();\\n    }\\n    sortForecasts() {\\n        // Sort stocks by the magnitude of their forecast\\n        // We don't care which direction it is going because we can take long or short positions\\n        this.stocks.sort(this.sortStocksByForecastMagnitude);\\n    }\\n    // Update the stock data and get our portfolio value\\n    updatePortfolio() {\\n        this.portfolioValue = 0;\\n        // Go through each stock and update it\\n        // If it is under our threshold or we have the wrong position, sell it, \\n        // otherwise add it's value to our portfolio\\n        for (let stock of this.portfolio) {\\n            stock.update();\\n            // If we sell the stock, lower our porfolio value and add to our budget\\n            let sellThreshold = this.forecastThreshold - 0.01;\\n            if (stock.forecastMagnitude < sellThreshold || stock.forecastType != stock.position.type) {\\n                this.ns.print(this.ns.vsprintf(\\\"Selling %s\\\", [stock.symbol]));\\n                let sellPrice = stock.marketSell(stock.position.shares);\\n                // If the sale worked, remove the stock from the portfolio and it it to our budget\\n                //this.ns.print(this.ns.vsprintf(\\\"Sold %s, removing from portfolio. Portfolio size: %s\\\", [stock.symbol, this.portfolio.length]));\\n                if (sellPrice != 0) {\\n                    let index = this.portfolio.indexOf(stock);\\n                    this.portfolio.splice(index, 1);\\n                    let budgetSuccess = BUDGET.addToStockBudget(this.ns, sellPrice);\\n                    // TEMP FIX: my budgeter sometimes refuses to add money to the budget, so just yolo it all\\n                    // if that happens\\n                    if (!budgetSuccess) {\\n                        BUDGET.stock_yolo(this.ns.getPlayer());\\n                    }\\n                    this.ns.print(this.ns.vsprintf(\\\"Sold %s. Portfolio size: %s\\\", [stock.symbol, this.portfolio.length]));\\n                }\\n            }\\n            else {\\n                this.portfolioValue += stock.position.shares * stock.price;\\n            }\\n        }\\n        this.sortPortfolio();\\n    }\\n    sortPortfolio() {\\n        // Sort stocks by the magnitude of their forecast\\n        // We don't care which direction it is going because we can take long or short positions\\n        this.portfolio.sort(this.sortStocksByForecastMagnitude);\\n    }\\n    sortStocksByForecastMagnitude(stockA, stockB) {\\n        return stockB.forecastMagnitude - stockA.forecastMagnitude;\\n    }\\n}\",\"filename\":\"/js/stocks/tradeBot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///e7750002-9e93-4dec-946b-9d3a2460a32d\",\"moduleSequenceNumber\":1840},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///762ab4b6-c79c-4801-b16b-dbca515f6a8d\",\"moduleSequenceNumber\":1839},{\"filename\":\"/js/common/budget.js\",\"url\":\"blob:file:///618dd997-9485-4a5c-8741-588eadead8ff\",\"moduleSequenceNumber\":6246},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///e7750002-9e93-4dec-946b-9d3a2460a32d\",\"moduleSequenceNumber\":1840},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///762ab4b6-c79c-4801-b16b-dbca515f6a8d\",\"moduleSequenceNumber\":1839},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///e7750002-9e93-4dec-946b-9d3a2460a32d\",\"moduleSequenceNumber\":1840},{\"filename\":\"/js/stocks/position.js\",\"url\":\"blob:file:///08af2da8-4ac4-486e-aa1c-14456ec20486\",\"moduleSequenceNumber\":860},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///e7750002-9e93-4dec-946b-9d3a2460a32d\",\"moduleSequenceNumber\":1840},{\"filename\":\"/js/stocks/stock.js\",\"url\":\"blob:file:///c9bfea78-c072-4048-a7f1-d08913607b06\",\"moduleSequenceNumber\":5357},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///e7750002-9e93-4dec-946b-9d3a2460a32d\",\"moduleSequenceNumber\":1840},{\"filename\":\"/js/stocks/tradeBot.js\",\"url\":\"blob:file:///fe441dd0-1808-462b-820b-18a03367eabd\",\"moduleSequenceNumber\":7644}],\"dependents\":[],\"ramUsage\":31.1,\"server\":\"home\",\"_hash\":\"962c00cefdf41fe572678019d019e4a6d9b49a39da592be9582c8e29a424c02c\",\"moduleSequenceNumber\":18317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    ns.tail();\\n    // Function must be async\\n    // This function should get server details and output a report\\n    async function analyzeServer() {\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        async function initialize() {\\n        }\\n        await initialize();\\n    }\\n    // Run the function or it's useless\\n    await analyzeServer();\\n}\",\"filename\":\"/js/analyzeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"88ac8cec007b20b6e7c7da47070d82cf53b9431b482b441ce2dcd0b75a05eba4\",\"moduleSequenceNumber\":55,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Pretty useless class, I thought I would do more with it\\nexport class Argument {\\n    constructor(arg) {\\n        this.value = arg;\\n    }\\n    static validateString(arg) {\\n        if (typeof (arg) == \\\"string\\\") {\\n            return [true, arg];\\n        }\\n        else {\\n            return [false, \\\"\\\"];\\n        }\\n    }\\n    static validateNumber(arg) {\\n        if (typeof (arg) == \\\"number\\\") {\\n            return [true, arg];\\n        }\\n        else {\\n            return [false, 0];\\n        }\\n    }\\n    static validateBoolean(arg) {\\n        if (typeof (arg) == \\\"boolean\\\") {\\n            return [true, arg];\\n        }\\n        else {\\n            return [false, false];\\n        }\\n    }\\n}\\nexport class StringArgument extends Argument {\\n    constructor(arg) {\\n        super(arg);\\n        this.value = arg;\\n    }\\n}\\nexport class NumberArgument extends Argument {\\n    constructor(arg) {\\n        super(arg);\\n        this.value = arg;\\n    }\\n}\\nexport class BooleanArgument extends Argument {\\n    constructor(arg) {\\n        super(arg);\\n        this.value = arg;\\n    }\\n}\",\"filename\":\"/js/common/argument.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"fb00b219d3bf921272d9b5929969851ed6e030f1e77861dd2613f3f92a836f3d\",\"moduleSequenceNumber\":56,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Turns out this object exists in NS and this is not needed at all, whoops. Just use Server from the NS definitions.\\nexport class System {\\n    constructor(netscript, host, threads) {\\n        this.ns = netscript;\\n        // If there is no hostname passed in, get the host that the script is running on\\n        this.host = host || this.ns.getHostname();\\n        this.threads = threads || 1;\\n        this.securityMinLevel = this.ns.getServerMinSecurityLevel(this.host);\\n        this.securityLevel = this.ns.getServerSecurityLevel(this.host);\\n        this.securityWeakenAmount = this.ns.weakenAnalyze(this.threads);\\n        this.moneyMaxAvailable = this.ns.getServerMaxMoney(this.host);\\n        this.moneyAvailable = this.ns.getServerMoneyAvailable(this.host);\\n        this.portsRequired = this.ns.getServerNumPortsRequired(this.host);\\n        this.hackingLevelRequired = this.ns.getServerRequiredHackingLevel(this.host);\\n        this.hasRoot = this.ns.hasRootAccess(this.host);\\n    }\\n    updateSecurityLevel() {\\n        this.securityLevel = this.ns.getServerSecurityLevel(this.host);\\n    }\\n    updateSecurityWeakenAmount() {\\n        this.securityLevel = this.ns.weakenAnalyze(this.threads);\\n    }\\n    updateMoneyAvailable() {\\n        this.moneyAvailable = this.ns.getServerMoneyAvailable(this.host);\\n    }\\n    updateRootAccess() {\\n        this.hasRoot = this.ns.hasRootAccess(this.host);\\n    }\\n}\",\"filename\":\"/js/common/system.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"_hash\":\"fab10d0d48327d48ad452479dfc8fc270e33e3e454cf861e81ea49c5dc0e24e1\",\"moduleSequenceNumber\":57,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\n/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Log crawled hosts\\n        const KNOWN_HOSTS = CONSTANTS.DIRECTORIES.CRAWL_LOGS + CONSTANTS.TEXT_FILES.KNOWN_HOSTS;\\n        const CRAWL_REPORT = CONSTANTS.DIRECTORIES.CRAWL_LOGS + CONSTANTS.TEXT_FILES.CRAWL_REPORT;\\n        const HOST_INFO_REPORT = CONSTANTS.DIRECTORIES.CRAWL_LOGS + CONSTANTS.TEXT_FILES.HOST_INFO;\\n        const ROOTED_HOSTS = CONSTANTS.DIRECTORIES.CRAWL_LOGS + CONSTANTS.TEXT_FILES.ROOTED_HOSTS;\\n        const CRAWLED_CONTRACTS = CONSTANTS.DIRECTORIES.CRAWL_LOGS + CONSTANTS.TEXT_FILES.CRAWLED_CONTRACTS;\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledHosts = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledHosts.push(HOST_SERVER);\\n            // Write the depth and host to start the report off\\n            // Log the HOST_SERVER to the known hosts file\\n            // Clear the reports\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            await ns.write(KNOWN_HOSTS, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(HOST_INFO_REPORT, \\\"\\\", \\\"w\\\");\\n            await ns.write(ROOTED_HOSTS, HOST_SERVER, \\\"w\\\");\\n            await ns.write(CRAWLED_CONTRACTS, \\\"\\\", \\\"w\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                // Shift off the first host in our list of hosts to scan and scan it to see which nodes it is connected to\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedHosts = ns.scan(host);\\n                    // For each scanned server, make sure that we haven't crawled it before.\\n                    // If we haven't crawled it, then push it into an array of new hosts to scan after we exhaust all\\n                    // hosts at our current crawl depth\\n                    // Finally, write to the crawl reports/logs\\n                    for (let host of scannedHosts) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledHosts.includes(host)) {\\n                            // Get a server object for the host we are crawling\\n                            let server = ns.getServer(host);\\n                            // If the server is one of ours, skip crawling it, there are better ways to access them\\n                            if (!server.purchasedByPlayer) {\\n                                // Host Info Report\\n                                // Hostname, Has Admin Rights, Required Hacking Skill, Open Port Count,\\n                                // Number of Open Ports Required, Max RAM, CPU Cores, Max Money, Organization \\n                                let hostInfoData = [host, server.hasAdminRights, server.requiredHackingSkill,\\n                                    server.openPortCount, server.numOpenPortsRequired, server.maxRam,\\n                                    server.cpuCores, server.moneyMax, server.organizationName];\\n                                // Format a string for this line of the report\\n                                let hostInfo = ns.vsprintf(\\\"%s \\\".repeat(hostInfoData.length) + \\\"\\\\n\\\", [host, server.hasAdminRights, server.requiredHackingSkill, server.openPortCount,\\n                                    server.numOpenPortsRequired, server.maxRam, server.cpuCores, server.moneyMax,\\n                                    server.organizationName]);\\n                                // Get the files on the servers\\n                                let files = ns.ls(host);\\n                                // Filter out coding contracts. I could just use \\\".cct\\\" as the second argument in\\n                                // ns.ls(host, grep), but I will do it this way in case I want to do something with \\n                                // the other files\\n                                let contractsInfo = \\\"\\\";\\n                                for (let codingContract of files.filter(file => file.match(\\\".cct\\\"))) {\\n                                    let contractInfo = ns.vsprintf(\\\"%s %s\\\\n\\\", [codingContract, host]);\\n                                    contractsInfo += contractInfo;\\n                                }\\n                                // Track the new hosts to scan and track that we crawled this host\\n                                newHostsToScan.push(host);\\n                                crawledHosts.push(host);\\n                                let hostReportString = host + \\\"\\\\n\\\";\\n                                await ns.write(KNOWN_HOSTS, hostReportString, \\\"a\\\");\\n                                await ns.write(CRAWL_REPORT, hostReportString, \\\"a\\\");\\n                                await ns.write(HOST_INFO_REPORT, hostInfo, \\\"a\\\");\\n                                await ns.write(CRAWLED_CONTRACTS, contractsInfo, \\\"a\\\");\\n                                // If we have root acess, write that to the rooted-hosts.txt file\\n                                if (server.hasAdminRights) {\\n                                    await ns.write(ROOTED_HOSTS, hostReportString, \\\"a\\\");\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts durring the next pass\\n                // Increase the depth and report our progress to the popup window\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledHosts.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///41cae7ea-62b3-4a80-bad8-e167a996bb06\",\"moduleSequenceNumber\":19639}],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"_hash\":\"f03fd24f9e904b859a88c58a812b3a7dc8150dbbb7d3232dc052393e24bdf1e2\",\"moduleSequenceNumber\":19639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SCRIPTS {\\n    static all() {\\n        let allScripts = [];\\n        allScripts.push(SCRIPTS.CONSTANTS);\\n        allScripts.push(SCRIPTS.PROGRAMS);\\n        allScripts.push(SCRIPTS.SERVERS);\\n        allScripts.push(SCRIPTS.KILL_THEN_INJECT);\\n        allScripts.push(SCRIPTS.GAIN_ROOT);\\n        allScripts.push(SCRIPTS.SIMPLE_HACK);\\n        allScripts.push(SCRIPTS.CRAWL);\\n        allScripts.push(SCRIPTS.RUN_KNOWN_HOSTS);\\n        allScripts.push(SCRIPTS.START_BOT);\\n        allScripts.push(SCRIPTS.STOP_BOT);\\n        return allScripts;\\n    }\\n}\\nSCRIPTS.CONSTANTS = \\\"/js/common/constants/constants.js\\\";\\nSCRIPTS.PROGRAMS = \\\"/js/common/constants/programs.js\\\";\\nSCRIPTS.SERVERS = \\\"/js/common/constants/servers.js\\\";\\nSCRIPTS.KILL_THEN_INJECT = \\\"/js/common/util/killThenInject.js\\\";\\nSCRIPTS.GAIN_ROOT = \\\"/js/gainRoot.js\\\";\\nSCRIPTS.SIMPLE_HACK = \\\"/js/simpleHack.js\\\";\\nSCRIPTS.CRAWL = \\\"/js/crawl.js\\\";\\nSCRIPTS.RUN_KNOWN_HOSTS = \\\"/js/runOnKnownHosts.js\\\";\\nSCRIPTS.START_BOT = \\\"/js/stocks/startBot.js\\\";\\nSCRIPTS.STOP_BOT = \\\"/js/stocks/stopBot.js\\\";\",\"filename\":\"/js/common/constants/scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"6061c4d4145c1237e6e96004e73f987b596987064adaf7e6cffbd026ced1ef23\",\"moduleSequenceNumber\":59,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    async function clearCustomTest() {\\n        let customNode = document.getElementById(\\\"custom-1\\\");\\n        if (customNode !== null) {\\n            customNode.remove();\\n        }\\n    }\\n    await clearCustomTest();\\n}\",\"filename\":\"/js/experiment/clearCustomTest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.75,\"server\":\"home\",\"_hash\":\"4d615f289ba4007eb9c0bd21d18fbfb5cd92a44f163a681daade6ccbbecbb794\",\"moduleSequenceNumber\":60,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SCRIPTS } from \\\"js/common/constants/scripts\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    ns.tail();\\n    // Function must be async\\n    async function runOnAllServers() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run.\\\");\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let arg2 = false;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"boolean\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not boolean. It should be the whether or not to kill \\\"\\n                    + \\\"all scripts before running new ones.\\\");\\n            }\\n        }\\n        const SHOULD_KILL = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        let purchasedServers;\\n        async function initiailize() {\\n            purchasedServers = ns.getPurchasedServers();\\n            purchasedServers.push(HOST_SERVER);\\n        }\\n        // Execute the script on each server, passing in args if we have them\\n        async function remoteExecute() {\\n            for (let server of purchasedServers) {\\n                if (SHOULD_KILL) {\\n                    if (server == HOST_SERVER) {\\n                        if (purchasedServers.length > 1) {\\n                            // LMAO\\n                            ns.exec(SCRIPTS.KILL_THEN_INJECT, purchasedServers[1], THREADS, HOST_SERVER, SCRIPT_NAME, THREADS, ...args);\\n                        }\\n                        else {\\n                            ns.print(\\\"Error: Can't Kill All and execute with only one server! Kill all first, then run with arg[2] = false.\\\");\\n                        }\\n                    }\\n                    ns.killall(server);\\n                }\\n                if (TOTAL_ARGS > 3) {\\n                    ns.exec(SCRIPT_NAME, server, THREADS, ...args);\\n                }\\n                else {\\n                    ns.exec(SCRIPT_NAME, server, THREADS);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnAllServers();\\n}\",\"filename\":\"/js/runOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/constants/scripts.js\",\"url\":\"blob:file:///f4c26af3-8e08-4292-9cc4-7271ea97513a\"},{\"filename\":\"/js/runOnAllServers.js\",\"url\":\"blob:file:///48fb3ff7-f678-4ff1-a103-f118d2d55c33\"}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"cc8709c2dbeca5d8707c97e87ef8f56086748d4674d54b5d16939a4a0b300b9d\",\"moduleSequenceNumber\":61,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    async function sidebarTest() {\\n        let drawerItemTempParent = document.createElement(\\\"div\\\");\\n        drawerItemTempParent.innerHTML = `\\r\\n        <div id=\\\"custom-1\\\" class=\\\"MuiButtonBase-root jss21 MuiListItem-root MuiListItem-gutters MuiListItem-padding MuiListItem-button css-1kk0p5e\\\" tabindex=\\\"0\\\" role=\\\"button\\\">\\r\\n            <div class=\\\"MuiListItemIcon-root css-1f8bwsm\\\">\\r\\n                <svg class=\\\"MuiSvgIcon-root MuiSvgIcon-colorSecondary MuiSvgIcon-fontSizeMedium css-16w0lv1\\\" focusable=\\\"false\\\" viewBox=\\\"0 0 24 24\\\" aria-hidden=\\\"true\\\" data-testid=\\\"LastPageIcon\\\">\\r\\n                    <path d=\\\"M5.59 7.41 10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"></path>\\r\\n                </svg>\\r\\n            </div>\\r\\n            <div class=\\\"MuiListItemText-root css-1tsvksn\\\">\\r\\n                <p class=\\\"MuiTypography-root MuiTypography-body1 css-11wufc6\\\">Custom</p>\\r\\n            </div>\\r\\n            <span class=\\\"MuiTouchRipple-root css-w0pj6f\\\"></span>\\r\\n        </div>\\r\\n        `;\\n        let drawerItem = drawerItemTempParent.firstElementChild;\\n        // Create a basic div tag to use instead of creating several\\n        const BLANK_ELEMENT = document.createElement(\\\"div\\\");\\n        const BUTTONS = document.querySelectorAll(\\\".MuiButtonBase-root\\\");\\n        let customNode = document.getElementById(\\\"custom-1\\\");\\n        if (customNode !== null) {\\n            customNode.remove();\\n        }\\n        let hackingMenu = BLANK_ELEMENT;\\n        //ns.tprint(buttonBases.length);\\n        for (let button of BUTTONS) {\\n            let buttonHTML = button;\\n            if (buttonHTML.innerText == \\\"Hacking\\\") {\\n                hackingMenu = buttonHTML;\\n            }\\n        }\\n        let hackingDrawer = hackingMenu.nextElementSibling;\\n        //ns.tprint(hackingDrawer.innerHTML);\\n        let hackingListRoot = BLANK_ELEMENT;\\n        if (hackingDrawer !== null) {\\n            let listRoot = hackingDrawer.querySelector(\\\".MuiList-root\\\");\\n            if (listRoot != null) {\\n                hackingListRoot = listRoot;\\n            }\\n        }\\n        else {\\n            ns.tprint(\\\"Error: hackingDrawer not found (is null).\\\");\\n            ns.exit();\\n        }\\n        //ns.tprint(hackingListRoot.innerHTML);\\n        //ns.tprint(drawerItem.innerHTML);\\n        if (drawerItem !== null) {\\n            hackingListRoot.appendChild(drawerItem);\\n            //ns.tprint(\\\"Custom drawer injected.\\\");\\n        }\\n        else {\\n            ns.tprint(\\\"Error: drawerItem is null\\\");\\n        }\\n    }\\n    await sidebarTest();\\n}\",\"filename\":\"/js/experiment/sidebarTest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.75,\"server\":\"home\",\"_hash\":\"6d3bf3fe8bc55ff81eddce082402331f88483995213c3b9da381d0a97f45d0cd\",\"moduleSequenceNumber\":62,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///65db1e18-f1bd-40fa-91f2-9b46675990ce\",\"moduleSequenceNumber\":422}],\"dependents\":[],\"ramUsage\":2.95,\"server\":\"home\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    async function template() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Target Server\\r\\n                Expected: string\\r\\n                This is the server we want to hack. We can hack any server in the game, but only \\r\\n                if our skill is high enough and we have root access.\\r\\n\\r\\n                arg[1]? - Affect Stock Market?\\r\\n                Optional\\r\\n                Expected: boolean\\r\\n                If true, hack() will affect the stock market, making it trend downwards on a successful hack()\\r\\n\\r\\n                arg[2]? - threads\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n                the script is running with.\\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n        // An enum for naming your arguments instead of just using integers\\n        let ARGS;\\n        (function (ARGS) {\\n            ARGS[ARGS[\\\"ARGUMENT_ONE\\\"] = 0] = \\\"ARGUMENT_ONE\\\";\\n        })(ARGS || (ARGS = {}));\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server //\\n        // This is the server we want to hack. We can hack any server in the game, but only if our skill is high enough\\n        // and we have root access.\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[ARGS.ARGUMENT_ONE]);\\n        if (!isArgumentValid) {\\n            ns.tprint(ns.vsprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", [argument]));\\n            argumentError();\\n        }\\n        const ARGUMENT = argument;\\n    }\\n    // Run the function or it's useless\\n    await template();\\n}\",\"filename\":\"/js/template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"6620453c4f88ede21eb0bfe8b791cbaaadd40cbf9f21866df2b3651ebef0031d\",\"moduleSequenceNumber\":12819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SCRIPTS } from \\\"js/common/constants/scripts\\\";\\n// Once again I am dumb. You can't even copy programs to servers.\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // Get purchased servers and copy all available scripts to them\\n    async function copyProgramsToServers() {\\n        const HOST_SERVER = ns.getHostname();\\n        let purchasedServers;\\n        let filesToCopy = [];\\n        let failedCopies = [];\\n        /*\\n        // For checking avialble programs on the system\\n        let hasNuke             : boolean;\\n        let hasAutoLink         : boolean;\\n        let hasDeepScanV1       : boolean;\\n        let hasServerProfiler   : boolean;\\n        let hasBruteSSH         : boolean;\\n        let hasFTPCrack         : boolean;\\n        */\\n        function initialize() {\\n            // Check which programs are available on this computer\\n            /*\\n            hasNuke \\t        = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink         = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasDeepScanV1       = ns.fileExists(PROGRAMS.DEEPSCAN_V1, HOST_SERVER);\\n            hasServerProfiler   = ns.fileExists(PROGRAMS.SERVER_PROFILER, HOST_SERVER);\\n            hasBruteSSH         = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack         = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            */\\n            purchasedServers = ns.getPurchasedServers();\\n            for (let script of SCRIPTS.all()) {\\n                if (ns.fileExists(script, HOST_SERVER)) {\\n                    filesToCopy.push(script);\\n                }\\n            }\\n            ns.tprint(\\\"Files ready to copy: \\\" + filesToCopy);\\n        }\\n        async function copyFiles() {\\n            for (let server of purchasedServers) {\\n                let fileCopied = await ns.scp(filesToCopy, HOST_SERVER, server);\\n                if (!fileCopied) {\\n                    failedCopies.push(server);\\n                }\\n            }\\n            ns.tprint(\\\"Finished copying. \\\" + failedCopies.length + \\\" Failures. \\\\n Failed servers: \\\" + failedCopies);\\n        }\\n        initialize();\\n        await copyFiles();\\n    }\\n    // Run the function or it's useless\\n    await copyProgramsToServers();\\n}\",\"filename\":\"/js/util/copyScriptsToServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"_hash\":\"e0442fc86b31b65b30386c51ee9566dc55055d3252a6506e010edcd4015866e9\",\"moduleSequenceNumber\":65,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"home\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":66,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    async function purchaseServers() {\\n        let purchasedServerMaxRam = ns.getPurchasedServerMaxRam();\\n        let purchasedServerLimit = ns.getPurchasedServerLimit();\\n        let purchasedServers = ns.getPurchasedServers();\\n        ns.tprint(\\\"Max RAM can purchase: \\\" + purchasedServerMaxRam);\\n        ns.tprint(\\\"Total Servers: \\\" + purchasedServers.length + \\\" / \\\" + purchasedServerLimit);\\n        ns.tprint(\\\"Price of Max RAM server: \\\" + ns.getPurchasedServerCost(purchasedServerMaxRam));\\n        ns.tprint(\\\"Purchased Servers: \\\" + purchasedServers);\\n        if (ns.args.length == 0) {\\n            ns.tprint(\\\"Script usage: run purchaseServers.js isBuying RAM_Exponent? Hostname?\\\");\\n            ns.tprint(\\\"RAM is purchased using 2 to the RAM_Exponent power.\\\");\\n        }\\n        // Check if we are buying or just looking for information\\n        // If we are buying, then we check the arguments to make sure they are correct. We then set up a confirmation\\n        // prompt to avoid wasting money if we put in something wrong.\\n        if (typeof (ns.args[0]) == \\\"boolean\\\") {\\n            let isBuying = ns.args[0];\\n            if (isBuying) {\\n                if (ns.args.length > 2) {\\n                    if (typeof (ns.args[1]) == \\\"number\\\") {\\n                        if (typeof (ns.args[2]) == \\\"string\\\") {\\n                            let requestedRAM = Math.pow(2, ns.args[1]);\\n                            let hostname = ns.args[2];\\n                            let hasConfirmed = await ns.prompt(\\\"Purchasing a \\\" + requestedRAM + \\\" GB server for \\\"\\n                                + ns.getPurchasedServerCost(requestedRAM) + \\\" with hostname, \\\"\\n                                + hostname + \\\". Is this correct?\\\");\\n                            if (hasConfirmed) {\\n                                ns.purchaseServer(hostname, requestedRAM);\\n                                ns.tprint(\\\"Server purchased. Hostname: \\\" + hostname);\\n                            }\\n                            else {\\n                                ns.tprint(\\\"Purchase canceled.\\\");\\n                            }\\n                            ;\\n                        }\\n                        else {\\n                            ns.tprint(\\\"Error: args[2] not a string. Got \\\" + ns.args[2].toString());\\n                        }\\n                    }\\n                    else {\\n                        ns.tprint(\\\"Error: args[1] not a number. Got \\\" + ns.args[1].toString());\\n                    }\\n                }\\n            }\\n            // If we are not buying, then use the second argument to check the cost of the server for that amount\\n            // of RAM\\n            else {\\n                if (ns.args.length > 1) {\\n                    if (typeof (ns.args[1]) == \\\"number\\\") {\\n                        let requestedRAM = Math.pow(2, ns.args[1]);\\n                        ns.tprint(\\\"Price of requested \\\" + requestedRAM + \\\" GB RAM server: \\\"\\n                            + ns.getPurchasedServerCost(requestedRAM));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    // Run the function or it's useless\\n    await purchaseServers();\\n}\",\"filename\":\"/js/util/purchaseServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"_hash\":\"27b8e2d733f4180c3d94d55f1c98fcd0e1e07f65cfaaa26ef175ad650b5704fd\",\"moduleSequenceNumber\":67,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { SCRIPTS } from \\\"js/common/constants/scripts\\\";\\n// import { Stock } from \\\"js/stocks/stock\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    async function tradeManager() {\\n        const START = 'start';\\n        const STOP = 'stop';\\n        const COMMANDS = [START, STOP];\\n        // Handle arguments\\n        // Optional: Find a sexy way to do it\\n        /* ARGUMENTS */\\n        // args[0] - Command (Start, Stop, List)\\n        //\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Command\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        // If the argument is invalid or the command isn't valid, exit\\n        if (!isArgumentValid || !COMMANDS.includes(argument)) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected %s, got %s\\\", COMMANDS, argument);\\n            ns.exit();\\n        }\\n        const COMMAND = argument;\\n        if (COMMAND == START) {\\n            ns.run(SCRIPTS.START_BOT, 1, ...ns.args.slice(1));\\n        }\\n        else if (COMMAND == STOP) {\\n        }\\n    }\\n    // Run the function or it's useless\\n    await tradeManager();\\n}\",\"filename\":\"/js/stocks/tradeManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/constants/scripts.js\",\"url\":\"blob:file:///a6764b28-5fd8-493a-86f2-4a310c49565f\"},{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///474ceecc-2d78-484a-afa4-512134d128e1\"},{\"filename\":\"/js/stocks/tradeManager.js\",\"url\":\"blob:file:///9984dc4d-6939-4fb8-867a-d54e3889f205\"}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"1337c21421a795459b9ea0748f8d287735a30936421f7d78314e88584bf4ed84\",\"moduleSequenceNumber\":68,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TradeBot } from \\\"js/stocks/tradeBot\\\";\\nimport { Argument } from \\\"js/common/argument\\\";\\nimport { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nimport { Formatter } from \\\"js/common/formatter\\\";\\nimport { BUDGET } from \\\"js/common/budget\\\";\\n// import { Stock } from \\\"js/stocks/stock\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    async function startBot() {\\n        ns.tail();\\n        // Handle arguments\\n        // Optional: Find a sexy way to do it\\n        /* ARGUMENTS */\\n        // args[0] - Name of tradebot\\n        // args[1] - Budget amount for this tradebot\\n        // args[2] - Forecast Threshold (minimum forecast magnitude)\\n        // args[3...] - Any symbols for stocks we want to add to the bot, in case we want to track stocks we own already\\n        let argument;\\n        let isArgumentValid;\\n        let formatter = new Formatter(ns);\\n        // arg[0] - Name\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[1] is invalid. Expected a string, but got %s\\\", argument);\\n            ns.exit();\\n        }\\n        const NAME = argument;\\n        // arg[1] - Budget\\n        [isArgumentValid, argument] = Argument.validateNumber(ns.args[1]);\\n        if (!isArgumentValid || argument < 0) {\\n            ns.tprintf(\\\"Error: arg[1] is invalid. Expected a number above 0, but got %s\\\", typeof (argument));\\n            ns.exit();\\n        }\\n        const STOCK_BUDGET = argument;\\n        // arg[2] - Forecast Threshold\\n        [isArgumentValid, argument] = Argument.validateNumber(ns.args[2]);\\n        if (!isArgumentValid || argument < 0 || argument > 1) {\\n            ns.tprintf(\\\"Error: arg[1] is invalid. Expected a number between 1 and 0 but got %s\\\", argument);\\n            ns.exit();\\n        }\\n        const FORECAST_THRESHOLD = argument;\\n        // args[3...] - Stock Symbols\\n        // Loop over the rest of the args starting with index 3 and add them to a stock symbol array if valid\\n        let stockSymbols = new Array();\\n        for (let index = 3; index < ns.args.length; index++) {\\n            [isArgumentValid, argument] = Argument.validateString(ns.args[index]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[1] is invalid. Expected a string, but got %s\\\", typeof (argument));\\n                ns.exit();\\n            }\\n            stockSymbols.push(argument);\\n        }\\n        BUDGET.addToStockBudget(ns, STOCK_BUDGET);\\n        ns.print(ns.vsprintf(\\\"Budget: %s, Tried to add: %s\\\", [BUDGET.STOCKS, STOCK_BUDGET].map(formatter.formatCurrency)));\\n        let tradeBot = new TradeBot(ns, NAME, FORECAST_THRESHOLD, ...stockSymbols);\\n        while (true) {\\n            await tradeBot.tick();\\n            ns.print(ns.vsprintf(\\\"Portfolio value: %s, Portfolio Size: %s, Budget: %s\\\", [formatter.formatCurrency(tradeBot.portfolioValue), tradeBot.portfolio.length,\\n                formatter.formatCurrency(BUDGET.STOCKS)]));\\n            await ns.asleep(CONSTANTS.STOCKS.UPDATE_TICK_DURATION);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await startBot();\\n}\",\"filename\":\"/js/stocks/startBot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///fe503abf-6a76-45ed-8cfd-60b6342f210b\",\"moduleSequenceNumber\":12002},{\"filename\":\"/js/common/budget.js\",\"url\":\"blob:file:///6c97ed82-ee3a-4691-b05d-d38bcf7a4c04\",\"moduleSequenceNumber\":17273},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///fe503abf-6a76-45ed-8cfd-60b6342f210b\",\"moduleSequenceNumber\":12002},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///aef43294-aaa0-4829-ad3f-fa23ff2c19b0\",\"moduleSequenceNumber\":56},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///fe503abf-6a76-45ed-8cfd-60b6342f210b\",\"moduleSequenceNumber\":12002},{\"filename\":\"/js/common/budget.js\",\"url\":\"blob:file:///6c97ed82-ee3a-4691-b05d-d38bcf7a4c04\",\"moduleSequenceNumber\":17273},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///fe503abf-6a76-45ed-8cfd-60b6342f210b\",\"moduleSequenceNumber\":12002},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/stocks/position.js\",\"url\":\"blob:file:///17baf7d9-b0ca-4580-8d3a-b5a1da19ff57\",\"moduleSequenceNumber\":12010},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/stocks/stock.js\",\"url\":\"blob:file:///8290487b-a6ad-49e8-8b9a-5bf379d29948\",\"moduleSequenceNumber\":12018},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/stocks/tradeBot.js\",\"url\":\"blob:file:///7a6840aa-1406-431a-ad72-8402c6e84a42\",\"moduleSequenceNumber\":18317},{\"filename\":\"/js/stocks/startBot.js\",\"url\":\"blob:file:///7bf4bf68-75a6-40bb-bfaf-ca0eaf91d456\",\"moduleSequenceNumber\":18318}],\"dependents\":[],\"ramUsage\":31.1,\"server\":\"home\",\"_hash\":\"77dc0a40adec76143ecd302c4baf052ce55926119b23fdeee9f2de4c16c7b730\",\"moduleSequenceNumber\":18318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // Simple idea for stopping scripts from another script. Just give each script an event named after the\\n    // script path and a custom name\\n    // This idea doesn't play that nicely with the netscript environemtn\\n    async function worker() {\\n        ns.tail();\\n        let name = ns.args[0];\\n        const SCRIPT_NAME = ns.getScriptName();\\n        let eventName = ns.vsprintf(\\\"%s %s\\\", [SCRIPT_NAME, name]);\\n        ns.print(eventName);\\n        // Add an event listener to stop the script\\n        //window.addEventListener(eventName, stop);\\n        while (true) {\\n            ns.print(ns.sprintf(\\\"Running %1$s\\\", name));\\n            await ns.sleep(1000);\\n        }\\n        function stop() {\\n            ns.print(\\\"Stopping...\\\");\\n            ns.exit();\\n        }\\n    }\\n    // Run the function or it's useless\\n    await worker();\\n}\",\"filename\":\"/js/experiment/worker.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/experiment/worker.js\",\"url\":\"blob:file:///95df0ed6-de45-401e-9151-fece330aacfe\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"a7e4917e8b931dda1dd26ef81ef9d1fd79e7c12a3c4f0ff763582bd18cb8854f\",\"moduleSequenceNumber\":70,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    async function manager() {\\n        ns.tail();\\n        const WORKER_SCRIPT = '/js/experiment/worker.js';\\n        const HOST_SERVER = ns.getHostname();\\n        const LIST_INFO = `\\r\\n        Name:    %1$s`;\\n        if (ns.args[0] == 'start') {\\n            if (typeof (ns.args[1]) == 'string') {\\n                let name = ns.args[1];\\n                ns.run(WORKER_SCRIPT, 1, name);\\n            }\\n        }\\n        else if (ns.args[0] == 'stop') {\\n            if (typeof (ns.args[1]) == 'string') {\\n                let name = ns.args[1];\\n                ns.kill(WORKER_SCRIPT, HOST_SERVER, name);\\n            }\\n        }\\n        else if (ns.args[0] == 'list') {\\n            let processInfo = ns.ps();\\n            let name;\\n            let info = \\\"\\\";\\n            for (let process of processInfo) {\\n                if (process.filename == WORKER_SCRIPT) {\\n                    name = process.args[0];\\n                    info += ns.sprintf(LIST_INFO, name);\\n                }\\n            }\\n            ns.tprint(info);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await manager();\\n}\",\"filename\":\"/js/experiment/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/experiment/manager.js\",\"url\":\"blob:file:///b0596eb5-0c46-46e9-842f-c58d2e7d19b3\"}],\"dependents\":[],\"ramUsage\":3.35,\"server\":\"home\",\"_hash\":\"184569c7f88be5601d6fad141389bae12a9ba639e8e533788d741da4cc2aa135\",\"moduleSequenceNumber\":12005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    async function hack() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server //\\n        // This is the server we want to hack. We can hack any server in the game, but only if our skill is high enough\\n        // and we have root access.\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", argument);\\n            argumentError();\\n        }\\n        const TARGET_SERVER = argument;\\n        // arg[1] - (Optional) Affect stock market? //\\n        // Default - false\\n        // Control whether we want the hack to affect the stock market. This will cause the stock to trend downward, for\\n        // hack()\\n        if (ns.args.length > 1) {\\n            [isArgumentValid, argument] = Argument.validateBoolean(ns.args[1]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[1] is invalid. Expected true/false, but got %s\\\", argument);\\n                argumentError();\\n            }\\n        }\\n        else {\\n            argument = false;\\n        }\\n        const AFFECT_STOCK_MARKET = argument;\\n        // arg[2] - (Optional) Threads //\\n        // Default - Number of threads the script is running with\\n        // The number of threads to use for this function. Must be less than or equal to the number of threads the\\n        // script is running with\\n        if (ns.args.length > 2) {\\n            [isArgumentValid, argument] = Argument.validateNumber(ns.args[2]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[2] is invalid. Expected a number, but got %s\\\", argument);\\n                argumentError();\\n            }\\n        }\\n        else {\\n            argument = 0;\\n        }\\n        const THREADS = argument ? argument : 1;\\n        // Wrap these guys into a BasicHGWOptions object to give to the hack script\\n        let HGW_OPTIONS = {\\n            stock: AFFECT_STOCK_MARKET,\\n            threads: THREADS\\n        };\\n        // LOL all of that just to call this\\n        await ns.hack(TARGET_SERVER, HGW_OPTIONS);\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Target Server\\r\\n                Expected: string\\r\\n                This is the server we want to hack. We can hack any server in the game, but only \\r\\n                if our skill is high enough and we have root access.\\r\\n\\r\\n                arg[1]? - Affect Stock Market?\\r\\n                Optional\\r\\n                Expected: boolean\\r\\n                If true, hack() will affect the stock market, making it trend downwards on a successful hack()\\r\\n\\r\\n                arg[2]? - threads\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n                the script is running with.\\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await hack();\\n}\",\"filename\":\"/js/hack/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/global.js\",\"url\":\"blob:file:///c02ac7ec-fbc0-4384-8b97-184d43c769bf\"},{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///0fdbd3ac-f912-44b9-93f6-85847f59a3da\"},{\"filename\":\"/js/hack/hack.js\",\"url\":\"blob:file:///9a2873a4-eb53-41fb-ac98-52ceffe4cbbd\"}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"37969e2bce8fbdbcc8e9c15b56157ed06994fb6ec49e3353a518f685b2fff59a\",\"moduleSequenceNumber\":72,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    async function weaken() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server //\\n        // This is the server we want to hack. We can hack any server in the game, but only if our skill is high enough\\n        // and we have root access.\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", argument);\\n            argumentError();\\n        }\\n        const TARGET_SERVER = argument;\\n        // arg[1] - (Optional) Affect stock market? //\\n        // Default - false\\n        // Control whether we want the hack to affect the stock market. This will cause the stock to trend downward, for\\n        // hack()\\n        if (ns.args.length > 1) {\\n            [isArgumentValid, argument] = Argument.validateBoolean(ns.args[1]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[1] is invalid. Expected true/false, but got %s\\\", argument);\\n                argumentError();\\n            }\\n        }\\n        else {\\n            argument = false;\\n        }\\n        const AFFECT_STOCK_MARKET = argument;\\n        // arg[2] - (Optional) Threads //\\n        // Default - Number of threads the script is running with\\n        // The number of threads to use for this function. Must be less than or equal to the number of threads the\\n        // script is running with\\n        if (ns.args.length > 2) {\\n            [isArgumentValid, argument] = Argument.validateNumber(ns.args[2]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[2] is invalid. Expected a number, but got %s\\\", argument);\\n                argumentError();\\n            }\\n        }\\n        else {\\n            argument = 0;\\n        }\\n        const THREADS = argument ? argument : 1;\\n        // Wrap these guys into a BasicHGWOptions object to give to the hack script\\n        let HGW_OPTIONS = {\\n            stock: AFFECT_STOCK_MARKET,\\n            threads: THREADS\\n        };\\n        // LOL all of that just to call this\\n        await ns.weaken(TARGET_SERVER, HGW_OPTIONS);\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Target Server\\r\\n                Expected: string\\r\\n                This is the server we want to weaken. We can weaken any server in the game, I think.\\r\\n\\r\\n                arg[1]? - Affect Stock Market?\\r\\n                Optional\\r\\n                Expected: boolean\\r\\n                If true, weaken() will affect the stock market, making it trend downwards on a successful weaken()\\r\\n\\r\\n                arg[2]? - threads\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n                the script is running with.\\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await weaken();\\n}\",\"filename\":\"/js/hack/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/global.js\",\"url\":\"blob:file:///c02ac7ec-fbc0-4384-8b97-184d43c769bf\"},{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///4b07197b-e9c9-4e96-a63f-8ef37019636b\"},{\"filename\":\"/js/hack/weaken.js\",\"url\":\"blob:file:///e57dcf54-4a65-416d-a5d1-7a44ad2e3696\"}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"1bbff95634d24a8b282237dbab905035b7fcfafc9d9527497570f725165a9d7a\",\"moduleSequenceNumber\":73,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    async function weaken() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server //\\n        // This is the server we want to hack. We can hack any server in the game, but only if our skill is high enough\\n        // and we have root access.\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", argument);\\n            argumentError();\\n        }\\n        const TARGET_SERVER = argument;\\n        // arg[1] - (Optional) Affect stock market? //\\n        // Default - false\\n        // Control whether we want the hack to affect the stock market. This will cause the stock to trend downward, for\\n        // hack()\\n        if (ns.args.length > 1) {\\n            [isArgumentValid, argument] = Argument.validateBoolean(ns.args[1]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[1] is invalid. Expected true/false, but got %s\\\", argument);\\n                argumentError();\\n            }\\n        }\\n        else {\\n            argument = false;\\n        }\\n        const AFFECT_STOCK_MARKET = argument;\\n        // arg[2] - (Optional) Threads //\\n        // Default - Number of threads the script is running with\\n        // The number of threads to use for this function. Must be less than or equal to the number of threads the\\n        // script is running with\\n        if (ns.args.length > 2) {\\n            [isArgumentValid, argument] = Argument.validateNumber(ns.args[2]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[2] is invalid. Expected a number, but got %s\\\", argument);\\n                argumentError();\\n            }\\n        }\\n        else {\\n            argument = 0;\\n        }\\n        const THREADS = argument ? argument : 1;\\n        // Wrap these guys into a BasicHGWOptions object to give to the hack script\\n        let HGW_OPTIONS = {\\n            stock: AFFECT_STOCK_MARKET,\\n            threads: THREADS\\n        };\\n        // LOL all of that just to call this\\n        await ns.grow(TARGET_SERVER, HGW_OPTIONS);\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Target Server\\r\\n                Expected: string\\r\\n                This is the server we want to grow. We can grow any server in the game, I think.\\r\\n\\r\\n                arg[1]? - Affect Stock Market?\\r\\n                Optional\\r\\n                Expected: boolean\\r\\n                If true, grow() will affect the stock market, making it trend upwards on a successful grow()\\r\\n\\r\\n                arg[2]? - threads\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n                the script is running with.\\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await weaken();\\n}\",\"filename\":\"/js/hack/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/global.js\",\"url\":\"blob:file:///c02ac7ec-fbc0-4384-8b97-184d43c769bf\"},{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///4b07197b-e9c9-4e96-a63f-8ef37019636b\"},{\"filename\":\"/js/hack/grow.js\",\"url\":\"blob:file:///30e5f5fa-611f-49b4-8344-307f0d6c2dbf\"}],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"home\",\"_hash\":\"6a3f10198a418c39a0b6f805efb0edde6a9cf02865ab77bc450c59bde50e0882\",\"moduleSequenceNumber\":74,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    // A simple script for toggling the Global debug variable\\n    async function toggleDebug() {\\n        if (GLOBAL.DEBUG) {\\n            GLOBAL.DEBUG = false;\\n            ns.tprint(\\\"Debug mode disabled.\\\");\\n        }\\n        else {\\n            GLOBAL.DEBUG = true;\\n            ns.tprint(\\\"Debug mode enabled.\\\");\\n        }\\n    }\\n    // Run the function or it's useless\\n    await toggleDebug();\\n}\",\"filename\":\"/js/util/toggleDebug.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/global.js\",\"url\":\"blob:file:///03eeb5a2-8be7-4818-be35-1b94462fe3e3\",\"moduleSequenceNumber\":76},{\"filename\":\"/js/util/toggleDebug.js\",\"url\":\"blob:file:///42a32f1e-0873-40e5-982b-da22806ef6a2\",\"moduleSequenceNumber\":4311}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"c4b31ee47ed9704026f8ffb3f572e3095a14a2f8dfbb663ff27bd901db13d87e\",\"moduleSequenceNumber\":4311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class GLOBAL {\\n}\",\"filename\":\"/js/common/global.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"4f62655333230e8109c9b4fa94e656dc065edac2e0da1a675b552de58179bd23\",\"moduleSequenceNumber\":76,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument, StringArgument } from \\\"js/common/argument\\\";\\n// A class for handling operations common to all scripts\\n// Not really sure how to make it work well enough to be useful\\nexport class Script {\\n    constructor(netscript, totalRequiredArgs, argTypes, rawArgs, usageInfo) {\\n        this.ns = netscript;\\n        this.totalRequiredArguments = totalRequiredArgs;\\n        this.argumentTypes = argTypes;\\n        this.rawArguments = rawArgs;\\n        this.arguments = new Array();\\n        this.usageInfo = usageInfo || \\\"\\\";\\n        this.validateArguments();\\n    }\\n    validateArguments() {\\n        // First make sure we have the right number of arguments\\n        let totalArguments = this.rawArguments.length;\\n        if (totalArguments < this.totalRequiredArguments) {\\n            this.ns.tprint(this.ns.vsprintf(\\\"Error: Not enough arguments. Expected at least %s arguments, but got %s.\\\", [this.totalRequiredArguments, totalArguments]));\\n            this.argumentError();\\n        }\\n        let argument;\\n        let rawArgument;\\n        let isArgumentValid;\\n        // Go through each of our raw arguments and check them against their expected type\\n        for (let index = 0; index < this.rawArguments.length; index++) {\\n            let expectedArgType = this.argumentTypes[index];\\n            let argType = typeof (this.rawArguments[index]);\\n            switch (expectedArgType) {\\n                case 'string':\\n                    [isArgumentValid, rawArgument] = Argument.validateString(this.rawArguments[index]);\\n                    if (!isArgumentValid) {\\n                        this.ns.tprint(this.ns.vsprintf(\\\"Error: arg[%s] is invalid. Expected a number, but got %s\\\", [index, rawArgument]));\\n                        this.argumentError();\\n                    }\\n                    argument = new StringArgument(rawArgument);\\n                    break;\\n                case 'number':\\n                    break;\\n                case 'boolean':\\n                    break;\\n                default:\\n                    this.ns.print(this.ns.vsprintf(\\\"Error: Argument type is not supported. Must be string, number, or boolean. Got %s.\\\", [argType]));\\n                    this.argumentError();\\n            }\\n        }\\n    }\\n    argumentError() {\\n        this.usage();\\n        this.ns.exit();\\n    }\\n    usage() {\\n        let usage = `\\r\\n            arg[0] - Target Server\\r\\n            Expected: string\\r\\n            This is the server we want to weaken. We can weaken any server in the game, I think.\\r\\n\\r\\n            arg[1]? - Affect Stock Market?\\r\\n            Optional\\r\\n            Expected: boolean\\r\\n            If true, weaken() will affect the stock market, making it trend downwards on a successful weaken()\\r\\n\\r\\n            arg[2]? - threads\\r\\n            Optional\\r\\n            Expected: number\\r\\n            The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n            the script is running with.\\r\\n        `;\\n        this.ns.tprint(usage);\\n    }\\n}\",\"filename\":\"/js/common/script.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"66047e3be3e407e58a0e83ce7aa4758fa263ca7f7c9572d59db48bbe0777e3e4\",\"moduleSequenceNumber\":77,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    // This is a master script for running a hacking operation on a target\\n    async function master() {\\n        // if debug mode is one, \\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Target Server\\r\\n                Expected: string\\r\\n                This is the server we want to hack. We can hack any server in the game, but only \\r\\n                if our skill is high enough and we have root access.\\r\\n\\r\\n                arg[1]? - Affect Stock Market?\\r\\n                Optional\\r\\n                Expected: boolean\\r\\n                If true, hack() will affect the stock market, making it trend downwards on a successful hack()\\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n        /* ARGUMENTS */\\n        // An enum for naming your arguments instead of just using integers\\n        let ARGS;\\n        (function (ARGS) {\\n            ARGS[ARGS[\\\"TARGET_SERVER\\\"] = 0] = \\\"TARGET_SERVER\\\";\\n        })(ARGS || (ARGS = {}));\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server //\\n        // This is the server we want to hack. We can hack any server in the game, but only if our skill is high enough\\n        // and we have root access.\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[ARGS.TARGET_SERVER]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", argument);\\n            argumentError();\\n        }\\n        const TARGET_SERVER = argument;\\n    }\\n    // Run the function or it's useless\\n    await master();\\n}\",\"filename\":\"/js/hack/master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"83bcba6b6178bc828c6358b9bcd4878f10073e12a5d94e369db8fbb0ebc30639\",\"moduleSequenceNumber\":18754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    // A function for running a batch of HWGW on a target\\n    async function batch() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Target Server\\r\\n                Expected: string\\r\\n                This is the server we want to hack. We can hack any server in the game, but only \\r\\n                if our skill is high enough and we have root access.\\r\\n\\r\\n                arg[1]? - Affect Stock Market?\\r\\n                Optional\\r\\n                Expected: boolean\\r\\n                If true, hack() will affect the stock market, making it trend downwards on a successful hack()\\r\\n\\r\\n                arg[2]? - threads\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n                the script is running with.\\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n        // An enum for naming your arguments instead of just using integers\\n        let ARGS;\\n        (function (ARGS) {\\n            ARGS[ARGS[\\\"TARGET_SERVER\\\"] = 0] = \\\"TARGET_SERVER\\\";\\n        })(ARGS || (ARGS = {}));\\n        const SERVER_REPORT_STRING = `\\r\\n                \\r\\n        `;\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server //\\n        // This is the server we want to hack. We can hack any server in the game, but only if our skill is high enough\\n        // and we have root access.\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[ARGS.TARGET_SERVER]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", argument);\\n            argumentError();\\n        }\\n        const TARGET_SERVER = argument;\\n    }\\n    // Run the function or it's useless\\n    await batch();\\n}\",\"filename\":\"/js/hack/batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"4d9d75f2fd070a63cd2fd0178c14fdd79790d14ccaf8466a95e9f958b55aca5f\",\"moduleSequenceNumber\":14127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GLOBAL } from \\\"js/common/global\\\";\\nimport { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    // Use our crawl data to find the best hackable target\\n    async function findBestHackableTarget() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        const HOST_INFO = CONSTANTS.DIRECTORIES.CRAWL_LOGS + CONSTANTS.TEXT_FILES.HOST_INFO;\\n        // Make sure we have a host-info.txt, otherwise exit\\n        if (!ns.fileExists(HOST_INFO)) {\\n            ns.tprint(ns.vsprintf(\\\"Error: Missing no host-info.txt at %s\\\", [HOST_INFO]));\\n            ns.exit();\\n        }\\n        const DATA = ns.read(HOST_INFO);\\n        let bestHost = \\\"\\\";\\n        let highestMoney = 0;\\n        let playerHackingSkill = ns.getHackingLevel();\\n        // Parse the data and iterate over it to find the best target\\n        // Host Info Report\\n        // Hostname, Has Admin Rights, Required Hacking Skill, Open Port Count,\\n        // Number of Open Ports Required, Max RAM, CPU Cores, Max Money, Organization \\n        for (let row of DATA.split(CONSTANTS.NEWLINE)) {\\n            let hostData = row.split(CONSTANTS.SPACE);\\n            let hostName = hostData[0];\\n            let hasAdminRights = hostData[1];\\n            let requiredHackingSkill = hostData[2];\\n            let maxMoney = hostData[7];\\n            let debugReport = ns.sprintf(\\\"Host: %1$s, Admin: %2$s, Hack Skill: %3$s, Max Money: %4$s\\\", hostName, hasAdminRights, requiredHackingSkill, maxMoney);\\n            ns.print(debugReport);\\n            // If we don't have admin rights or our hacking skill is too low, then go to the next host\\n            if (!hasAdminRights || requiredHackingSkill > playerHackingSkill) {\\n                continue;\\n            }\\n            // Check if the max money is higher than the current highestMoney\\n            if (highestMoney < maxMoney) {\\n                highestMoney = maxMoney;\\n                bestHost = hostName;\\n            }\\n        }\\n        ns.tprintf(\\\"Best Host to Hack: %s, Max Money: %s\\\", bestHost, highestMoney);\\n    }\\n    // Run the function or it's useless\\n    await findBestHackableTarget();\\n}\",\"filename\":\"/js/util/findBestHackableTarget.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/global.js\",\"url\":\"blob:file:///03eeb5a2-8be7-4818-be35-1b94462fe3e3\",\"moduleSequenceNumber\":76},{\"filename\":\"/js/util/findBestHackableTarget.js\",\"url\":\"blob:file:///747b80d6-b76a-4a24-ace0-718e97e591b4\",\"moduleSequenceNumber\":19753}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"6239cc29d7843b8b0e135bfd58b0954160b9cc7531a2cf948c1946b0e33d2d48\",\"moduleSequenceNumber\":19753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport class Formatter {\\n    constructor(netscript) {\\n        this.formatCurrency = (number) => this.formatNumbers(number, CONSTANTS.FORMAT.CURRENCY);\\n        this.formatPercentage = (number) => this.formatNumbers(number, CONSTANTS.FORMAT.PERCENTAGE);\\n        this.formatNumber = (number) => this.formatNumbers(number, CONSTANTS.FORMAT.NUMBER);\\n        this.ns = netscript;\\n    }\\n    // This method serves as a factory for formatting different numbers in a string format\\n    // based on a string format. See http://numeraljs.com/\\n    formatNumbers(number, format) {\\n        return this.ns.nFormat(number, format);\\n    }\\n}\",\"filename\":\"/js/common/formatter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"28c0e422e4d6271f9047f60bf7086503e4a0556bbd1e04cb694b7dae39b16f4f\",\"moduleSequenceNumber\":12002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Formatter } from \\\"js/common/formatter\\\";\\nexport class BUDGET {\\n    static get CASH() {\\n        return BUDGET._CASH;\\n    }\\n    static updateCash(player) {\\n        BUDGET._CASH = player.money;\\n    }\\n    static get STOCKS() {\\n        return BUDGET._STOCKS;\\n    }\\n    // A method to add to our stock budget so we don't need to start a new trading bot every time we want to add funds\\n    static addToStockBudget(ns, amount) {\\n        let formatter = new Formatter(ns);\\n        let player = ns.getPlayer();\\n        BUDGET.updateCash(player);\\n        if (!BUDGET._STOCKS) {\\n            BUDGET._STOCKS = 0;\\n        }\\n        // Check if we have enough cash to add the amount to our budget\\n        // If we do, add it to our stock budget\\n        // If we don't print an error.\\n        if (amount < player.money) {\\n            ns.print(ns.vsprintf(\\\"Trying to add %s to budget of %s\\\", [amount, BUDGET._STOCKS].map(formatter.formatCurrency)));\\n            BUDGET._STOCKS += amount;\\n            ns.print(ns.vsprintf(\\\"New budget: %s\\\", [amount, BUDGET._STOCKS].map(formatter.formatCurrency)));\\n            return true;\\n        }\\n        else {\\n            ns.print(ns.vsprintf(\\\"Error: Tried to add %s to budget, but only have %s.\\\", [amount, player.money].map(formatter.formatCurrency)));\\n            return false;\\n        }\\n    }\\n    // A method to remove money from our stock budget\\n    // It will remove as much as possible.\\n    static withdrawFromStockBudget(ns, amount) {\\n        let formatter = new Formatter(ns);\\n        if (amount < BUDGET._STOCKS) {\\n            BUDGET._STOCKS -= amount;\\n            return true;\\n        }\\n        else {\\n            BUDGET._STOCKS = 0;\\n            ns.print(ns.vsprintf(\\\"Error: Tried to remove %s from budget, but only had %s. Removed everything.\\\", [amount, BUDGET._CASH].map(formatter.formatCurrency)));\\n            return false;\\n        }\\n    }\\n    static clearStockBudget() {\\n        BUDGET._STOCKS = 0;\\n    }\\n    static stock_yolo(player) {\\n        BUDGET.updateCash(player);\\n        BUDGET._STOCKS = player.money;\\n    }\\n}\",\"filename\":\"/js/common/budget.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"2311825ece1e4e72487f1247fba2b88b345f860a09376372c1df2cd5d49b7063\",\"moduleSequenceNumber\":17273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nimport { BUDGET } from \\\"js/common/budget\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    // The budgeter lets your modify the budget from the command line\\n    async function budgeter() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        const ADD = 'add';\\n        const WITHDRAW = 'withdraw';\\n        const LIST = 'list';\\n        const STOCK_BUDGET = 'stock';\\n        //const COMMANDS = [ADD, WITHDRAW, LIST];\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - COMMAND //\\n        // The command for the budgeter.\\n        // add - Add money to the specified budget\\n        // withdraw - Withdraw money from the specified budget\\n        // list - List all budget data\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprint(ns.vsprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", [argument]));\\n            argumentError();\\n        }\\n        const COMMAND = argument;\\n        // arg[1] - BUDGET_NAME //\\n        // The budget we want to add to\\n        // stock - The stock budget for our trader\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid && (COMMAND == ADD || COMMAND == WITHDRAW)) {\\n            ns.tprint(ns.vsprintf(\\\"Error: arg[1] is invalid. Command %s requires a budget target, but got %s\\\", [COMMAND, argument]));\\n            argumentError();\\n        }\\n        const BUDGET_NAME = argument;\\n        // arg[1] - AMOUNT //\\n        // The amount we want to add to our budget\\n        [isArgumentValid, argument] = Argument.validateNumber(ns.args[0]);\\n        if (!isArgumentValid && (COMMAND == ADD || COMMAND == WITHDRAW)) {\\n            ns.tprint(ns.vsprintf(\\\"Error: arg[1] is invalid. Command %s requires an amount to add to the budget, but got %s\\\", [COMMAND, argument]));\\n            argumentError();\\n        }\\n        const AMOUNT = argument;\\n        switch (COMMAND) {\\n            case ADD:\\n                addToBudget(BUDGET_NAME, AMOUNT);\\n                break;\\n            case WITHDRAW:\\n                withdrawFromBudget(BUDGET_NAME, AMOUNT);\\n                break;\\n            case LIST:\\n                listBudgetData();\\n                break;\\n            default:\\n                // If none of the commands match, it is invalid so throw an error\\n                ns.tprint(ns.vsprintf(\\\"Error: command not valid, got %s\\\", [COMMAND]));\\n                argumentError();\\n        }\\n        function addToBudget(budgetName, budgetAmount) {\\n            if (budgetName == STOCK_BUDGET) {\\n                BUDGET.addToStockBudget(ns, budgetAmount);\\n            }\\n        }\\n        function withdrawFromBudget(budgetName, budgetAmount) {\\n            if (budgetName == STOCK_BUDGET) {\\n                BUDGET.withdrawFromStockBudget(ns, budgetAmount);\\n            }\\n        }\\n        function listBudgetData() {\\n            let infoString = ns.vsprintf(`\\r\\n            Budget Info:\\r\\n\\r\\n            Cash:           %s\\r\\n            Stock Budget:   %s\\r\\n            `, [BUDGET.CASH, BUDGET.STOCKS]);\\n        }\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Command\\r\\n                Expected: string\\r\\n                add - Add to the specified budget\\r\\n                withdraw - Withdraw from the specified budget\\r\\n                list - List all budget data\\r\\n\\r\\n                arg[1]? - Budget\\r\\n                Optional\\r\\n                Expected: string\\r\\n                stock - The stock budget\\r\\n\\r\\n                arg[2]? - Amount\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The amount to add or withdraw from the budget. Not optional if command is add or withdraw. \\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await budgeter();\\n}\",\"filename\":\"/js/common/budgeter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/global.js\",\"url\":\"blob:file:///c02ac7ec-fbc0-4384-8b97-184d43c769bf\"},{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///4b07197b-e9c9-4e96-a63f-8ef37019636b\"},{\"filename\":\"/js/common/budgeter.js\",\"url\":\"blob:file:///bb4c37b6-3fef-492f-a1ae-02dda0e750b1\"}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"379e6a20498b5c902edbb17b6ffb584251de7ad62e2ebeb2d833db659598a65a\",\"moduleSequenceNumber\":83,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nimport { BUDGET } from \\\"js/common/budget\\\";\\nimport { Formatter } from \\\"js/common/formatter\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    // The budgeter lets your modify the budget from the command line\\n    async function budgeter() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        const FORMATTER = new Formatter(ns);\\n        let ARGUMENT;\\n        (function (ARGUMENT) {\\n            ARGUMENT[ARGUMENT[\\\"COMMAND\\\"] = 0] = \\\"COMMAND\\\";\\n            ARGUMENT[ARGUMENT[\\\"BUDGET_NAME\\\"] = 1] = \\\"BUDGET_NAME\\\";\\n            ARGUMENT[ARGUMENT[\\\"AMOUNT\\\"] = 2] = \\\"AMOUNT\\\";\\n        })(ARGUMENT || (ARGUMENT = {}));\\n        const ADD = 'add';\\n        const WITHDRAW = 'withdraw';\\n        const LIST = 'list';\\n        const CLEAR_BUDGET = 'clear';\\n        const YOLO = 'yolo';\\n        const STOCK_BUDGET = 'stock';\\n        //const COMMANDS = [ADD, WITHDRAW, LIST];\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - COMMAND //\\n        // The command for the budgeter.\\n        // add - Add money to the specified budget\\n        // withdraw - Withdraw money from the specified budget\\n        // list - List all budget data\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[ARGUMENT.COMMAND]);\\n        if (!isArgumentValid) {\\n            ns.tprint(ns.vsprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", [argument]));\\n            argumentError();\\n        }\\n        const COMMAND = argument;\\n        // arg[1] - BUDGET_NAME //\\n        // The budget we want to add to\\n        // stock - The stock budget for our trader\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[ARGUMENT.BUDGET_NAME]);\\n        if (!isArgumentValid && (COMMAND == ADD || COMMAND == WITHDRAW)) {\\n            ns.tprint(ns.vsprintf(\\\"Error: arg[1] is invalid. Command %s requires a budget target, but got %s\\\", [COMMAND, argument]));\\n            argumentError();\\n        }\\n        const BUDGET_NAME = argument;\\n        // arg[1] - AMOUNT //\\n        // The amount we want to add to our budget\\n        [isArgumentValid, argument] = Argument.validateNumber(ns.args[ARGUMENT.AMOUNT]);\\n        if (!isArgumentValid && (COMMAND == ADD || COMMAND == WITHDRAW)) {\\n            ns.tprint(ns.vsprintf(\\\"Error: arg[2] is invalid. Command %s requires an amount to add to the budget, but got %s\\\", [COMMAND, argument]));\\n            argumentError();\\n        }\\n        const AMOUNT = argument;\\n        // Check our command and execute the appropriate function\\n        switch (COMMAND) {\\n            case ADD:\\n                addToBudget(BUDGET_NAME, AMOUNT);\\n                break;\\n            case WITHDRAW:\\n                withdrawFromBudget(BUDGET_NAME, AMOUNT);\\n                break;\\n            case LIST:\\n                listBudgetData();\\n                break;\\n            case CLEAR_BUDGET:\\n                clearBudget(BUDGET_NAME);\\n                break;\\n            case YOLO:\\n                yolo(BUDGET_NAME);\\n                break;\\n            default:\\n                // If none of the commands match, it is invalid so throw an error\\n                ns.tprint(ns.vsprintf(\\\"Error: command not valid, got %s\\\", [COMMAND]));\\n                argumentError();\\n        }\\n        // Simple function that adds to the stock budget\\n        function addToBudget(budgetName, budgetAmount) {\\n            if (budgetName == STOCK_BUDGET) {\\n                BUDGET.addToStockBudget(ns, budgetAmount);\\n            }\\n        }\\n        // Simple function that withdraws from the stock budget\\n        function withdrawFromBudget(budgetName, budgetAmount) {\\n            if (budgetName == STOCK_BUDGET) {\\n                BUDGET.withdrawFromStockBudget(ns, budgetAmount);\\n            }\\n        }\\n        // A function to list our budget data\\n        function listBudgetData() {\\n            BUDGET.updateCash(ns.getPlayer());\\n            let infoString = ns.vsprintf(`\\r\\n            Budget Info:\\r\\n\\r\\n            Cash:           %s\\r\\n            Stock Budget:   %s\\r\\n            `, [BUDGET.CASH, BUDGET.STOCKS].map(FORMATTER.formatCurrency));\\n            ns.tprint(infoString);\\n        }\\n        function clearBudget(budgetName) {\\n            if (budgetName == STOCK_BUDGET) {\\n                BUDGET.clearStockBudget();\\n            }\\n            else {\\n                ns.tprintf(\\\"Error: Budget %s not found.\\\", budgetName);\\n            }\\n        }\\n        function yolo(budgetName) {\\n            if (budgetName == STOCK_BUDGET) {\\n                BUDGET.stock_yolo(ns.getPlayer());\\n            }\\n            else {\\n                ns.tprintf(\\\"Error: Budget %s not found.\\\", budgetName);\\n            }\\n        }\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Command\\r\\n                Expected: string\\r\\n                add - Add to the specified budget\\r\\n                withdraw - Withdraw from the specified budget\\r\\n                clear - Clear the specified budget\\r\\n                list - List all budget data\\r\\n                yolo - YOLO your money into the specified budget\\r\\n\\r\\n                arg[1]? - Budget\\r\\n                Optional\\r\\n                Expected: string\\r\\n                stock - The stock budget\\r\\n\\r\\n                arg[2]? - Amount\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The amount to add or withdraw from the budget. Not optional if command is add or withdraw. \\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await budgeter();\\n}\",\"filename\":\"/js/util/budgeter.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///fe503abf-6a76-45ed-8cfd-60b6342f210b\",\"moduleSequenceNumber\":12002},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b8bf38d1-16ce-4e50-9bca-878547f472f2\",\"moduleSequenceNumber\":12003},{\"filename\":\"/js/common/formatter.js\",\"url\":\"blob:file:///fe503abf-6a76-45ed-8cfd-60b6342f210b\",\"moduleSequenceNumber\":12002},{\"filename\":\"/js/common/budget.js\",\"url\":\"blob:file:///6c97ed82-ee3a-4691-b05d-d38bcf7a4c04\",\"moduleSequenceNumber\":17273},{\"filename\":\"/js/common/global.js\",\"url\":\"blob:file:///03eeb5a2-8be7-4818-be35-1b94462fe3e3\",\"moduleSequenceNumber\":76},{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///aef43294-aaa0-4829-ad3f-fa23ff2c19b0\",\"moduleSequenceNumber\":56},{\"filename\":\"/js/util/budgeter.js\",\"url\":\"blob:file:///a93d77cf-d29b-48ef-b9a2-d9eb586b72fc\",\"moduleSequenceNumber\":17957}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"0370392425338ecd0df4c46f41be36c0e260e172f148c684d4ef38c453868f42\",\"moduleSequenceNumber\":17957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nhome\\n\\nDepth 1: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\n\\nDepth 2: \\nmax-hardware\\nnectar-net\\nzer0\\nCSEC\\n\\nDepth 3: \\nomega-net\\nneo-net\\nsilver-helix\\nphantasy\\n\\nDepth 4: \\ncomptek\\nthe-hub\\nnetlink\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\n\\nDepth 5: \\nrothman-uni\\nzb-institute\\nsummit-uni\\ncatalyst\\nI.I.I.I\\nsyscore\\n\\nDepth 6: \\nmillenium-fitness\\nrho-construction\\nlexo-corp\\naevum-police\\nalpha-ent\\n\\nDepth 7: \\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nglobal-pharm\\n\\nDepth 8: \\ndeltaone\\nomnia\\nunitalife\\n\\nDepth 9: \\ndefcomm\\nicarus\\nuniv-energy\\nsolaris\\nzeus-med\\n\\nDepth 10: \\nzb-def\\ntaiyang-digital\\ninfocomm\\nnova-med\\n\\nDepth 11: \\ntitan-labs\\nmicrodyne\\napplied-energetics\\nrun4theh111z\\n\\nDepth 12: \\nhelios\\nvitalife\\nfulcrumtech\\nstormtech\\n\\nDepth 13: \\nomnitek\\n4sigma\\n.\\nkuai-gong\\n\\nDepth 14: \\npowerhouse-fitness\\nblade\\nclarkinc\\nb-and-a\\nnwo\\n\\nDepth 15: \\nmegacorp\\necorp\\nfulcrumassets\\nThe-Cave\\n\\nDepth 16: \\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"home\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmax-hardware\\nnectar-net\\nzer0\\nCSEC\\nomega-net\\nneo-net\\nsilver-helix\\nphantasy\\ncomptek\\nthe-hub\\nnetlink\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nrothman-uni\\nzb-institute\\nsummit-uni\\ncatalyst\\nI.I.I.I\\nsyscore\\nmillenium-fitness\\nrho-construction\\nlexo-corp\\naevum-police\\nalpha-ent\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nglobal-pharm\\ndeltaone\\nomnia\\nunitalife\\ndefcomm\\nicarus\\nuniv-energy\\nsolaris\\nzeus-med\\nzb-def\\ntaiyang-digital\\ninfocomm\\nnova-med\\ntitan-labs\\nmicrodyne\\napplied-energetics\\nrun4theh111z\\nhelios\\nvitalife\\nfulcrumtech\\nstormtech\\nomnitek\\n4sigma\\n.\\nkuai-gong\\npowerhouse-fitness\\nblade\\nclarkinc\\nb-and-a\\nnwo\\nmegacorp\\necorp\\nfulcrumassets\\nThe-Cave\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/host-info.txt\",\"text\":\"n00dles true 1 5 0 4 1 1750000 Noodle Bar \\nfoodnstuff true 1 5 0 16 1 50000000 FoodNStuff \\nsigma-cosmetics true 5 5 0 16 1 57500000 Sigma Cosmetics \\njoesguns true 10 5 0 16 1 62500000 Joe's Guns \\nhong-fang-tea true 30 5 0 16 1 75000000 HongFang Teahouse \\nharakiri-sushi true 40 5 0 16 1 100000000 HaraKiri Sushi Bar Network \\niron-gym true 100 5 1 32 1 500000000 Iron Gym Network \\ndarkweb true 1 5 5 1 1 0  \\nmax-hardware true 80 5 1 32 1 250000000 Max Hardware Store \\nnectar-net true 20 5 0 16 1 68750000 Nectar Nightclub Network \\nzer0 true 75 5 1 32 1 187500000 ZER0 Nightclub \\nCSEC true 59 5 1 8 1 0 CyberSec \\nomega-net true 194 5 2 32 1 1743017325 Omega Software \\nneo-net true 50 5 1 32 1 125000000 Neo Nightclub Network \\nsilver-helix true 150 5 2 64 1 1125000000 Silver Helix \\nphantasy true 100 5 2 32 1 600000000 Phantasy Club \\ncomptek true 372 5 3 0 1 6172846925 CompuTek \\nthe-hub true 287 5 2 64 1 4492646525 The Hub \\nnetlink true 400 5 3 32 1 6875000000 NetLink Technologies \\njohnson-ortho true 274 5 2 0 1 2105719500 Johnson Orthopedics \\ncrush-fitness true 242 5 2 0 1 1138184350 Crush Fitness \\navmnite-02h true 220 5 2 64 1 0 NiteSec \\nrothman-uni true 400 5 3 32 1 4936202025 Rothman University \\nzb-institute true 758 5 5 128 1 23806178200 ZB Institute of Technology \\nsummit-uni true 434 5 3 32 1 6347321625 Summit University \\ncatalyst true 449 5 3 128 1 8213398450 Catalyst Ventures \\nI.I.I.I true 359 5 3 16 1 0 I.I.I.I \\nsyscore true 599 5 4 0 1 11118895525 SysCore Securities \\nmillenium-fitness true 507 5 3 64 1 6250000000 Millenium Fitness Network \\nrho-construction true 502 5 3 16 1 15790147975 Rho Construction \\nlexo-corp true 688 5 4 32 1 18797241400 LexoCorp \\naevum-police true 419 5 4 16 1 6918848850 Aevum Police Headquarters \\nalpha-ent true 517 5 4 64 1 17299334675 Alpha Enterprises \\nsnap-fitness true 733 5 4 0 1 11250000000 Snap Fitness \\naerocorp true 884 5 5 0 1 29851247050 AeroCorp \\ngalactic-cyber true 859 5 5 0 1 19864168400 Galactic Cybersystems \\nglobal-pharm true 752 5 4 8 1 39217405750 Global Pharmaceuticals \\ndeltaone true 844 5 5 0 1 40314979100 DeltaOne \\nomnia true 891 5 5 32 1 24477966625 Omnia Cybersystems \\nunitalife true 786 5 4 32 1 26879345275 UnitaLife Group \\ndefcomm true 870 5 5 0 1 23158526750 DefComm \\nicarus true 891 5 5 0 1 23242655700 Icarus Microsystems \\nuniv-energy true 858 5 4 16 1 28347460325 Universal Energy \\nsolaris true 760 5 5 32 1 18039484000 Solaris Space Systems \\nzeus-med true 842 5 5 0 1 35422446575 Zeus Medical \\nzb-def true 778 5 4 0 1 23204513350 ZB Defense Industries \\ntaiyang-digital true 855 5 5 0 1 20451775000 Taiyang Digital \\ninfocomm true 909 5 5 0 1 17413227600 InfoComm \\nnova-med true 780 5 4 0 1 30853463250 Nova Medical \\ntitan-labs true 827 5 5 16 1 20761207650 Titan Laboratories \\nmicrodyne true 872 5 5 16 1 14897503250 Microdyne Technologies \\napplied-energetics true 831 5 4 0 1 19127216375 Applied Energetics \\nrun4theh111z true 513 5 4 64 1 0 The Runners \\nhelios true 815 5 5 64 1 18410843025 Helios Labs \\nvitalife true 842 5 5 128 1 18756986675 VitaLife \\nfulcrumtech true 1182 5 5 256 1 38791840325 Fulcrum Technologies \\nstormtech true 911 5 5 0 1 28249763275 Storm Technologies \\nomnitek true 1094 5 5 512 1 448081660400 OmniTek Incorporated \\n4sigma true 1203 5 5 0 1 480107465600 Four Sigma \\n. true 544 5 4 16 1 0 . \\nkuai-gong true 1036 5 5 0 1 696736132225 KuaiGong International \\npowerhouse-fitness true 970 5 5 32 1 22500000000 Powerhouse Fitness \\nblade true 1110 5 5 32 1 465291593175 Blade Industries \\nclarkinc true 1158 5 5 0 1 557506885225 Clarke Incorporated \\nb-and-a true 936 5 5 0 1 409231626150 Bachman & Associates \\nnwo true 1277 5 5 0 1 733082377200 NWO \\nmegacorp true 1342 5 5 0 1 1487671854200 MegaCorp \\necorp true 1303 5 5 0 1 1628450718525 ECorp \\nfulcrumassets true 1431 5 5 0 1 25000000 Fulcrum Technologies \\nThe-Cave true 925 5 5 0 1 0 Helios \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/rooted-hosts.txt\",\"text\":\"homen00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmax-hardware\\nnectar-net\\nzer0\\nCSEC\\nomega-net\\nneo-net\\nsilver-helix\\nphantasy\\ncomptek\\nthe-hub\\nnetlink\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nrothman-uni\\nzb-institute\\nsummit-uni\\ncatalyst\\nI.I.I.I\\nsyscore\\nmillenium-fitness\\nrho-construction\\nlexo-corp\\naevum-police\\nalpha-ent\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nglobal-pharm\\ndeltaone\\nomnia\\nunitalife\\ndefcomm\\nicarus\\nuniv-energy\\nsolaris\\nzeus-med\\nzb-def\\ntaiyang-digital\\ninfocomm\\nnova-med\\ntitan-labs\\nmicrodyne\\napplied-energetics\\nrun4theh111z\\nhelios\\nvitalife\\nfulcrumtech\\nstormtech\\nomnitek\\n4sigma\\n.\\nkuai-gong\\npowerhouse-fitness\\nblade\\nclarkinc\\nb-and-a\\nnwo\\nmegacorp\\necorp\\nfulcrumassets\\nThe-Cave\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/contracts.txt\",\"text\":\"contract-201341.cct sigma-cosmetics\\ncontract-24081-Netburners.cct iron-gym\\ncontract-422066.cct darkweb\\ncontract-590649.cct darkweb\\ncontract-991513.cct darkweb\\ncontract-455374.cct max-hardware\\ncontract-946894-Sector-12.cct max-hardware\\ncontract-758376-TianDiHui.cct nectar-net\\ncontract-13799.cct zer0\\ncontract-852523-CyberSec.cct neo-net\\ncontract-663739.cct phantasy\\ncontract-995022.cct phantasy\\ncontract-314756.cct comptek\\ncontract-171953-CyberSec.cct the-hub\\ncontract-621647.cct the-hub\\ncontract-166667.cct netlink\\ncontract-200611.cct johnson-ortho\\ncontract-655670.cct summit-uni\\ncontract-921984.cct summit-uni\\ncontract-696269.cct galactic-cyber\\ncontract-518031-Netburners.cct deltaone\\ncontract-582950-TianDiHui.cct deltaone\\ncontract-198653.cct omnia\\ncontract-467503.cct unitalife\\ncontract-179882-NiteSec.cct defcomm\\ncontract-87796-Sector-12.cct univ-energy\\ncontract-80278-Netburners.cct zb-def\\ncontract-101810.cct taiyang-digital\\ncontract-667620.cct taiyang-digital\\ncontract-211641-TianDiHui.cct infocomm\\ncontract-997732.cct infocomm\\ncontract-582455-Netburners.cct microdyne\\ncontract-989918.cct applied-energetics\\ncontract-591910-CyberSec.cct run4theh111z\\ncontract-818175.cct stormtech\\ncontract-334228.cct 4sigma\\ncontract-127826.cct kuai-gong\\ncontract-454304.cct b-and-a\\ncontract-247252.cct fulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.2700000000000002,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"96.4.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":65138028741,\"moneyMax\":1628450718525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1303,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-630527.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,34],[9,16],[13,21],[6,8],[4,11]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"65.2.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":59506874168,\"moneyMax\":1487671854200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1342,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-454304.cct\",\"type\":\"Total Ways to Sum\",\"data\":83,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"48.3.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":16369265046,\"moneyMax\":409231626150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":936,\"serverGrowth\":75}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"27.0.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":18611663727,\"moneyMax\":465291593175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1110,\"serverGrowth\":75}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"58.2.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":29323295088,\"moneyMax\":733082377200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1277,\"serverGrowth\":89}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-760807.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":832143988,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"62.7.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":22300275409,\"moneyMax\":557506885225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1158,\"serverGrowth\":57}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"77.2.7.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":17923266416,\"moneyMax\":448081660400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1094,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-334228.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":528143499,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"34.6.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":19204298624,\"moneyMax\":480107465600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1203,\"serverGrowth\":96}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-127826.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":571070596,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"39.2.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":27869445289,\"moneyMax\":696736132225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1036,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"82.6.4.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1551673613,\"moneyMax\":38791840325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1182,\"serverGrowth\":91}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-247252.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0],[0,0,0,1],[0,0,0,0],[0,1,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"52.8.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1431,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-818175.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,14],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"55.6.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1129990531,\"moneyMax\":28249763275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":911,\"serverGrowth\":84}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-179882-NiteSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,3],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"37.0.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":926341070,\"moneyMax\":23158526750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":870,\"serverGrowth\":52}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-997732.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,-2,-3,-2,-10,6,7,8,8,2,-2,-10],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-211641-TianDiHui.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,14],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"70.5.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":696529104,\"moneyMax\":17413227600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":909,\"serverGrowth\":66}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"96.2.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":736433721,\"moneyMax\":18410843025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"47.2.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":750279467,\"moneyMax\":18756986675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":67}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"78.9.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":929706228,\"moneyMax\":23242655700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":891,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-87796-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[163,106,90,107,152,104,2,149,145,144,177,86,156,104,199,34,48,93,5,197,29,4,167,66,146,163,131,122,198,199,135,159,13,196,6,147,99,166,179,115,76],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"75.5.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1133898413,\"moneyMax\":28347460325,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":85}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"79.0.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":830448306,\"moneyMax\":20761207650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":68}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-582455-Netburners.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[0,-2,-1,-8,-5,-3,8,3,2,-6,8,-1,6,9,-7,-2,3,3,-6,0,9,9,5,-3,1,-1,3,6,9,1,2,-1,-4,-4,-4,-7],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"1.5.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":595900130,\"moneyMax\":14897503250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":872,\"serverGrowth\":70}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-101810.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,1],[0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0],[0,1,0,0,0,0,1,1],[0,1,0,0,1,0,0,0],[1,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-667620.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,11],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"85.2.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":818071000,\"moneyMax\":20451775000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":855,\"serverGrowth\":76}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-696269.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[154,62,175,199,54,94,39,26,180,46,74,86,52,199,179,7,121,43,109,188,14,130,83,49,70,151,5,64,148,198,115,88,133,166,175,184,41,50,69,159,42,148,121,7],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"96.1.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":794566736,\"moneyMax\":19864168400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":859,\"serverGrowth\":84}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"86.4.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1194049882,\"moneyMax\":29851247050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":884,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-198653.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[199,199,9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"28.9.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":979118665,\"moneyMax\":24477966625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":891,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-80278-Netburners.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[192,89,52,10]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"63.4.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":928180534,\"moneyMax\":23204513350,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":778,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-989918.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[1,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,1,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"69.7.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":765088655,\"moneyMax\":19127216375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"13.5.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":721579360,\"moneyMax\":18039484000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":760,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-518031-Netburners.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,7,7,-10,-10,-9,-4,-5,-2,4,-3,10,-6,1,8,-7,-7,2,5,-8,-8,-7,10],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-582950-TianDiHui.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")((a()\",\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"47.3.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1612599164,\"moneyMax\":40314979100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":844,\"serverGrowth\":51}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"14.9.4.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1568696230,\"moneyMax\":39217405750,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":752,\"serverGrowth\":84}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"0.2.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1234138530,\"moneyMax\":30853463250,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":780,\"serverGrowth\":72}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"60.6.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1416897863,\"moneyMax\":35422446575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-467503.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,11],[3,13],[3,13],[13,15],[8,14],[23,27],[6,9],[24,29],[2,12],[17,18],[2,6],[23,32],[8,16],[4,8],[1,4],[9,14],[4,5],[16,22]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"64.4.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1075173811,\"moneyMax\":26879345275,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":786,\"serverGrowth\":80}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"0.1.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":751889656,\"moneyMax\":18797241400,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":688,\"serverGrowth\":64}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"65.7.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":631605919,\"moneyMax\":15790147975,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":502,\"serverGrowth\":45}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"44.8.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":691973387,\"moneyMax\":17299334675,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":517,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"96.2.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":276753954,\"moneyMax\":6918848850,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":419,\"serverGrowth\":34}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"88.5.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":197448081,\"moneyMax\":4936202025,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":400,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"41.2.9.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":952247128,\"moneyMax\":23806178200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":758,\"serverGrowth\":80}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-921984.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[83,177,158,128,163,141,98,107,116,48,11,176,156,111,20,34,148,57,145,77,85,6,84],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-655670.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[47,3,32],[24,10,6],[41,27,48]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"64.7.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":253892865,\"moneyMax\":6347321625,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":434,\"serverGrowth\":58}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"29.7.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":444755821,\"moneyMax\":11118895525,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":599,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"2.5.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":328535938,\"moneyMax\":8213398450,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":449,\"serverGrowth\":38}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-171953-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[106,132,172,175],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-621647.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[1,7],[7,10],[13,18],[23,33],[17,21],[10,12],[14,19],[17,22],[2,3]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"46.7.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":179705861,\"moneyMax\":4492646525,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":287,\"serverGrowth\":47}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-314756.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7130478929\",-9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"45.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":246913877,\"moneyMax\":6172846925,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":372,\"serverGrowth\":56}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-166667.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,9,-6,3,-5,3,3,7,-5,1,5,-1,3,-1,7,0,-5,-4,-7,-6,3,10,-5,-6,-10,10,-4,5,4,-9,1,-4,6,-4,-10,10,5,6,-1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"99.0.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":400,\"serverGrowth\":56}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-200611.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()(a((a(a))a()))()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"75.1.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":84228780,\"moneyMax\":2105719500,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":274,\"serverGrowth\":49}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"0.0.7.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.004,\"minDifficulty\":1,\"moneyAvailable\":79800.54824707007,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"79.4.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":9.9415,\"minDifficulty\":3,\"moneyAvailable\":2000377.82571994,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-201341.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":779432926,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"6.9.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"28.0.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-13799.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[5,11,42,43,2,36,32,19]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"82.3.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-758376-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[69,20,26,139,194,88,168,171,91,72,33,61,124,171,77,195,50,99,153,86,107,107,29,33,42,133,137,195,197,22,31,139],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-420424.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[49,42,47,30]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"39.3.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-852523-CyberSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[40],[35],[41],[37],[43],[13],[30],[9],[16],[16]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"71.3.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"95.6.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"17.2.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":81,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"61.2.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-995022.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[47,3,33,47],[49,7,38,5],[34,49,8,12],[2,17,39,6]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-663739.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1724369124\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"15.5.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"netlink\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-455374.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a()a)a\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-946894-Sector-12.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[5,7],[4,9,2],[1,1,7,1],[6,1,5,8,2],[9,3,8,4,4,9],[4,1,8,6,8,1,6],[7,7,4,1,7,8,5,8],[9,6,1,4,7,4,7,5,8]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"90.9.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"56.4.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":69720693,\"moneyMax\":1743017325,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":194,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"57.6.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":45527374,\"moneyMax\":1138184350,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":242,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":4,\"fn\":\"contract-24081-Netburners.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[139,157,189,156,130,32,86,61,93,60,162,172,65,61,191,124,189,106,155,188,78,164,41,24,1],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"24.2.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"63.8.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":507,\"serverGrowth\":40}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"93.1.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":970,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"73.7.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":733,\"serverGrowth\":54}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-591910-CyberSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"6200\",32],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"0.8.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":513,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"82.5.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":359,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"57.8.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":220,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"8.1.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":544,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"4.7.8.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"30.4.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"78.5.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-590649.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,9,8,4,0,2,8,9,0,5,7,7,4,8,7,0,9,0,6,5,6,6],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-422066.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[25,32],[8,11],[25,32],[9,10],[12,19],[6,9],[24,34],[3,11],[3,12],[7,16],[13,20],[19,28]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-991513.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[1,3],[3,4,9],[1,7,5,5],[9,5,5,1,6],[4,9,2,5,7,1],[4,6,3,8,4,8,2],[3,3,9,3,5,7,5,4]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"3.1.0.8\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.3723,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.5366,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":48.2832,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8.0759,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":0.17041131250000002}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":87.5772,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":29923.934226883892}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":85.1159,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":37.6523,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":38832.71390645305}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":52.2258,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":75241.59989373012}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":76.4505,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":40092.737706280444}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":35.5313,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":33778.89136396096}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run NUKE.exe\",\"sq\":\"run /js/stocks/stockQuery.js\",\"debug\":\"run js/util/toggleDebug.js\",\"crawl\":\"run js/crawl.js 20\",\"known-hosts\":\"cat logs/known-hosts.txt\",\"hosts-info\":\"cat logs/host-info.txt\",\"rootHosts\":\"run js/runOnKnownHosts.js js/gainRoot.js 1 false\",\"findBestTarget\":\"run js/util/findBestHackableTarget.js\",\"budget\":\"run js/util/budgeter.js\",\"yolo\":\"budget yolo\",\"stonks\":\"run js/stocks/startBot.js STONKS 0\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":10318.667487510702,\"lastPrice\":10358.161245187199,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":12.687144148815083,\"otlkMagForecast\":36.233247059452374,\"cap\":126047017,\"spreadPerc\":0.1,\"shareTxForMovement\":52098,\"shareTxUntilMovement\":36040,\"totalShares\":96000000,\"maxShares\":19200000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":45192.07578617191,\"lastPrice\":45030.06821995155,\"playerShares\":1952764,\"playerAvgPx\":33073.502537398956,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":true,\"otlkMag\":16.995390468201578,\"otlkMagForecast\":67.36932662346585,\"cap\":32932541,\"spreadPerc\":0.2,\"shareTxForMovement\":88969,\"shareTxUntilMovement\":44500,\"totalShares\":96200000,\"maxShares\":19200000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":14300.996169008517,\"lastPrice\":14218.279038453265,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":10.023190034158533,\"otlkMagForecast\":39.40458338198124,\"cap\":418925578,\"spreadPerc\":0.6,\"shareTxForMovement\":83180,\"shareTxUntilMovement\":67928,\"totalShares\":70600000,\"maxShares\":14100000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":9741.644019349793,\"lastPrice\":9796.826193843748,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":10.691483183088286,\"otlkMagForecast\":39.123076138970745,\"cap\":54273301,\"spreadPerc\":0.1,\"shareTxForMovement\":84704,\"shareTxUntilMovement\":84704,\"totalShares\":68200000,\"maxShares\":13600000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":17378.343040883465,\"lastPrice\":17466.14154897692,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":11.724930035548997,\"otlkMagForecast\":37.926046836134134,\"cap\":54041966,\"spreadPerc\":0.5,\"shareTxForMovement\":88698,\"shareTxUntilMovement\":49596,\"totalShares\":46000000,\"maxShares\":9200000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":28804.380514757384,\"lastPrice\":29038.102324085037,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":false,\"otlkMag\":7.187582559485232,\"otlkMagForecast\":43.704954600577075,\"cap\":922868877,\"spreadPerc\":1,\"shareTxForMovement\":61657,\"shareTxUntilMovement\":61657,\"totalShares\":33100000,\"maxShares\":6600000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":65161.55892673043,\"lastPrice\":65535.658802686776,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":6.36214865874071,\"otlkMagForecast\":56.73927983200897,\"cap\":316405851,\"spreadPerc\":0.6,\"shareTxForMovement\":63622,\"shareTxUntilMovement\":63622,\"totalShares\":83200000,\"maxShares\":16600000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":11305.107780836977,\"lastPrice\":11415.011721134344,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":false,\"otlkMag\":9.257814473323556,\"otlkMagForecast\":40.69680031971385,\"cap\":548838994,\"spreadPerc\":0.5,\"shareTxForMovement\":86451,\"shareTxUntilMovement\":76965,\"totalShares\":56200000,\"maxShares\":11200000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":64102.05323771214,\"lastPrice\":64509.325532699106,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":false,\"otlkMag\":10.36685564123366,\"otlkMagForecast\":39.93559669964475,\"cap\":381067216,\"spreadPerc\":0.2,\"shareTxForMovement\":59705,\"shareTxUntilMovement\":42899,\"totalShares\":50700000,\"maxShares\":10100000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":9139.117460598953,\"lastPrice\":9184.590339538374,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":11.260820878923793,\"otlkMagForecast\":61.23284364778959,\"cap\":46326271,\"spreadPerc\":0.2,\"shareTxForMovement\":58446,\"shareTxUntilMovement\":58446,\"totalShares\":73100000,\"maxShares\":14600000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":33221.16123075701,\"lastPrice\":33381.37144211801,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":10.63771447908521,\"otlkMagForecast\":40.18091615109217,\"cap\":181641177,\"spreadPerc\":0.8,\"shareTxForMovement\":49208,\"shareTxUntilMovement\":49208,\"totalShares\":53200000,\"maxShares\":10600000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":22998.553814920142,\"lastPrice\":22874.234174143316,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":5.480172786021648,\"otlkMagForecast\":55.184352881679914,\"cap\":99013343,\"spreadPerc\":0.3,\"shareTxForMovement\":37259,\"shareTxUntilMovement\":37259,\"totalShares\":84900000,\"maxShares\":17000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":19147.056416492836,\"lastPrice\":19052.25939819521,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":10.559396850605676,\"otlkMagForecast\":41.256117931239054,\"cap\":119743865,\"spreadPerc\":0.7,\"shareTxForMovement\":59821,\"shareTxUntilMovement\":59821,\"totalShares\":42700000,\"maxShares\":8500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":94760.14659853905,\"lastPrice\":95144.59355624775,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":false,\"otlkMag\":11.83318615262635,\"otlkMagForecast\":37.94542091566696,\"cap\":550966601,\"spreadPerc\":0.7,\"shareTxForMovement\":55289,\"shareTxUntilMovement\":55289,\"totalShares\":33100000,\"maxShares\":6600000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":8888.747891798892,\"lastPrice\":8848.109494329014,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":7.498640948380501,\"otlkMagForecast\":43.932284086173006,\"cap\":270080261,\"spreadPerc\":0.4,\"shareTxForMovement\":92012,\"shareTxUntilMovement\":92012,\"totalShares\":56400000,\"maxShares\":11300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":8032.703633295885,\"lastPrice\":7987.4581584063435,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":1.4414527365206329,\"otlkMagForecast\":49.730575957312475,\"cap\":14079905,\"spreadPerc\":0.9,\"shareTxForMovement\":82354,\"shareTxUntilMovement\":82354,\"totalShares\":47200000,\"maxShares\":9400000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":4915.012545450029,\"lastPrice\":4943.982658559121,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":11.761156143002436,\"otlkMagForecast\":38.35933501498674,\"cap\":321094161,\"spreadPerc\":0.9,\"shareTxForMovement\":98437,\"shareTxUntilMovement\":41823,\"totalShares\":41700000,\"maxShares\":8300000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":7619.938702273023,\"lastPrice\":7653.769661072561,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":9.00012747996061,\"otlkMagForecast\":60.35488025141101,\"cap\":175504165,\"spreadPerc\":0.9,\"shareTxForMovement\":47867,\"shareTxUntilMovement\":16145,\"totalShares\":39600000,\"maxShares\":7900000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":19717.87878713436,\"lastPrice\":19826.55325540508,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":6.028866713203182,\"otlkMagForecast\":55.47539767412855,\"cap\":529189446,\"spreadPerc\":1,\"shareTxForMovement\":83402,\"shareTxUntilMovement\":83402,\"totalShares\":24900000,\"maxShares\":5000000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":87235.70333844484,\"lastPrice\":88958.55865673043,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.58,\"b\":true,\"otlkMag\":6.400182115281759,\"otlkMagForecast\":60.70686844944822,\"cap\":137924747,\"spreadPerc\":1,\"shareTxForMovement\":52551,\"shareTxUntilMovement\":52551,\"totalShares\":72700000,\"maxShares\":14500000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":43171.45343868269,\"lastPrice\":43554.798166157874,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.16,\"b\":true,\"otlkMag\":10.435214192717554,\"otlkMagForecast\":61.986565773523395,\"cap\":18011229,\"spreadPerc\":0.5,\"shareTxForMovement\":47307,\"shareTxUntilMovement\":4527,\"totalShares\":42900000,\"maxShares\":8600000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4803.943539795392,\"lastPrice\":4781.9804276259965,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":7.140363260896715,\"otlkMagForecast\":42.3325646699278,\"cap\":41542991,\"spreadPerc\":0.9,\"shareTxForMovement\":97803,\"shareTxUntilMovement\":97803,\"totalShares\":45200000,\"maxShares\":9000000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":94895.02722669211,\"lastPrice\":93619.40895239172,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.78,\"b\":false,\"otlkMag\":5.496737133954564,\"otlkMagForecast\":46.850491528619685,\"cap\":61605097,\"spreadPerc\":1.4,\"shareTxForMovement\":41818,\"shareTxUntilMovement\":41818,\"totalShares\":30300000,\"maxShares\":6100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":8692.160306785885,\"lastPrice\":8584.39269483558,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.64,\"b\":false,\"otlkMag\":7.392980691396236,\"otlkMagForecast\":41.746319828811714,\"cap\":54937518,\"spreadPerc\":1,\"shareTxForMovement\":88076,\"shareTxUntilMovement\":88076,\"totalShares\":30100000,\"maxShares\":6000000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":11152.863825046048,\"lastPrice\":11223.723527914837,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":false,\"otlkMag\":5.263849441347649,\"otlkMagForecast\":45.91912921820986,\"cap\":92332212,\"spreadPerc\":1.2,\"shareTxForMovement\":116968,\"shareTxUntilMovement\":116968,\"totalShares\":33100000,\"maxShares\":6600000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":14.673226350518009,\"lastPrice\":15.050624467922423,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.36,\"b\":true,\"otlkMag\":6.7082687435352675,\"otlkMagForecast\":52.146567703974895,\"cap\":35662018,\"spreadPerc\":1.9,\"shareTxForMovement\":22562,\"shareTxUntilMovement\":22562,\"totalShares\":34100000,\"maxShares\":6800000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1126.0139010368266,\"lastPrice\":1135.495274910326,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":false,\"otlkMag\":5.819952389107193,\"otlkMagForecast\":44.81573205519343,\"cap\":50394481,\"spreadPerc\":0.6,\"shareTxForMovement\":33111,\"shareTxUntilMovement\":33111,\"totalShares\":18700000,\"maxShares\":3700000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2002.8813209786836,\"lastPrice\":1990.8420901788313,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":3.7146871137166046,\"otlkMagForecast\":51.87512413780971,\"cap\":85451980,\"spreadPerc\":0.6,\"shareTxForMovement\":84781,\"shareTxUntilMovement\":84781,\"totalShares\":10500000,\"maxShares\":2100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":7435.259999319358,\"lastPrice\":7336.974400628701,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.75,\"b\":true,\"otlkMag\":6.378916687896726,\"otlkMagForecast\":55.10854813406447,\"cap\":23115537,\"spreadPerc\":0.7,\"shareTxForMovement\":57204,\"shareTxUntilMovement\":57204,\"totalShares\":10400000,\"maxShares\":2100000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":6663.227968752687,\"lastPrice\":6823.896217795117,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.15,\"b\":false,\"otlkMag\":5.729105550054193,\"otlkMagForecast\":46.81471301175923,\"cap\":21201013,\"spreadPerc\":0.6,\"shareTxForMovement\":25554,\"shareTxUntilMovement\":25554,\"totalShares\":40200000,\"maxShares\":8000000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":10053.933862739064,\"lastPrice\":9945.071245529965,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.43,\"b\":false,\"otlkMag\":12.423395213533757,\"otlkMagForecast\":38.74604950545028,\"cap\":6775938,\"spreadPerc\":1.1,\"shareTxForMovement\":32333,\"shareTxUntilMovement\":26054,\"totalShares\":202400000,\"maxShares\":40500000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":11280.292178018584,\"lastPrice\":11220.170329527236,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":7.80102537041367,\"otlkMagForecast\":58.38042842210018,\"cap\":395635886,\"spreadPerc\":0.4,\"shareTxForMovement\":126713,\"shareTxUntilMovement\":126713,\"totalShares\":21900000,\"maxShares\":4400000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":39288.03414754497,\"lastPrice\":39120.33708696943,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":10.118869591120326,\"otlkMagForecast\":59.36924578624292,\"cap\":260551520,\"spreadPerc\":0.2,\"shareTxForMovement\":198098,\"shareTxUntilMovement\":81236,\"totalShares\":19800000,\"maxShares\":4000000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":23,\"lastUpdate\":1642548937387,\"ticksUntilCycle\":3}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":140,\"MaxPortCapacity\":60,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#BA55D3\",\"primary\":\"#9370DB\",\"primarydark\":\"#8A2BE2\",\"successlight\":\"#BA55D3\",\"success\":\"#9370DB\",\"successdark\":\"#8A2BE2\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-2504,\"y\":1007,\"opened\":true}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1642548942131","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642548942141"}}