{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":325,\"hp\":24,\"max_hp\":24,\"strength\":120,\"defense\":146,\"dexterity\":121,\"agility\":134,\"charisma\":162,\"intelligence\":0,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"hacking_exp\":13751256.808839124,\"strength_exp\":21848.66599998147,\"defense_exp\":49424.50600014895,\"dexterity_exp\":22617.8259999806,\"agility_exp\":34092.94600013615,\"charisma_exp\":82425.10199966347,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"money\":12895410904047.803,\"city\":\"Aevum\",\"location\":\"Fulcrum Technologies\",\"jobs\":{\"Watchdog Security\":\"Software Engineering Intern\",\"Noodle Bar\":\"Waiter\",\"ECorp\":\"Software Engineering Intern\",\"Fulcrum Technologies\":\"Software Engineering Intern\"},\"companyName\":\"Fulcrum Technologies\",\"currentServer\":\"home\",\"purchasedServers\":[\"mirage\",\"gremlin\",\"fear\",\"swig\",\"boomer\",\"leper\",\"crave\",\"vexed\",\"poleman\",\"wool\",\"orca\",\"sunburst\",\"chronic-noir\",\"alderman\",\"nugget\",\"treacher\",\"xion\",\"halogenic\",\"blood-rain\",\"gaucho\",\"bleach\",\"yarrow\",\"rector\",\"bellend\",\"horseboi\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":345623.8000086501,\"ram\":64,\"totalMoneyGenerated\":2155147948.4360456,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":342771.80000851327,\"ram\":64,\"totalMoneyGenerated\":2153013850.402378,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":342762.4000085127,\"ram\":64,\"totalMoneyGenerated\":2146296157.5245779,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":340457.00000838033,\"ram\":64,\"totalMoneyGenerated\":2145024757.4483123,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":340370.2000083753,\"ram\":64,\"totalMoneyGenerated\":2144994208.4470022,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":339988.40000835404,\"ram\":64,\"totalMoneyGenerated\":2144981606.3444698,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":339975.8000083533,\"ram\":64,\"totalMoneyGenerated\":2144987600.3998926,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":337652.2000082409,\"ram\":64,\"totalMoneyGenerated\":2144885087.4201028,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":337639.00000824017,\"ram\":64,\"totalMoneyGenerated\":2134166149.378098,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":335901.4000081312,\"ram\":64,\"totalMoneyGenerated\":2134024513.2303178,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":335887.2000081301,\"ram\":64,\"totalMoneyGenerated\":2134015047.1671038,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":329743.800007668,\"ram\":64,\"totalMoneyGenerated\":2133349078.1303594,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":254540.2000047984,\"ram\":64,\"totalMoneyGenerated\":2039022822.7440472,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":254539.8000047984,\"ram\":64,\"totalMoneyGenerated\":2039013838.3572783,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":254539.4000047984,\"ram\":64,\"totalMoneyGenerated\":2038997054.2081776,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":254538.80000479842,\"ram\":64,\"totalMoneyGenerated\":2038995059.9790041,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":210749.6000027382,\"ram\":64,\"totalMoneyGenerated\":1790615698.583354,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":210749.00000273815,\"ram\":64,\"totalMoneyGenerated\":1790618132.6639407,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":210748.60000273812,\"ram\":64,\"totalMoneyGenerated\":1790620316.6089911,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":210748.00000273812,\"ram\":64,\"totalMoneyGenerated\":1790621272.4720654,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":170066.20000051457,\"ram\":64,\"totalMoneyGenerated\":1559556377.642045,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":170065.60000051453,\"ram\":64,\"totalMoneyGenerated\":1559553359.3053906,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":170065.00000051456,\"ram\":64,\"totalMoneyGenerated\":1559548484.6694872,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":170064.20000051457,\"ram\":64,\"totalMoneyGenerated\":1559543932.07099,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.5,\"onlineTimeSeconds\":48690.59999980171,\"ram\":1,\"totalMoneyGenerated\":73035.90000037909,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.5,\"onlineTimeSeconds\":48689.99999980172,\"ram\":1,\"totalMoneyGenerated\":73035.00000037909,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.5,\"onlineTimeSeconds\":48689.39999980173,\"ram\":1,\"totalMoneyGenerated\":73034.10000037908,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":1,\"moneyGainRatePerSecond\":5.25,\"onlineTimeSeconds\":48688.79999980174,\"ram\":1,\"totalMoneyGenerated\":255562.1999986593,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.5,\"onlineTimeSeconds\":48688.39999980175,\"ram\":1,\"totalMoneyGenerated\":73032.6000003791,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.5,\"onlineTimeSeconds\":48688.199999801756,\"ram\":1,\"totalMoneyGenerated\":73032.3000003791,\"name\":\"hacknet-node-29\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"Netburners\",\"CyberSec\",\"Tian Di Hui\",\"Aevum\",\"NiteSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"}],\"augmentations\":[],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1,\"crime_success_mult\":1,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"NiteSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.15,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.33666666666666667,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":289.5000000000018,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":649.7666666666677,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":386000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1642456044060,\"totalPlaytime\":346263400,\"playtimeSinceLastAug\":346263400,\"playtimeSinceLastBitnode\":346263400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-400000000,\"class\":-64726040,\"codingcontract\":750000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":27288507166.19,\"hacknet\":47272213068.470116,\"hacknet_expenses\":-132016173503.8733,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":30427328652297.992,\"total\":12895410903047.803,\"work\":1448765.5,\"servers\":-8278747916493.835,\"other\":-5312000000,\"augmentations\":-9190689101573.95}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-400000000,\"class\":-64726040,\"codingcontract\":750000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":27288507166.19,\"hacknet\":47272213068.470116,\"hacknet_expenses\":-132016173503.8733,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":30427328652297.992,\"total\":12895410903047.803,\"work\":1448765.5,\"servers\":-8278747916493.835,\"other\":-5312000000,\"augmentations\":-9190689101573.95}},\"scriptProdSinceLastAug\":24695082501132.414,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642110450530},{\"ID\":\"NS2\",\"unlockedOn\":1642111950521},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642115796686},{\"ID\":\"TOR\",\"unlockedOn\":1642118076679},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642120036185},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642126767776},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642148465933},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642166619871},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642197369785},{\"ID\":\"4S\",\"unlockedOn\":1642240378617},{\"ID\":\"NITESEC\",\"unlockedOn\":1642251602407},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642254542403},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642254542406},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642254542408},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642265342623},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642275543354},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1642277297080},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642285996978},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642310712278},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642407414975},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642447864073}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":5,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"17.2.3.4\",\"isConnectedTo\":true,\"maxRam\":131072,\"messages\":[\"hackers-starting-handbook.lit\",\"sector-12-crime.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"democracy-is-dead.lit\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"Formulas.exe\"],\"ramUsed\":48339.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11924,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1337.9469209326974,\"offlineMoneyMade\":0,\"offlineRunningTime\":15590.49,\"onlineExpGained\":13230.525000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143562.8099994771,\"pid\":1,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[32300710,10948,667,686]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4271.812557703624,\"offlineMoneyMade\":0,\"offlineRunningTime\":15590.559,\"onlineExpGained\":40764.90000000196,\"onlineMoneyMade\":32300710,\"onlineRunningTime\":143562.8099994771,\"pid\":2,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[30567761,2141,3665,481]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3746.9010333873703,\"offlineMoneyMade\":0,\"offlineRunningTime\":15590.626999999999,\"onlineExpGained\":37855.5,\"onlineMoneyMade\":30567761,\"onlineRunningTime\":143562.8099994771,\"pid\":3,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[40595824,2229,3399,388]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3609.231014819058,\"offlineMoneyMade\":0,\"offlineRunningTime\":15590.678,\"onlineExpGained\":36262.5,\"onlineMoneyMade\":40595824,\"onlineRunningTime\":143562.8099994771,\"pid\":4,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[22225264,1849,2897,309]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3799.3699852756204,\"offlineMoneyMade\":0,\"offlineRunningTime\":15590.726999999999,\"onlineExpGained\":38190,\"onlineMoneyMade\":22225264,\"onlineRunningTime\":143562.8099994771,\"pid\":5,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[16885607,583,2220,212]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2122.8750404693715,\"offlineMoneyMade\":0,\"offlineRunningTime\":15590.779,\"onlineExpGained\":22738.125,\"onlineMoneyMade\":16885607,\"onlineRunningTime\":143562.8099994771,\"pid\":6,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[18399045,512,1921,184]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1876.6473931195153,\"offlineMoneyMade\":0,\"offlineRunningTime\":15590.835,\"onlineExpGained\":19762.5,\"onlineMoneyMade\":18399045,\"onlineRunningTime\":143562.8099994771,\"pid\":7,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[21137289,132,630,86]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1007.7053547235327,\"offlineMoneyMade\":0,\"offlineRunningTime\":15590.875,\"onlineExpGained\":10341,\"onlineMoneyMade\":21137289,\"onlineRunningTime\":143562.8099994771,\"pid\":8,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[17017315,237,930,122]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1308.823298098642,\"offlineMoneyMade\":0,\"offlineRunningTime\":15590.914,\"onlineExpGained\":13694.625,\"onlineMoneyMade\":17017315,\"onlineRunningTime\":143562.8099994771,\"pid\":9,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[23644434,1128,2158,216]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3216.3968082825854,\"offlineMoneyMade\":0,\"offlineRunningTime\":15590.976,\"onlineExpGained\":31855.5,\"onlineMoneyMade\":23644434,\"onlineRunningTime\":143562.8099994771,\"pid\":10,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[52345991,601,1113,132]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1403.7552218106423,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.059,\"onlineExpGained\":14122.5,\"onlineMoneyMade\":52345991,\"onlineRunningTime\":143562.8099994771,\"pid\":11,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[22097872,662,1183,113]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2075.5564478588426,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.11,\"onlineExpGained\":20926.5,\"onlineMoneyMade\":22097872,\"onlineRunningTime\":143562.8099994771,\"pid\":12,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[68198628,219,284,52]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":687.7916847949215,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.14,\"onlineExpGained\":6780.149999999953,\"onlineMoneyMade\":68198628,\"onlineRunningTime\":143562.8099994771,\"pid\":13,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[52516485,258,802,91]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1010.3141719832495,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.212000000001,\"onlineExpGained\":10536.75,\"onlineMoneyMade\":52516485,\"onlineRunningTime\":143562.8099994771,\"pid\":14,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[44823658,187,397,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":796.8264664361576,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.248,\"onlineExpGained\":7935,\"onlineMoneyMade\":44823658,\"onlineRunningTime\":143562.8099994771,\"pid\":15,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[26555639,180,85,23]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":597.5610171513703,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.284,\"onlineExpGained\":5808.600000000008,\"onlineMoneyMade\":26555639,\"onlineRunningTime\":143562.8099994771,\"pid\":16,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[19572911,120,174,35]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":553.9203064883714,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.329,\"onlineExpGained\":5398.574999999981,\"onlineMoneyMade\":19572911,\"onlineRunningTime\":143562.8099994771,\"pid\":17,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///7ce91d6e-244c-40c8-b9a8-532ca3ea3437\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"STONKS\",10000000000000,0.56],\"dataMap\":{},\"filename\":\"/js/stocks/startBot.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":20467576624327.156,\"onlineRunningTime\":25900.41000005922,\"pid\":201,\"ramUsage\":31.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///0fdbd3ac-f912-44b9-93f6-85847f59a3da\"},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/stocks/position.js\",\"url\":\"blob:file:///f0f66ee2-224a-482d-b18f-6ff325d6d3a5\"},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/stocks/stock.js\",\"url\":\"blob:file:///a00678d5-efb3-4ac6-9240-2331337a118b\"},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/stocks/tradeBot.js\",\"url\":\"blob:file:///0ea148a4-08d0-4e79-a539-d9cbf6db5876\"},{\"filename\":\"/js/stocks/startBot.js\",\"url\":\"blob:file:///54061581-37d5-4cac-be58-d084dbe280db\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5133,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25141.210000056453,\"pid\":1120,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[16440543,5988,630,693]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24212.92500000071,\"onlineMoneyMade\":16440543,\"onlineRunningTime\":25141.210000056453,\"pid\":1121,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[37816923,1701,2010,642]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26235,\"onlineMoneyMade\":37816923,\"onlineRunningTime\":25141.210000056453,\"pid\":1122,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[47293335,1932,2007,411]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26217,\"onlineMoneyMade\":47293335,\"onlineRunningTime\":25141.210000056453,\"pid\":1123,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[22908924,1599,1782,285]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27720,\"onlineMoneyMade\":22908924,\"onlineRunningTime\":25141.210000056453,\"pid\":1124,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[28870143,1143,1218,213]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19456.875,\"onlineMoneyMade\":28870143,\"onlineRunningTime\":25141.210000056453,\"pid\":1125,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[33056175,984,1086,138]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16796.25,\"onlineMoneyMade\":33056175,\"onlineRunningTime\":25141.210000056453,\"pid\":1126,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[27505941,186,318,117]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7650,\"onlineMoneyMade\":27505941,\"onlineRunningTime\":25141.210000056453,\"pid\":1127,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[23761326,363,462,159]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10607.625,\"onlineMoneyMade\":23761326,\"onlineRunningTime\":25141.210000056453,\"pid\":1154,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[31774626,1194,1302,189]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24435,\"onlineMoneyMade\":31774626,\"onlineRunningTime\":25141.210000056453,\"pid\":1155,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[47817705,543,651,156]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10366.875,\"onlineMoneyMade\":47817705,\"onlineRunningTime\":25141.210000056453,\"pid\":1156,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[26872380,600,720,120]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15387.75,\"onlineMoneyMade\":26872380,\"onlineRunningTime\":25141.210000056453,\"pid\":1158,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[36140079,114,159,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4206.599999999993,\"onlineMoneyMade\":36140079,\"onlineRunningTime\":25141.210000056453,\"pid\":1159,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[62940807,348,438,108]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8275.5,\"onlineMoneyMade\":62940807,\"onlineRunningTime\":25141.210000056453,\"pid\":1160,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[32370984,129,234,66]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5400,\"onlineMoneyMade\":32370984,\"onlineRunningTime\":25141.210000056453,\"pid\":1161,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[18929943,99,60,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3628.800000000002,\"onlineMoneyMade\":18929943,\"onlineRunningTime\":25141.210000056453,\"pid\":1163,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[14383467,81,105,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3605.174999999997,\"onlineMoneyMade\":14383467,\"onlineRunningTime\":25141.210000056453,\"pid\":1164,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4716,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8367.975000000151,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":5144,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[15751137,5652,588,627]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22747.725000000504,\"onlineMoneyMade\":15751137,\"onlineRunningTime\":23400.610000050125,\"pid\":5145,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2343,639]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17892,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":5146,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2421,414]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17010,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":5147,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[11249169,1176,1767,258]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24238.125,\"onlineMoneyMade\":11249169,\"onlineRunningTime\":23400.610000050125,\"pid\":5148,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[19799691,834,1185,207]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16908.75,\"onlineMoneyMade\":19799691,\"onlineRunningTime\":23400.610000050125,\"pid\":5149,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[30561456,915,1020,129]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15676.875,\"onlineMoneyMade\":30561456,\"onlineRunningTime\":23400.610000050125,\"pid\":5150,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[13052925,84,339,105]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6408,\"onlineMoneyMade\":13052925,\"onlineRunningTime\":23400.610000050125,\"pid\":5151,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[22406802,339,432,150]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9898.875,\"onlineMoneyMade\":22406802,\"onlineRunningTime\":23400.610000050125,\"pid\":5178,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[28688658,1077,1221,180]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22572,\"onlineMoneyMade\":28688658,\"onlineRunningTime\":23400.610000050125,\"pid\":5179,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[44531334,504,612,153]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9691.875,\"onlineMoneyMade\":44531334,\"onlineRunningTime\":23400.610000050125,\"pid\":5180,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[25053951,561,678,102]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14356.125,\"onlineMoneyMade\":25053951,\"onlineRunningTime\":23400.610000050125,\"pid\":5182,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[36366258,117,153,66]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4027.049999999993,\"onlineMoneyMade\":36366258,\"onlineRunningTime\":23400.610000050125,\"pid\":5183,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[57856740,318,411,102]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7674.75,\"onlineMoneyMade\":57856740,\"onlineRunningTime\":23400.610000050125,\"pid\":5184,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[33332892,132,213,60]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5112,\"onlineMoneyMade\":33332892,\"onlineRunningTime\":23400.610000050125,\"pid\":5185,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[20090001,105,48,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3528.000000000002,\"onlineMoneyMade\":20090001,\"onlineRunningTime\":23400.610000050125,\"pid\":5187,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[14712216,81,96,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3417.7499999999964,\"onlineMoneyMade\":14712216,\"onlineRunningTime\":23400.610000050125,\"pid\":5188,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1782,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9605.809999999881,\"pid\":8406,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6340068,2265,243,285]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9256.49999999984,\"onlineMoneyMade\":6340068,\"onlineRunningTime\":9605.809999999881,\"pid\":8407,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[13626501,621,729,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9954,\"onlineMoneyMade\":13626501,\"onlineRunningTime\":9605.809999999881,\"pid\":8408,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[12389637,546,807,192]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9301.5,\"onlineMoneyMade\":12389637,\"onlineRunningTime\":9605.809999999881,\"pid\":8409,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[5399844,351,753,141]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9371.25,\"onlineMoneyMade\":5399844,\"onlineRunningTime\":9605.809999999881,\"pid\":8410,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[10907070,345,471,108]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7008.75,\"onlineMoneyMade\":10907070,\"onlineRunningTime\":9605.809999999881,\"pid\":8411,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[9458808,225,477,60]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5771.25,\"onlineMoneyMade\":9458808,\"onlineRunningTime\":9605.809999999881,\"pid\":8412,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[10514145,69,132,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2952,\"onlineMoneyMade\":10514145,\"onlineRunningTime\":9605.809999999881,\"pid\":8413,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[9888057,147,174,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4158,\"onlineMoneyMade\":9888057,\"onlineRunningTime\":9605.809999999881,\"pid\":8415,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[11366886,399,489,102]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9045,\"onlineMoneyMade\":11366886,\"onlineRunningTime\":9605.809999999881,\"pid\":8416,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[18248202,201,264,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3999.375,\"onlineMoneyMade\":18248202,\"onlineRunningTime\":9605.809999999881,\"pid\":8417,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[9947238,204,279,57]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5740.875,\"onlineMoneyMade\":9947238,\"onlineRunningTime\":9605.809999999881,\"pid\":8419,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[15499197,48,57,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1658.700000000001,\"onlineMoneyMade\":15499197,\"onlineRunningTime\":9605.809999999881,\"pid\":8420,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,213,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2376,\"onlineMoneyMade\":0,\"onlineRunningTime\":9605.809999999881,\"pid\":8421,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[15513414,60,93,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2178,\"onlineMoneyMade\":15513414,\"onlineRunningTime\":9605.809999999881,\"pid\":8422,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[7233630,36,24,12]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1360.8,\"onlineMoneyMade\":7233630,\"onlineRunningTime\":9605.809999999881,\"pid\":8424,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[5217036,27,42,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1356.0749999999996,\"onlineMoneyMade\":5217036,\"onlineRunningTime\":9605.809999999881,\"pid\":8425,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///5f95dfab-25aa-4f5b-acc7-3554f07e7d6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[5921159925,10000,10000,30000]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1020000,\"onlineMoneyMade\":5921159925,\"onlineRunningTime\":6217.4099999965365,\"pid\":10591,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":10000,\"dependencies\":[{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///0fdbd3ac-f912-44b9-93f6-85847f59a3da\"},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///f5c9365a-7e29-481b-979d-e71168dd6c08\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///48451f17-122c-4f4a-8e32-54740f35ecc9\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nimport { Argument } from \\\"js/common/argument\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[1] is invalid. Expected a string, but got %s\\\", argument);\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = argument;\\n        // arg[1] - Threads\\n        // Default to 1 if no argument is passed in\\n        if (ns.args.length > 1) {\\n            [isArgumentValid, argument] = Argument.validateNumber(ns.args[1]);\\n            if (!isArgumentValid || argument < 0) {\\n                ns.tprintf(\\\"Error: arg[1] is invalid. Expected a number above 0, but got %s\\\", typeof (argument));\\n                ns.exit();\\n            }\\n        }\\n        else {\\n            argument = 1;\\n        }\\n        const THREADS = argument;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///4b07197b-e9c9-4e96-a63f-8ef37019636b\"},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///f5c9365a-7e29-481b-979d-e71168dd6c08\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cbb06d15-f5ec-4e6a-a1f2-1616885eeec2\"}],\"ramUsage\":4.75,\"server\":\"home\",\"_hash\":\"592ce9f18b58d1c9e3c7ca9ec4c9f20184a6f7968c8ad271bbf397d3dce9b42c\",\"moduleSequenceNumber\":103542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // Blatantly remove all .js scripts from a machine\\n    // Made under the premise that files are stored remotely, e.g. I am using a remote text editor and have a repo\\n    // Hopefully useful for cleaning out scripts when you remove, rename, or move them\\n    async function deleteAllScripts() {\\n        const HOST_SERVER = ns.getHostname();\\n        const SCRIPT_EXTENSION = \\\".js\\\";\\n        let files = ns.ls(HOST_SERVER, SCRIPT_EXTENSION);\\n        for (let file of files) {\\n            ns.rm(file, HOST_SERVER);\\n        }\\n        ns.sprintf(\\\"Deleted %1$s files from system.\\\", files.length);\\n    }\\n    // Run the function or it's useless\\n    await deleteAllScripts();\\n}\",\"filename\":\"/js/util/deleteAllScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/util/deleteAllScripts.js\",\"url\":\"blob:file:///9fcc2ab6-2368-438d-bd35-d27cba873bf2\"}],\"ramUsage\":2.85,\"server\":\"home\",\"_hash\":\"08d08c375184af031ac75758634ccdc2f93d96d6ce3f5e9dd55af910aecac7f6\",\"moduleSequenceNumber\":49741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\",\"filename\":\"/js/common/constants/stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"5ecf2f4d83e6260dabd6ec48e76d8ddebccf956563f34072221bf960d3b8c255\",\"moduleSequenceNumber\":232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":49699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"home\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":66144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\n// Once again I am dumb. You can't even copy programs to servers.\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    ns.tail();\\n    // Function must be async\\n    // Get purchased servers and copy all available scripts to them\\n    async function copyProgramsToServers() {\\n        const HOST_SERVER = ns.getHostname();\\n        let purchasedServers;\\n        let filesToCopy = [];\\n        let failedCopies = [];\\n        /*\\n        // For checking avialble programs on the system\\n        let hasNuke             : boolean;\\n        let hasAutoLink         : boolean;\\n        let hasDeepScanV1       : boolean;\\n        let hasServerProfiler   : boolean;\\n        let hasBruteSSH         : boolean;\\n        let hasFTPCrack         : boolean;\\n        */\\n        function initialize() {\\n            // Check which programs are available on this computer\\n            /*\\n            hasNuke \\t        = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink         = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasDeepScanV1       = ns.fileExists(PROGRAMS.DEEPSCAN_V1, HOST_SERVER);\\n            hasServerProfiler   = ns.fileExists(PROGRAMS.SERVER_PROFILER, HOST_SERVER);\\n            hasBruteSSH         = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack         = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            */\\n            purchasedServers = ns.getPurchasedServers();\\n            for (let program of PROGRAMS.all()) {\\n                ns.tprint(program);\\n                ns.tprint(HOST_SERVER);\\n                ns.tprint(ns.fileExists(program, HOST_SERVER));\\n                if (ns.fileExists(program, HOST_SERVER)) {\\n                    filesToCopy.push(program);\\n                }\\n            }\\n            ns.tprint(\\\"Files ready to copy: \\\" + filesToCopy);\\n        }\\n        async function copyFiles() {\\n            for (let server in purchasedServers) {\\n                let fileCopied = await ns.scp(filesToCopy, HOST_SERVER, server);\\n                if (!fileCopied) {\\n                    failedCopies.push(server);\\n                }\\n            }\\n            ns.tprint(\\\"Finished copying. \\\" + failedCopies.length + \\\" Failures. Failed servers: \\\" + failedCopies);\\n        }\\n        initialize();\\n        await copyFiles();\\n    }\\n    // Run the function or it's useless\\n    await copyProgramsToServers();\\n}\",\"filename\":\"/js/util/copyProgramsToServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.6,\"server\":\"home\",\"_hash\":\"04f453fa269e9f227e89f0f733aeded27fa694cddebfe748855db84480a2522b\",\"moduleSequenceNumber\":49737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nimport { Position } from \\\"js/stocks/position\\\";\\nexport class Stock {\\n    constructor(netscape, stockSymbol) {\\n        this.ns = netscape;\\n        this.TIX = this.ns.stock;\\n        let allSymbols = this.TIX.getSymbols();\\n        if (!allSymbols.includes(stockSymbol)) {\\n            this.ns.tprintf(\\\"Error: Stock symbol %s not found.\\\", stockSymbol);\\n            this.ns.exit();\\n        }\\n        this.symbol = stockSymbol;\\n        this.maxShares = this.TIX.getMaxShares(this.symbol);\\n        this.update();\\n    }\\n    update() {\\n        this.price = this.TIX.getPrice(this.symbol);\\n        this.askPrice = this.TIX.getAskPrice(this.symbol);\\n        this.bidPrice = this.TIX.getBidPrice(this.symbol);\\n        this.forecast = this.TIX.getForecast(this.symbol);\\n        this.volatility = this.TIX.getVolatility(this.symbol);\\n        // Figure out the position we should take from the forecast\\n        // Also calculate a raw magnitude for the forecast, so we can compare\\n        // the potential of long and short positions.\\n        if (this.forecast > .5) {\\n            this.forecastType = CONSTANTS.STOCKS.LONG_POSITION;\\n            this.forecastMagnitude = this.forecast;\\n        }\\n        else {\\n            this.forecastType = CONSTANTS.STOCKS.SHORT_POSITION;\\n            this.forecastMagnitude = 1 - this.forecast;\\n        }\\n        this.positionData = this.TIX.getPosition(this.symbol);\\n        [this.hasPosition, this.position]\\n            = Position.getPositionFromData(this.ns, this.positionData);\\n        this.availableShares = this.maxShares - this.position.shares;\\n        this.marketCap = this.price * this.maxShares;\\n    }\\n    // A method for buying stocks at market price\\n    // Arguments:\\n    // Shares - The number of shares to buy\\n    // Budget - An optional number denoting the amount of budget available for the purchase\\n    buy(shares, budget) {\\n        return this.marketOrder(CONSTANTS.STOCKS.LONG_POSITION, shares, budget);\\n    }\\n    sell(shares) {\\n        return this.marketSell(CONSTANTS.STOCKS.SHORT_POSITION, shares);\\n    }\\n    short(shares, budget) {\\n        return this.marketOrder(CONSTANTS.STOCKS.SHORT_POSITION, shares, budget);\\n    }\\n    shortSell(shares) {\\n        return this.marketSell(CONSTANTS.STOCKS.SHORT_POSITION, shares);\\n    }\\n    placeOrder() {\\n    }\\n    // Method for buying and shorting at market price\\n    // Arguments\\n    // positionType - long or short\\n    // shares - The number of shares to buy\\n    // budget? - Optional budget information to check to make sure the sale doesn't go over budget. Maybe shouldn't be part of this method.\\n    // Method returns [orderSuccess: boolean, orderCost: number]\\n    // orderSuccess will be false if the order fails for any reason\\n    // orderCost will be 0 if the order fails\\n    marketOrder(positionType, shares, budget) {\\n        // If the shares number isn't valid, exit\\n        if (!this.isValidShares(shares)) {\\n            this.ns.print(this.ns.vsprintf(\\\"Error: Invalid number of shares to buy. Got %s\\\", [shares]));\\n            return [false, 0];\\n        }\\n        // Make sure we have the latest stock data\\n        this.update();\\n        let purchaseCost = this.price * shares;\\n        // If we are trying to buy more than we have budgeted, stop.\\n        if (budget && purchaseCost > (budget - CONSTANTS.STOCKS.COMMISSION_FEE)) {\\n            return [false, 0];\\n        }\\n        // Make sure the position we are in matches the type of order we are trying to place\\n        if (this.position.type != positionType && this.position.type != CONSTANTS.STOCKS.NO_POSITION) {\\n            this.ns.print(this.ns.sprintf(\\\"Error: Trying to take %1$s position, but currently in %2$s position\\\", positionType, this.position.type));\\n            return [false, 0];\\n        }\\n        if (positionType == CONSTANTS.STOCKS.LONG_POSITION) {\\n            this.TIX.buy(this.symbol, shares);\\n            return [true, purchaseCost];\\n        }\\n        else if (positionType == CONSTANTS.STOCKS.SHORT_POSITION) {\\n            this.TIX.short(this.symbol, shares);\\n            return [true, purchaseCost];\\n        }\\n        else {\\n            this.ns.print(this.ns.sprintf(\\\"Error: Invalid position. How did that happen?!\\\"));\\n            return [false, 0];\\n        }\\n    }\\n    marketSell(positionType, shares) {\\n        // If the shares number isn't valid, exit\\n        if (!this.isValidShares(shares)) {\\n            this.ns.vsprintf(\\\"Error: Invalid number of shares to buy. Got %s\\\", [shares]);\\n            return [false, 0];\\n        }\\n        // Make sure we have the latest stock data\\n        this.update();\\n        let sellPrice = this.price * shares;\\n        // Make sure the position we are in matches the type of order we are trying to place\\n        // Unlike buying, we need to be in a position to sell\\n        if (this.position.type != positionType) {\\n            this.ns.print(this.ns.sprintf(\\\"Error: Trying to sell in %1$s position, but currently in %2$s position\\\", positionType, this.position.type));\\n            return [false, 0];\\n        }\\n        if (positionType == CONSTANTS.STOCKS.LONG_POSITION) {\\n            this.TIX.sell(this.symbol, shares);\\n            return [true, sellPrice];\\n        }\\n        else if (positionType == CONSTANTS.STOCKS.SHORT_POSITION) {\\n            this.TIX.sellShort(this.symbol, shares);\\n            return [true, sellPrice];\\n        }\\n        else {\\n            this.ns.print(this.ns.sprintf(\\\"Error: Invalid position. How did that happen?!\\\"));\\n            return [false, 0];\\n        }\\n    }\\n    isValidOrdidType(orderType) {\\n        if (CONSTANTS.ORDER_TYPES.includes(orderType)) {\\n            return true;\\n        }\\n        else {\\n            this.ns.print(this.ns.vsprintf(\\\"Error: Order type not found. Expected limit | stop, got %s\\\", [orderType]));\\n            return false;\\n        }\\n    }\\n    isValidShares(shares) {\\n        if (shares > 0) {\\n            return true;\\n        }\\n        else {\\n            this.ns.print(this.ns.vsprintf(\\\"Error: Shares must be a postive number got %s\\\", [shares]));\\n            return false;\\n        }\\n    }\\n}\",\"filename\":\"/js/stocks/stock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":28.6,\"server\":\"home\",\"_hash\":\"f9ac904048489c16112c78a899afb95cdead052d79503f8b22ccb2f7daba58aa\",\"moduleSequenceNumber\":60752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Stock } from \\\"js/stocks/stock\\\";\\nexport async function main(ns) {\\n    async function stockQuery() {\\n        // Create some strings needed to format currency using ns.nFormat()\\n        // See http://numeraljs.com/\\n        const FORMAT_CURRENCY = \\\"($ 0,0[.]00)\\\";\\n        const FORMAT_PERCENTAGE = \\\"0 %\\\";\\n        const FORMAT_NUMBER = \\\"0,0.0000\\\";\\n        // I use EMPTY_STRING because it is easier for me to visually grep and semantically understand\\n        const EMPTY_STRING = \\\"\\\";\\n        // Create a constant for the TIX API, which we can get access to through ns.stock.\\n        // We could check if we have API access, but I think that persists through Augmentations, so I won't bother.\\n        const TIX = ns.stock;\\n        // Check to see if we have access to the necessary APIS\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = EMPTY_STRING;\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. arg[0] should be the stock symbol to query. Got: \\\" + ns.args[0]);\\n            ns.exit();\\n        }\\n        // I'm really sorry about this.\\n        // Declare a constant, setting it to arg0 if it isn't empty.\\n        // Then check if STOCK_SYMBOL is empty and exit if it is.\\n        const STOCK_SYMBOL = (arg0 != EMPTY_STRING) ? arg0 : EMPTY_STRING;\\n        if (STOCK_SYMBOL == EMPTY_STRING) {\\n            ns.tprint(\\\"Error: args[0] is missing. args[0] should be the stock symbol to query.\\\");\\n            ns.exit();\\n        }\\n        let stock = new Stock(ns, STOCK_SYMBOL);\\n        // Spawn some functions to format numbers so we can use them in an array map\\n        let formatCurrency = (number) => formatNumbers(number, FORMAT_CURRENCY);\\n        let formatPercentage = (number) => formatNumbers(number, FORMAT_PERCENTAGE);\\n        let formatNumber = (number) => formatNumbers(number, FORMAT_NUMBER);\\n        // Format the currency, percentages, and other numbers\\n        let currencyData = [stock.price, stock.askPrice, stock.bidPrice, stock.marketCap, stock.position.price].map(formatCurrency);\\n        let percentageData = [stock.forecast, stock.volatility, stock.forecastMagnitude].map(formatPercentage);\\n        let numberData = [stock.maxShares, stock.position.shares].map(formatNumber);\\n        // Prepare a formatted string to print to the terminal.\\n        let outputData = ns.sprintf(`\\r\\n            Price:      %1$s\\r\\n            Ask Price: \\t%2$s\\r\\n            Bid Price:\\t%3$s\\r\\n    \\r\\n            Volatility:\\t%7$s\\r\\n\\r\\n            Forecast:\\t%6$s\\r\\n            Magnitude:  %8$s\\r\\n\\r\\n            Position:   %11$s\\r\\n            Shares:     %10$s\\r\\n            Price:      %5$s\\r\\n    \\r\\n            Max Shares:\\t%9$s\\r\\n            Market Cap: %4$s\\r\\n        `, ...currencyData, ...percentageData, ...numberData, stock.position.type);\\n        ns.tprint(outputData);\\n        // This function serves as a factory for formatting different numbers in a string format\\n        // based on a string format. See http://numeraljs.com/\\n        function formatNumbers(number, format) {\\n            return ns.nFormat(number, format);\\n        }\\n    }\\n    await stockQuery();\\n}\",\"filename\":\"/js/stocks/stockQuery.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///3c13809b-212c-4d5e-82ab-57ecbefae902\"},{\"filename\":\"/js/stocks/position.js\",\"url\":\"blob:file:///60a06d15-6eb1-4b6a-b36b-949b9c10e161\"},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///b571cda2-c358-4c79-87ba-a82a00926ca9\"},{\"filename\":\"/js/stocks/stock.js\",\"url\":\"blob:file:///6896e6cb-c284-4a74-8259-40cbba0f90ed\"},{\"filename\":\"/js/stocks/stockQuery.js\",\"url\":\"blob:file:///217eb95e-935a-4b32-9c48-ceac5b65c9f5\"}],\"ramUsage\":28.6,\"server\":\"home\",\"_hash\":\"164dd945b1bd4f393bb540c21e6b0514e89019636db2f78144fa3f172d62020c\",\"moduleSequenceNumber\":49727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\\nCONSTANTS.HOME_SERVER = \\\"home\\\";\\nCONSTANTS.DIRECTORIES = {\\n    CRAWL_LOGS: '/logs',\\n};\\nCONSTANTS.TEXT_FILES = {\\n    KNOWN_HOSTS: '/known-hosts.txt',\\n    CRAWL_REPORT: '/crawl-report.txt',\\n    HOST_INFO: '/host-info.txt',\\n    ROOTED_HOSTS: '/rooted-hosts.txt',\\n    CRAWLED_CONTRACTS: '/crawled-contracts.txt'\\n};\\nCONSTANTS.FILE_EXTENSIONS = {\\n    NS1: '.script',\\n    NS2: '.js',\\n    TEXT: '.txt',\\n    MESSAGE: '.msg',\\n    CODING_CONTRACT: '.cct'\\n};\\nCONSTANTS.STOCKS = {\\n    MARKET_ORDER: 'market',\\n    LIMIT_ORDER: 'limit',\\n    STOP_ORDER: 'stop',\\n    LONG_POSITION: 'long',\\n    SHORT_POSITION: 'short',\\n    NO_POSITION: 'none',\\n    COMMISSION_FEE: 1000000,\\n    UPDATE_TICK_DURATION: 6000,\\n};\\nCONSTANTS.ORDER_TYPES = [CONSTANTS.STOCKS.LIMIT_ORDER, CONSTANTS.STOCKS.STOP_ORDER];\\nCONSTANTS.POSITIONS = [CONSTANTS.STOCKS.LONG_POSITION, CONSTANTS.STOCKS.SHORT_POSITION,\\n    CONSTANTS.STOCKS.NO_POSITION];\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"367b82957cdd65468a6a142da1fe5c6e083dac5400ad0d80c00a62ddfaee2a8e\",\"moduleSequenceNumber\":60740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport class Position {\\n    constructor(netscript, positionType, positionShares, positionPrice) {\\n        this.ns = netscript;\\n        this.type = positionType;\\n        this.shares = positionShares;\\n        this.price = positionPrice;\\n        this.value = this.shares * this.price;\\n    }\\n    get type() {\\n        return this._type;\\n    }\\n    set type(value) {\\n        if (CONSTANTS.POSITIONS.includes(value)) {\\n            this._type = value;\\n        }\\n        else {\\n            this.ns.tprintf(\\\"Error: Expected %s, but got %s\\\", CONSTANTS.POSITIONS, value);\\n        }\\n    }\\n    get shares() {\\n        return this._shares;\\n    }\\n    set shares(value) {\\n        if (value >= 0) {\\n            this._shares = value;\\n        }\\n        else {\\n            this.ns.tprintf(\\\"Error: Expected shares to be >= 0. Got %s.\\\", value);\\n        }\\n    }\\n    get price() {\\n        return this._price;\\n    }\\n    set price(value) {\\n        if (value >= 0) {\\n            this._price = value;\\n        }\\n        else {\\n            this.ns.tprintf(\\\"Error: Price must be >= 0. Got %s.\\\", value);\\n        }\\n    }\\n    static getPositionFromData(ns, positionData) {\\n        if (positionData.length == 4) {\\n            let [positionType, positionShares, positionPrice] = this.getPosition(positionData);\\n            let position = new Position(ns, positionType, positionShares, positionPrice);\\n            if (positionType != CONSTANTS.STOCKS.NO_POSITION && positionPrice) {\\n                return [true, position];\\n            }\\n            else {\\n                return [false, position];\\n            }\\n        }\\n        else {\\n            // If we don't get a valid input, return false and no position, but report an error.\\n            ns.tprintf(\\\"Error: Expected %s, but got %s\\\", \\\"[#, #, #, #]\\\", positionData);\\n            return [false, new Position(ns, CONSTANTS.STOCKS.NO_POSITION, 0, 0)];\\n        }\\n    }\\n    static getPosition(positionData) {\\n        if (positionData[0] > 0) {\\n            return [CONSTANTS.STOCKS.LONG_POSITION, positionData[0], positionData[1]];\\n        }\\n        else if (positionData[2] > 0) {\\n            return [CONSTANTS.STOCKS.SHORT_POSITION, positionData[2], positionData[3]];\\n        }\\n        else {\\n            return [CONSTANTS.STOCKS.NO_POSITION, 0, 0];\\n        }\\n    }\\n}\",\"filename\":\"/js/stocks/position.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.6,\"server\":\"home\",\"_hash\":\"1c8fa63683665282afc8b545a07df09ef375617a229649ad540ff7ecc15f92d6\",\"moduleSequenceNumber\":60748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Stock } from \\\"js/stocks/stock\\\";\\nexport class TradeBot {\\n    constructor(netscript) {\\n        this.ns = netscript;\\n        this.TIX = this.ns.stock;\\n        // Get all of the stock symbols\\n        this.stockSymbols = this.TIX.getSymbols();\\n        // Create an array of Stocks\\n        this.stocks = new Array();\\n        for (let stockSymbol of this.stockSymbols) {\\n            this.stocks.push(new Stock(this.ns, stockSymbol));\\n        }\\n    }\\n    // Run the AutoTrader\\n    run() {\\n    }\\n    stop() {\\n    }\\n    updateStockData() {\\n        for (let stock of this.stocks) {\\n            stock.update();\\n        }\\n    }\\n    sortForecasts() {\\n        // Update the stock data.\\n        this.updateStockData();\\n        // Sort stocks by the absolute value of their forecast\\n        // We don't care which direction it is going because we can take long or short positions\\n        this.stocks.sort((stockA, stockB) => Math.abs(stockA.forecast) - Math.abs(stockB.forecast));\\n    }\\n}\",\"filename\":\"/js/stocks/botManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":28.6,\"server\":\"home\",\"_hash\":\"0f3e899f2e67f90fac832920bbf53e9084597ecc5aca768b28f897cb1f0e4efd\",\"moduleSequenceNumber\":240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nimport { Stock } from \\\"js/stocks/stock\\\";\\nexport class TradeBot {\\n    constructor(netscript, name, budget, forecastThreshold, ...symbolsToAdd) {\\n        this.ns = netscript;\\n        this.TIX = this.ns.stock;\\n        this.name = name;\\n        this.fileName = \\\"/data/stocks/\\\" + this.name + \\\".txt\\\";\\n        this.budget = budget;\\n        this.forecastThreshold = forecastThreshold;\\n        this.portfolioValue = 0;\\n        // Get all of the stock symbols\\n        this.stockSymbols = this.TIX.getSymbols();\\n        // Create an array of Stocks\\n        this.stocks = new Array();\\n        for (let stockSymbol of this.stockSymbols) {\\n            this.stocks.push(new Stock(this.ns, stockSymbol));\\n        }\\n        // Check if we should add any symbols to our portfolio\\n        this.portfolio = new Array();\\n        if (symbolsToAdd) {\\n            for (let stockSymbol of symbolsToAdd) {\\n                let stock = new Stock(this.ns, stockSymbol);\\n                this.portfolio.push(stock);\\n                this.portfolioValue += stock.position.value;\\n            }\\n        }\\n    }\\n    // Tick the TradeBot\\n    async tick() {\\n        // Update our portfolio, selling off anything below our threshold\\n        this.updatePortfolio();\\n        this.ns.print(this.ns.vsprintf(\\\"Budget: %s\\\", [this.budget]));\\n        // Our potential budget is our budget plus the value of our portfolio\\n        let potentialBudget = this.budget + this.portfolioValue;\\n        // Spend our budget. If we want to buy a stock, but don't have enough money, check if we have any stocks\\n        // in our portfolio that have a worse forcast. Sell the worst stocks and buy better ones.\\n        // Update our stock data, which also sorts by forecast\\n        this.updateStockData();\\n        // for (let stock of this.stocks) {\\n        //     this.ns.print(this.ns.vsprintf(\\\"Stock: %s, forecast: %s, fMag: %s\\\", [stock.symbol, stock.forecast, stock.forecastMagnitude]))\\n        // }\\n        // Calculate how to spend the potential budget based on the stock forecasts.\\n        for (let stock of this.stocks) {\\n            this.ns.print(this.ns.vsprintf(\\\"Checking %s, Forecast: %s, Available Shares %s\\\", [stock.symbol, stock.forecast, stock.availableShares]));\\n            // Apparently shorting stocks isn't available until you get some shit I don't have, so we will\\n            // skip any short positions for now\\n            if (stock.forecastType == CONSTANTS.STOCKS.SHORT_POSITION) {\\n                continue;\\n            }\\n            // Skip this one if there are no available shares\\n            if (stock.availableShares == 0) {\\n                continue;\\n            }\\n            //this.ns.print(this.ns.vsprintf(\\\"Stock: %s, forecast: %s, fMag: %s\\\", [stock.symbol, stock.forecast, stock.forecastMagnitude]))\\n            // Stocks are sorted by forecast, so if we hit one beneath our threshold before our budget is gone,\\n            // just stop\\n            if (stock.forecastMagnitude < this.forecastThreshold) {\\n                this.ns.print(this.ns.vsprintf(\\\"Does not meet threshold %s / %s\\\", [stock.forecastMagnitude, this.forecastThreshold]));\\n                break;\\n            }\\n            // Next check how much it would cost to buy all available shares\\n            // We use the API to make sure the price is accurate\\n            // this.ns.print(this.ns.vsprintf(\\\"Calculating puchase cost for %s, %s shares available, %s position\\\", \\n            //                 [stock.symbol, stock.availableShares, stock.position.type]));\\n            let purchaseCost = this.TIX.getPurchaseCost(stock.symbol, stock.availableShares, stock.forecastType);\\n            // If we have enough budget, sell our worst forecasted stock first\\n            // Unless we have no portfolio, then skip\\n            if (this.portfolio.length > 0 && purchaseCost > this.budget) {\\n                this.ns.print(\\\"Trying to rebalance...\\\");\\n                // Get the worst forecasted stock\\n                let worstPortfolioStock = this.portfolio[this.portfolio.length - 1];\\n                // If our worst portfolio stock has a better forecast than this one\\n                // skip the rest\\n                if (worstPortfolioStock.forecastMagnitude < stock.forecastMagnitude) {\\n                    // Find out how much we need to sell\\n                    // Add a bit of room for error\\n                    let neededBudget = purchaseCost - this.budget;\\n                    let sharesToSell = Math.ceil(neededBudget / worstPortfolioStock.position.price);\\n                    sharesToSell *= 1.05;\\n                    // Sell the shares\\n                    let isSuccess;\\n                    let sellPrice;\\n                    [isSuccess, sellPrice] = worstPortfolioStock.marketSell(stock.position.type, sharesToSell);\\n                    if (isSuccess) {\\n                        this.budget += sellPrice;\\n                    }\\n                }\\n            }\\n            // Check again if we meet the budget\\n            if (purchaseCost > this.budget) {\\n                this.ns.print(this.ns.vsprintf(\\\"Can't afford %s. Trying to budget starting with %s.\\\", [purchaseCost, this.budget]));\\n                // If we don't have enough money, buy as much of the stock as we can\\n                // Leave a bit of room because the price may be higher than estimated\\n                let approxSharesCanBuy = Math.floor(this.budget / stock.price) * 0.90;\\n                stock.marketOrder(stock.forecastType, approxSharesCanBuy);\\n                this.portfolio.push(stock);\\n                // Exit because we are out of budget\\n                break;\\n            }\\n            this.ns.print(this.ns.vsprintf(\\\"Trying to purchase %s, %s shares, %s position\\\", [stock.symbol, stock.availableShares, stock.forecastType]));\\n            stock.marketOrder(stock.forecastType, stock.availableShares);\\n            this.portfolio.push(stock);\\n        }\\n        // Update external portfolio file\\n        this.ns.rm(this.fileName, this.ns.getHostname());\\n        for (let stock of this.portfolio) {\\n            // Write the stock symbol to a file in case we end the bot\\n            await this.ns.write(this.fileName, stock.symbol + \\\"\\\\n\\\", \\\"a\\\");\\n        }\\n    }\\n    liquidate() {\\n    }\\n    updateStockData() {\\n        for (let stock of this.stocks) {\\n            stock.update();\\n        }\\n        this.sortForecasts();\\n    }\\n    sortForecasts() {\\n        // Sort stocks by the magnitude of their forecast\\n        // We don't care which direction it is going because we can take long or short positions\\n        this.stocks.sort(this.sortStocksByForecastMagnitude);\\n    }\\n    // Update the stock data and get our portfolio value\\n    updatePortfolio() {\\n        this.portfolioValue = 0;\\n        // Go through each stock and update it\\n        // If it is under our threshold or we have the wrong position, sell it, \\n        // otherwise add it's value to our portfolio\\n        for (let stock of this.portfolio) {\\n            stock.update();\\n            // If we sell the stock, lower our porfolio value and add to our budget\\n            let sellThreshold = this.forecastThreshold - 0.01;\\n            if (stock.forecastMagnitude < sellThreshold || stock.forecastType != stock.position.type) {\\n                this.ns.print(this.ns.vsprintf(\\\"Selling %s\\\", [stock.symbol]));\\n                let sellSuccess;\\n                let sellPrice;\\n                [sellSuccess, sellPrice] = stock.marketSell(stock.position.type, stock.position.shares);\\n                // If the sale worked, remove the stock from the portfolio and it it to our budget\\n                this.ns.print(this.ns.vsprintf(\\\"Sold %s, removing from portfolio. Portfolio size: %s\\\", [stock.symbol, this.portfolio.length]));\\n                if (sellSuccess) {\\n                    let index = this.portfolio.indexOf(stock);\\n                    this.portfolio.splice(index, 1);\\n                    this.budget += sellPrice;\\n                }\\n                this.ns.print(this.ns.vsprintf(\\\"Removed. Portfolio size: %s\\\", [stock.symbol, this.portfolio.length]));\\n            }\\n            else {\\n                this.portfolioValue += stock.position.value;\\n            }\\n        }\\n        this.sortPortfolio();\\n    }\\n    sortPortfolio() {\\n        // Sort stocks by the magnitude of their forecast\\n        // We don't care which direction it is going because we can take long or short positions\\n        this.portfolio.sort(this.sortStocksByForecastMagnitude);\\n    }\\n    sortStocksByForecastMagnitude(stockA, stockB) {\\n        return stockB.forecastMagnitude - stockA.forecastMagnitude;\\n    }\\n}\",\"filename\":\"/js/stocks/tradeBot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":31.65,\"server\":\"home\",\"_hash\":\"2d22f719387dc8df11c851ed898589027a7bd27a6433cae19bbe82bd7e1f6f18\",\"moduleSequenceNumber\":60754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    ns.tail();\\n    // Function must be async\\n    // This function should get server details and output a report\\n    async function analyzeServer() {\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        async function initialize() {\\n        }\\n        await initialize();\\n    }\\n    // Run the function or it's useless\\n    await analyzeServer();\\n}\",\"filename\":\"/js/analyzeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"88ac8cec007b20b6e7c7da47070d82cf53b9431b482b441ce2dcd0b75a05eba4\",\"moduleSequenceNumber\":49691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Pretty useless class, I thought I would do more with it\\nexport class Argument {\\n    constructor(arg) {\\n        this.value = arg;\\n    }\\n    static validateString(arg) {\\n        if (typeof (arg) == \\\"string\\\") {\\n            return [true, arg];\\n        }\\n        else {\\n            return [false, \\\"\\\"];\\n        }\\n    }\\n    static validateNumber(arg) {\\n        if (typeof (arg) == \\\"number\\\") {\\n            return [true, arg];\\n        }\\n        else {\\n            return [false, 0];\\n        }\\n    }\\n    static validateBoolean(arg) {\\n        if (typeof (arg) == \\\"boolean\\\") {\\n            return [true, arg];\\n        }\\n        else {\\n            return [false, false];\\n        }\\n    }\\n}\\nexport class StringArgument extends Argument {\\n    constructor(arg) {\\n        super(arg);\\n        this.value = arg;\\n    }\\n}\\nexport class NumberArgument extends Argument {\\n    constructor(arg) {\\n        super(arg);\\n        this.value = arg;\\n    }\\n}\\nexport class BooleanArgument extends Argument {\\n    constructor(arg) {\\n        super(arg);\\n        this.value = arg;\\n    }\\n}\",\"filename\":\"/js/common/argument.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"fb00b219d3bf921272d9b5929969851ed6e030f1e77861dd2613f3f92a836f3d\",\"moduleSequenceNumber\":89209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Turns out this object exists in NS and this is not needed at all, whoops. Just use Server from the NS definitions.\\nexport class System {\\n    constructor(netscript, host, threads) {\\n        this.ns = netscript;\\n        // If there is no hostname passed in, get the host that the script is running on\\n        this.host = host || this.ns.getHostname();\\n        this.threads = threads || 1;\\n        this.securityMinLevel = this.ns.getServerMinSecurityLevel(this.host);\\n        this.securityLevel = this.ns.getServerSecurityLevel(this.host);\\n        this.securityWeakenAmount = this.ns.weakenAnalyze(this.threads);\\n        this.moneyMaxAvailable = this.ns.getServerMaxMoney(this.host);\\n        this.moneyAvailable = this.ns.getServerMoneyAvailable(this.host);\\n        this.portsRequired = this.ns.getServerNumPortsRequired(this.host);\\n        this.hackingLevelRequired = this.ns.getServerRequiredHackingLevel(this.host);\\n        this.hasRoot = this.ns.hasRootAccess(this.host);\\n    }\\n    updateSecurityLevel() {\\n        this.securityLevel = this.ns.getServerSecurityLevel(this.host);\\n    }\\n    updateSecurityWeakenAmount() {\\n        this.securityLevel = this.ns.weakenAnalyze(this.threads);\\n    }\\n    updateMoneyAvailable() {\\n        this.moneyAvailable = this.ns.getServerMoneyAvailable(this.host);\\n    }\\n    updateRootAccess() {\\n        this.hasRoot = this.ns.hasRootAccess(this.host);\\n    }\\n}\",\"filename\":\"/js/common/system.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.3,\"server\":\"home\",\"_hash\":\"fab10d0d48327d48ad452479dfc8fc270e33e3e454cf861e81ea49c5dc0e24e1\",\"moduleSequenceNumber\":49703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\n/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Log crawled hosts\\n        const KNOWN_HOSTS = CONSTANTS.DIRECTORIES.CRAWL_LOGS + CONSTANTS.TEXT_FILES.KNOWN_HOSTS;\\n        const CRAWL_REPORT = CONSTANTS.DIRECTORIES.CRAWL_LOGS + CONSTANTS.TEXT_FILES.CRAWL_REPORT;\\n        const HOST_INFO_REPORT = CONSTANTS.DIRECTORIES.CRAWL_LOGS + CONSTANTS.TEXT_FILES.HOST_INFO;\\n        const ROOTED_HOSTS = CONSTANTS.DIRECTORIES.CRAWL_LOGS + CONSTANTS.TEXT_FILES.ROOTED_HOSTS;\\n        const CRAWLED_CONTRACTS = CONSTANTS.DIRECTORIES.CRAWL_LOGS + CONSTANTS.TEXT_FILES.CRAWLED_CONTRACTS;\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledHosts = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledHosts.push(HOST_SERVER);\\n            // Write the depth and host to start the report off\\n            // Log the HOST_SERVER to the known hosts file\\n            // Clear the reports\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            await ns.write(KNOWN_HOSTS, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(HOST_INFO_REPORT, \\\"\\\", \\\"w\\\");\\n            await ns.write(ROOTED_HOSTS, HOST_SERVER, \\\"w\\\");\\n            await ns.write(CRAWLED_CONTRACTS, \\\"\\\", \\\"w\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                // Shift off the first host in our list of hosts to scan and scan it to see which nodes it is connected to\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedHosts = ns.scan(host);\\n                    // For each scanned server, make sure that we haven't crawled it before.\\n                    // If we haven't crawled it, then push it into an array of new hosts to scan after we exhaust all\\n                    // hosts at our current crawl depth\\n                    // Finally, write to the crawl reports/logs\\n                    for (let host of scannedHosts) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledHosts.includes(host)) {\\n                            // Get a server object for the host we are crawling\\n                            let server = ns.getServer(host);\\n                            // If the server is one of ours, skip crawling it, there are better ways to access them\\n                            if (!server.purchasedByPlayer) {\\n                                // Host Info Report\\n                                // Hostname, Has Admin Rights, Required Hacking Skill, Open Port Count,\\n                                // Number of Open Ports Required, Max RAM, CPU Cores, Max Money, Organization \\n                                let hostInfoData = [host, server.hasAdminRights, server.requiredHackingSkill,\\n                                    server.openPortCount, server.numOpenPortsRequired, server.maxRam,\\n                                    server.cpuCores, server.moneyMax, server.organizationName];\\n                                // Format a string for this line of the report\\n                                let hostInfo = ns.vsprintf(\\\"%s \\\".repeat(hostInfoData.length) + \\\"\\\\n\\\", [host, server.hasAdminRights, server.requiredHackingSkill, server.openPortCount,\\n                                    server.numOpenPortsRequired, server.maxRam, server.cpuCores, server.moneyMax,\\n                                    server.organizationName]);\\n                                // Get the files on the servers\\n                                let files = ns.ls(host);\\n                                // Filter out coding contracts. I could just use \\\".cct\\\" as the second argument in\\n                                // ns.ls(host, grep), but I will do it this way in case I want to do something with \\n                                // the other files\\n                                let contractsInfo = \\\"\\\";\\n                                for (let codingContract of files.filter(file => file.match(\\\".cct\\\"))) {\\n                                    let contractInfo = ns.vsprintf(\\\"%s %s\\\\n\\\", [codingContract, host]);\\n                                    contractsInfo += contractInfo;\\n                                }\\n                                // Track the new hosts to scan and track that we crawled this host\\n                                newHostsToScan.push(host);\\n                                crawledHosts.push(host);\\n                                let hostReportString = host + \\\"\\\\n\\\";\\n                                await ns.write(KNOWN_HOSTS, hostReportString, \\\"a\\\");\\n                                await ns.write(CRAWL_REPORT, hostReportString, \\\"a\\\");\\n                                await ns.write(HOST_INFO_REPORT, hostInfo, \\\"a\\\");\\n                                await ns.write(CRAWLED_CONTRACTS, contractsInfo, \\\"a\\\");\\n                                // If we have root acess, write that to the rooted-hosts.txt file\\n                                if (server.hasAdminRights) {\\n                                    await ns.write(ROOTED_HOSTS, hostReportString, \\\"a\\\");\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts durring the next pass\\n                // Increase the depth and report our progress to the popup window\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledHosts.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///f5c9365a-7e29-481b-979d-e71168dd6c08\"},{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///95bd7467-4caa-4898-aadc-e8ed128713d0\"}],\"ramUsage\":4.05,\"server\":\"home\",\"_hash\":\"f03fd24f9e904b859a88c58a812b3a7dc8150dbbb7d3232dc052393e24bdf1e2\",\"moduleSequenceNumber\":60984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SCRIPTS {\\n    static all() {\\n        let allScripts = [];\\n        allScripts.push(SCRIPTS.CONSTANTS);\\n        allScripts.push(SCRIPTS.PROGRAMS);\\n        allScripts.push(SCRIPTS.SERVERS);\\n        allScripts.push(SCRIPTS.KILL_THEN_INJECT);\\n        allScripts.push(SCRIPTS.GAIN_ROOT);\\n        allScripts.push(SCRIPTS.SIMPLE_HACK);\\n        allScripts.push(SCRIPTS.CRAWL);\\n        allScripts.push(SCRIPTS.RUN_KNOWN_HOSTS);\\n        allScripts.push(SCRIPTS.START_BOT);\\n        allScripts.push(SCRIPTS.STOP_BOT);\\n        return allScripts;\\n    }\\n}\\nSCRIPTS.CONSTANTS = \\\"/js/common/constants/constants.js\\\";\\nSCRIPTS.PROGRAMS = \\\"/js/common/constants/programs.js\\\";\\nSCRIPTS.SERVERS = \\\"/js/common/constants/servers.js\\\";\\nSCRIPTS.KILL_THEN_INJECT = \\\"/js/common/util/killThenInject.js\\\";\\nSCRIPTS.GAIN_ROOT = \\\"/js/gainRoot.js\\\";\\nSCRIPTS.SIMPLE_HACK = \\\"/js/simpleHack.js\\\";\\nSCRIPTS.CRAWL = \\\"/js/crawl.js\\\";\\nSCRIPTS.RUN_KNOWN_HOSTS = \\\"/js/runOnKnownHosts.js\\\";\\nSCRIPTS.START_BOT = \\\"/js/stocks/startBot.js\\\";\\nSCRIPTS.STOP_BOT = \\\"/js/stocks/stopBot.js\\\";\",\"filename\":\"/js/common/constants/scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"6061c4d4145c1237e6e96004e73f987b596987064adaf7e6cffbd026ced1ef23\",\"moduleSequenceNumber\":49701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    async function clearCustomTest() {\\n        let customNode = document.getElementById(\\\"custom-1\\\");\\n        if (customNode !== null) {\\n            customNode.remove();\\n        }\\n    }\\n    await clearCustomTest();\\n}\",\"filename\":\"/js/experiment/clearCustomTest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":26.75,\"server\":\"home\",\"_hash\":\"4d615f289ba4007eb9c0bd21d18fbfb5cd92a44f163a681daade6ccbbecbb794\",\"moduleSequenceNumber\":49707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SCRIPTS } from \\\"js/common/constants/scripts\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    ns.tail();\\n    // Function must be async\\n    async function runOnAllServers() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run.\\\");\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let arg2 = false;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"boolean\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not boolean. It should be the whether or not to kill \\\"\\n                    + \\\"all scripts before running new ones.\\\");\\n            }\\n        }\\n        const SHOULD_KILL = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        let purchasedServers;\\n        async function initiailize() {\\n            purchasedServers = ns.getPurchasedServers();\\n            purchasedServers.push(HOST_SERVER);\\n        }\\n        // Execute the script on each server, passing in args if we have them\\n        async function remoteExecute() {\\n            for (let server of purchasedServers) {\\n                if (SHOULD_KILL) {\\n                    if (server == HOST_SERVER) {\\n                        if (purchasedServers.length > 1) {\\n                            // LMAO\\n                            ns.exec(SCRIPTS.KILL_THEN_INJECT, purchasedServers[1], THREADS, HOST_SERVER, SCRIPT_NAME, THREADS, ...args);\\n                        }\\n                        else {\\n                            ns.print(\\\"Error: Can't Kill All and execute with only one server! Kill all first, then run with arg[2] = false.\\\");\\n                        }\\n                    }\\n                    ns.killall(server);\\n                }\\n                if (TOTAL_ARGS > 3) {\\n                    ns.exec(SCRIPT_NAME, server, THREADS, ...args);\\n                }\\n                else {\\n                    ns.exec(SCRIPT_NAME, server, THREADS);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnAllServers();\\n}\",\"filename\":\"/js/runOnAllServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/scripts.js\",\"url\":\"blob:file:///f4c26af3-8e08-4292-9cc4-7271ea97513a\"},{\"filename\":\"/js/runOnAllServers.js\",\"url\":\"blob:file:///48fb3ff7-f678-4ff1-a103-f118d2d55c33\"}],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"cc8709c2dbeca5d8707c97e87ef8f56086748d4674d54b5d16939a4a0b300b9d\",\"moduleSequenceNumber\":66023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    async function sidebarTest() {\\n        let drawerItemTempParent = document.createElement(\\\"div\\\");\\n        drawerItemTempParent.innerHTML = `\\r\\n        <div id=\\\"custom-1\\\" class=\\\"MuiButtonBase-root jss21 MuiListItem-root MuiListItem-gutters MuiListItem-padding MuiListItem-button css-1kk0p5e\\\" tabindex=\\\"0\\\" role=\\\"button\\\">\\r\\n            <div class=\\\"MuiListItemIcon-root css-1f8bwsm\\\">\\r\\n                <svg class=\\\"MuiSvgIcon-root MuiSvgIcon-colorSecondary MuiSvgIcon-fontSizeMedium css-16w0lv1\\\" focusable=\\\"false\\\" viewBox=\\\"0 0 24 24\\\" aria-hidden=\\\"true\\\" data-testid=\\\"LastPageIcon\\\">\\r\\n                    <path d=\\\"M5.59 7.41 10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"></path>\\r\\n                </svg>\\r\\n            </div>\\r\\n            <div class=\\\"MuiListItemText-root css-1tsvksn\\\">\\r\\n                <p class=\\\"MuiTypography-root MuiTypography-body1 css-11wufc6\\\">Custom</p>\\r\\n            </div>\\r\\n            <span class=\\\"MuiTouchRipple-root css-w0pj6f\\\"></span>\\r\\n        </div>\\r\\n        `;\\n        let drawerItem = drawerItemTempParent.firstElementChild;\\n        // Create a basic div tag to use instead of creating several\\n        const BLANK_ELEMENT = document.createElement(\\\"div\\\");\\n        const BUTTONS = document.querySelectorAll(\\\".MuiButtonBase-root\\\");\\n        let customNode = document.getElementById(\\\"custom-1\\\");\\n        if (customNode !== null) {\\n            customNode.remove();\\n        }\\n        let hackingMenu = BLANK_ELEMENT;\\n        //ns.tprint(buttonBases.length);\\n        for (let button of BUTTONS) {\\n            let buttonHTML = button;\\n            if (buttonHTML.innerText == \\\"Hacking\\\") {\\n                hackingMenu = buttonHTML;\\n            }\\n        }\\n        let hackingDrawer = hackingMenu.nextElementSibling;\\n        //ns.tprint(hackingDrawer.innerHTML);\\n        let hackingListRoot = BLANK_ELEMENT;\\n        if (hackingDrawer !== null) {\\n            let listRoot = hackingDrawer.querySelector(\\\".MuiList-root\\\");\\n            if (listRoot != null) {\\n                hackingListRoot = listRoot;\\n            }\\n        }\\n        else {\\n            ns.tprint(\\\"Error: hackingDrawer not found (is null).\\\");\\n            ns.exit();\\n        }\\n        //ns.tprint(hackingListRoot.innerHTML);\\n        //ns.tprint(drawerItem.innerHTML);\\n        if (drawerItem !== null) {\\n            hackingListRoot.appendChild(drawerItem);\\n            //ns.tprint(\\\"Custom drawer injected.\\\");\\n        }\\n        else {\\n            ns.tprint(\\\"Error: drawerItem is null\\\");\\n        }\\n    }\\n    await sidebarTest();\\n}\",\"filename\":\"/js/experiment/sidebarTest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":26.75,\"server\":\"home\",\"_hash\":\"6d3bf3fe8bc55ff81eddce082402331f88483995213c3b9da381d0a97f45d0cd\",\"moduleSequenceNumber\":49711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"home\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":66024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    async function template() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server //\\n        // This is the server we want to hack. We can hack any server in the game, but only if our skill is high enough\\n        // and we have root access.\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", argument);\\n            argumentError();\\n        }\\n        const ARGUMENT = argument;\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Target Server\\r\\n                Expected: string\\r\\n                This is the server we want to hack. We can hack any server in the game, but only \\r\\n                if our skill is high enough and we have root access.\\r\\n\\r\\n                arg[1]? - Affect Stock Market?\\r\\n                Optional\\r\\n                Expected: boolean\\r\\n                If true, hack() will affect the stock market, making it trend downwards on a successful hack()\\r\\n\\r\\n                arg[2]? - threads\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n                the script is running with.\\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await template();\\n}\",\"filename\":\"/js/template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"5c6d6de6c20cd08631b183e15465b82203d77578eaf54a87f8859ed1e37de8ca\",\"moduleSequenceNumber\":103051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SCRIPTS } from \\\"js/common/constants/scripts\\\";\\n// Once again I am dumb. You can't even copy programs to servers.\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // Get purchased servers and copy all available scripts to them\\n    async function copyProgramsToServers() {\\n        const HOST_SERVER = ns.getHostname();\\n        let purchasedServers;\\n        let filesToCopy = [];\\n        let failedCopies = [];\\n        /*\\n        // For checking avialble programs on the system\\n        let hasNuke             : boolean;\\n        let hasAutoLink         : boolean;\\n        let hasDeepScanV1       : boolean;\\n        let hasServerProfiler   : boolean;\\n        let hasBruteSSH         : boolean;\\n        let hasFTPCrack         : boolean;\\n        */\\n        function initialize() {\\n            // Check which programs are available on this computer\\n            /*\\n            hasNuke \\t        = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink         = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasDeepScanV1       = ns.fileExists(PROGRAMS.DEEPSCAN_V1, HOST_SERVER);\\n            hasServerProfiler   = ns.fileExists(PROGRAMS.SERVER_PROFILER, HOST_SERVER);\\n            hasBruteSSH         = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack         = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            */\\n            purchasedServers = ns.getPurchasedServers();\\n            for (let script of SCRIPTS.all()) {\\n                if (ns.fileExists(script, HOST_SERVER)) {\\n                    filesToCopy.push(script);\\n                }\\n            }\\n            ns.tprint(\\\"Files ready to copy: \\\" + filesToCopy);\\n        }\\n        async function copyFiles() {\\n            for (let server of purchasedServers) {\\n                let fileCopied = await ns.scp(filesToCopy, HOST_SERVER, server);\\n                if (!fileCopied) {\\n                    failedCopies.push(server);\\n                }\\n            }\\n            ns.tprint(\\\"Finished copying. \\\" + failedCopies.length + \\\" Failures. \\\\n Failed servers: \\\" + failedCopies);\\n        }\\n        initialize();\\n        await copyFiles();\\n    }\\n    // Run the function or it's useless\\n    await copyProgramsToServers();\\n}\",\"filename\":\"/js/util/copyScriptsToServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.6,\"server\":\"home\",\"_hash\":\"e0442fc86b31b65b30386c51ee9566dc55055d3252a6506e010edcd4015866e9\",\"moduleSequenceNumber\":49739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"home\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":49743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    async function purchaseServers() {\\n        let purchasedServerMaxRam = ns.getPurchasedServerMaxRam();\\n        let purchasedServerLimit = ns.getPurchasedServerLimit();\\n        let purchasedServers = ns.getPurchasedServers();\\n        ns.tprint(\\\"Max RAM can purchase: \\\" + purchasedServerMaxRam);\\n        ns.tprint(\\\"Total Servers: \\\" + purchasedServers.length + \\\" / \\\" + purchasedServerLimit);\\n        ns.tprint(\\\"Price of Max RAM server: \\\" + ns.getPurchasedServerCost(purchasedServerMaxRam));\\n        ns.tprint(\\\"Purchased Servers: \\\" + purchasedServers);\\n        if (ns.args.length == 0) {\\n            ns.tprint(\\\"Script usage: run purchaseServers.js isBuying RAM_Exponent? Hostname?\\\");\\n            ns.tprint(\\\"RAM is purchased using 2 to the RAM_Exponent power.\\\");\\n        }\\n        // Check if we are buying or just looking for information\\n        // If we are buying, then we check the arguments to make sure they are correct. We then set up a confirmation\\n        // prompt to avoid wasting money if we put in something wrong.\\n        if (typeof (ns.args[0]) == \\\"boolean\\\") {\\n            let isBuying = ns.args[0];\\n            if (isBuying) {\\n                if (ns.args.length > 2) {\\n                    if (typeof (ns.args[1]) == \\\"number\\\") {\\n                        if (typeof (ns.args[2]) == \\\"string\\\") {\\n                            let requestedRAM = Math.pow(2, ns.args[1]);\\n                            let hostname = ns.args[2];\\n                            let hasConfirmed = await ns.prompt(\\\"Purchasing a \\\" + requestedRAM + \\\" GB server for \\\"\\n                                + ns.getPurchasedServerCost(requestedRAM) + \\\" with hostname, \\\"\\n                                + hostname + \\\". Is this correct?\\\");\\n                            if (hasConfirmed) {\\n                                ns.purchaseServer(hostname, requestedRAM);\\n                                ns.tprint(\\\"Server purchased. Hostname: \\\" + hostname);\\n                            }\\n                            else {\\n                                ns.tprint(\\\"Purchase canceled.\\\");\\n                            }\\n                            ;\\n                        }\\n                        else {\\n                            ns.tprint(\\\"Error: args[2] not a string. Got \\\" + ns.args[2].toString());\\n                        }\\n                    }\\n                    else {\\n                        ns.tprint(\\\"Error: args[1] not a number. Got \\\" + ns.args[1].toString());\\n                    }\\n                }\\n            }\\n            // If we are not buying, then use the second argument to check the cost of the server for that amount\\n            // of RAM\\n            else {\\n                if (ns.args.length > 1) {\\n                    if (typeof (ns.args[1]) == \\\"number\\\") {\\n                        let requestedRAM = Math.pow(2, ns.args[1]);\\n                        ns.tprint(\\\"Price of requested \\\" + requestedRAM + \\\" GB RAM server: \\\"\\n                            + ns.getPurchasedServerCost(requestedRAM));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    // Run the function or it's useless\\n    await purchaseServers();\\n}\",\"filename\":\"/js/util/purchaseServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.45,\"server\":\"home\",\"_hash\":\"27b8e2d733f4180c3d94d55f1c98fcd0e1e07f65cfaaa26ef175ad650b5704fd\",\"moduleSequenceNumber\":49745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { SCRIPTS } from \\\"js/common/constants/scripts\\\";\\n// import { Stock } from \\\"js/stocks/stock\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    async function tradeManager() {\\n        const START = 'start';\\n        const STOP = 'stop';\\n        const COMMANDS = [START, STOP];\\n        // Handle arguments\\n        // Optional: Find a sexy way to do it\\n        /* ARGUMENTS */\\n        // args[0] - Command (Start, Stop, List)\\n        //\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Command\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        // If the argument is invalid or the command isn't valid, exit\\n        if (!isArgumentValid || !COMMANDS.includes(argument)) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected %s, got %s\\\", COMMANDS, argument);\\n            ns.exit();\\n        }\\n        const COMMAND = argument;\\n        if (COMMAND == START) {\\n            ns.run(SCRIPTS.START_BOT, 1, ...ns.args.slice(1));\\n        }\\n        else if (COMMAND == STOP) {\\n        }\\n    }\\n    // Run the function or it's useless\\n    await tradeManager();\\n}\",\"filename\":\"/js/stocks/tradeManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/constants/scripts.js\",\"url\":\"blob:file:///a6764b28-5fd8-493a-86f2-4a310c49565f\"},{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///474ceecc-2d78-484a-afa4-512134d128e1\"},{\"filename\":\"/js/stocks/tradeManager.js\",\"url\":\"blob:file:///9984dc4d-6939-4fb8-867a-d54e3889f205\"}],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"1337c21421a795459b9ea0748f8d287735a30936421f7d78314e88584bf4ed84\",\"moduleSequenceNumber\":89221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TradeBot } from \\\"js/stocks/tradeBot\\\";\\nimport { Argument } from \\\"js/common/argument\\\";\\nimport { CONSTANTS } from \\\"js/common/constants/constants\\\";\\n// import { Stock } from \\\"js/stocks/stock\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    async function startBot() {\\n        ns.tail();\\n        // Handle arguments\\n        // Optional: Find a sexy way to do it\\n        /* ARGUMENTS */\\n        // args[0] - Name of tradebot\\n        // args[1] - Budget amount for this tradebot\\n        // args[2] - Forecast Threshold (minimum forecast magnitude)\\n        // args[3...] - Any symbols for stocks we want to add to the bot, in case we want to track stocks we own already\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Name\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[1] is invalid. Expected a string, but got %s\\\", argument);\\n            ns.exit();\\n        }\\n        const NAME = argument;\\n        // arg[1] - Budget\\n        [isArgumentValid, argument] = Argument.validateNumber(ns.args[1]);\\n        if (!isArgumentValid || argument < 0) {\\n            ns.tprintf(\\\"Error: arg[1] is invalid. Expected a number above 0, but got %s\\\", typeof (argument));\\n            ns.exit();\\n        }\\n        const BUDGET = argument;\\n        // arg[2] - Forecast Threshold\\n        [isArgumentValid, argument] = Argument.validateNumber(ns.args[2]);\\n        if (!isArgumentValid || argument < 0 || argument > 1) {\\n            ns.tprintf(\\\"Error: arg[1] is invalid. Expected a number between 1 and 0 but got %s\\\", argument);\\n            ns.exit();\\n        }\\n        const FORECAST_THRESHOLD = argument;\\n        // args[3...] - Stock Symbols\\n        // Loop over the rest of the args starting with index 3 and add them to a stock symbol array if valid\\n        let stockSymbols = new Array();\\n        for (let index = 3; index < ns.args.length; index++) {\\n            [isArgumentValid, argument] = Argument.validateString(ns.args[index]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[1] is invalid. Expected a string, but got %s\\\", typeof (argument));\\n                ns.exit();\\n            }\\n            stockSymbols.push(argument);\\n        }\\n        let tradeBot = new TradeBot(ns, NAME, BUDGET, FORECAST_THRESHOLD, ...stockSymbols);\\n        while (true) {\\n            await tradeBot.tick();\\n            await ns.asleep(CONSTANTS.STOCKS.UPDATE_TICK_DURATION);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await startBot();\\n}\",\"filename\":\"/js/stocks/startBot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///0fdbd3ac-f912-44b9-93f6-85847f59a3da\"},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/stocks/position.js\",\"url\":\"blob:file:///f0f66ee2-224a-482d-b18f-6ff325d6d3a5\"},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/stocks/stock.js\",\"url\":\"blob:file:///a00678d5-efb3-4ac6-9240-2331337a118b\"},{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///485ebe08-ab18-4af2-b044-d45652d4661e\"},{\"filename\":\"/js/stocks/tradeBot.js\",\"url\":\"blob:file:///0ea148a4-08d0-4e79-a539-d9cbf6db5876\"},{\"filename\":\"/js/stocks/startBot.js\",\"url\":\"blob:file:///54061581-37d5-4cac-be58-d084dbe280db\"}],\"ramUsage\":31.65,\"server\":\"home\",\"_hash\":\"7f6ba2ec89cff35845e185467ba8d99238c012a73dac5d76f87c309c2817d297\",\"moduleSequenceNumber\":89223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // Simple idea for stopping scripts from another script. Just give each script an event named after the\\n    // script path and a custom name\\n    // This idea doesn't play that nicely with the netscript environemtn\\n    async function worker() {\\n        ns.tail();\\n        let name = ns.args[0];\\n        const SCRIPT_NAME = ns.getScriptName();\\n        let eventName = ns.vsprintf(\\\"%s %s\\\", [SCRIPT_NAME, name]);\\n        ns.print(eventName);\\n        // Add an event listener to stop the script\\n        //window.addEventListener(eventName, stop);\\n        while (true) {\\n            ns.print(ns.sprintf(\\\"Running %1$s\\\", name));\\n            await ns.sleep(1000);\\n        }\\n        function stop() {\\n            ns.print(\\\"Stopping...\\\");\\n            ns.exit();\\n        }\\n    }\\n    // Run the function or it's useless\\n    await worker();\\n}\",\"filename\":\"/js/experiment/worker.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/experiment/worker.js\",\"url\":\"blob:file:///95df0ed6-de45-401e-9151-fece330aacfe\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"a7e4917e8b931dda1dd26ef81ef9d1fd79e7c12a3c4f0ff763582bd18cb8854f\",\"moduleSequenceNumber\":49713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    async function manager() {\\n        ns.tail();\\n        const WORKER_SCRIPT = '/js/experiment/worker.js';\\n        const HOST_SERVER = ns.getHostname();\\n        const LIST_INFO = `\\r\\n        Name:    %1$s`;\\n        if (ns.args[0] == 'start') {\\n            if (typeof (ns.args[1]) == 'string') {\\n                let name = ns.args[1];\\n                ns.run(WORKER_SCRIPT, 1, name);\\n            }\\n        }\\n        else if (ns.args[0] == 'stop') {\\n            if (typeof (ns.args[1]) == 'string') {\\n                let name = ns.args[1];\\n                ns.kill(WORKER_SCRIPT, HOST_SERVER, name);\\n            }\\n        }\\n        else if (ns.args[0] == 'list') {\\n            let processInfo = ns.ps();\\n            let name;\\n            let info = \\\"\\\";\\n            for (let process of processInfo) {\\n                if (process.filename == WORKER_SCRIPT) {\\n                    name = process.args[0];\\n                    info += ns.sprintf(LIST_INFO, name);\\n                }\\n            }\\n            ns.tprint(info);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await manager();\\n}\",\"filename\":\"/js/experiment/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/experiment/manager.js\",\"url\":\"blob:file:///b0596eb5-0c46-46e9-842f-c58d2e7d19b3\"}],\"ramUsage\":3.35,\"server\":\"home\",\"_hash\":\"184569c7f88be5601d6fad141389bae12a9ba639e8e533788d741da4cc2aa135\",\"moduleSequenceNumber\":60744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    async function hack() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server //\\n        // This is the server we want to hack. We can hack any server in the game, but only if our skill is high enough\\n        // and we have root access.\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", argument);\\n            argumentError();\\n        }\\n        const TARGET_SERVER = argument;\\n        // arg[1] - (Optional) Affect stock market? //\\n        // Default - false\\n        // Control whether we want the hack to affect the stock market. This will cause the stock to trend downward, for\\n        // hack()\\n        if (ns.args.length > 1) {\\n            [isArgumentValid, argument] = Argument.validateBoolean(ns.args[1]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[1] is invalid. Expected true/false, but got %s\\\", argument);\\n                argumentError();\\n            }\\n        }\\n        else {\\n            argument = false;\\n        }\\n        const AFFECT_STOCK_MARKET = argument;\\n        // arg[2] - (Optional) Threads //\\n        // Default - Number of threads the script is running with\\n        // The number of threads to use for this function. Must be less than or equal to the number of threads the\\n        // script is running with\\n        if (ns.args.length > 2) {\\n            [isArgumentValid, argument] = Argument.validateNumber(ns.args[2]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[2] is invalid. Expected a number, but got %s\\\", argument);\\n                argumentError();\\n            }\\n        }\\n        else {\\n            argument = 0;\\n        }\\n        const THREADS = argument ? argument : 1;\\n        // Wrap these guys into a BasicHGWOptions object to give to the hack script\\n        let HGW_OPTIONS = {\\n            stock: AFFECT_STOCK_MARKET,\\n            threads: THREADS\\n        };\\n        // LOL all of that just to call this\\n        await ns.hack(TARGET_SERVER, HGW_OPTIONS);\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Target Server\\r\\n                Expected: string\\r\\n                This is the server we want to hack. We can hack any server in the game, but only \\r\\n                if our skill is high enough and we have root access.\\r\\n\\r\\n                arg[1]? - Affect Stock Market?\\r\\n                Optional\\r\\n                Expected: boolean\\r\\n                If true, hack() will affect the stock market, making it trend downwards on a successful hack()\\r\\n\\r\\n                arg[2]? - threads\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n                the script is running with.\\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await hack();\\n}\",\"filename\":\"/js/hack/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/global.js\",\"url\":\"blob:file:///c02ac7ec-fbc0-4384-8b97-184d43c769bf\"},{\"filename\":\"/js/common/argument.js\",\"url\":\"blob:file:///0fdbd3ac-f912-44b9-93f6-85847f59a3da\"},{\"filename\":\"/js/hack/hack.js\",\"url\":\"blob:file:///9a2873a4-eb53-41fb-ac98-52ceffe4cbbd\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"37969e2bce8fbdbcc8e9c15b56157ed06994fb6ec49e3353a518f685b2fff59a\",\"moduleSequenceNumber\":89217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    async function weaken() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server //\\n        // This is the server we want to hack. We can hack any server in the game, but only if our skill is high enough\\n        // and we have root access.\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", argument);\\n            argumentError();\\n        }\\n        const TARGET_SERVER = argument;\\n        // arg[1] - (Optional) Affect stock market? //\\n        // Default - false\\n        // Control whether we want the hack to affect the stock market. This will cause the stock to trend downward, for\\n        // hack()\\n        if (ns.args.length > 1) {\\n            [isArgumentValid, argument] = Argument.validateBoolean(ns.args[1]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[1] is invalid. Expected true/false, but got %s\\\", argument);\\n                argumentError();\\n            }\\n        }\\n        else {\\n            argument = false;\\n        }\\n        const AFFECT_STOCK_MARKET = argument;\\n        // arg[2] - (Optional) Threads //\\n        // Default - Number of threads the script is running with\\n        // The number of threads to use for this function. Must be less than or equal to the number of threads the\\n        // script is running with\\n        if (ns.args.length > 2) {\\n            [isArgumentValid, argument] = Argument.validateNumber(ns.args[2]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[2] is invalid. Expected a number, but got %s\\\", argument);\\n                argumentError();\\n            }\\n        }\\n        else {\\n            argument = 0;\\n        }\\n        const THREADS = argument ? argument : 1;\\n        // Wrap these guys into a BasicHGWOptions object to give to the hack script\\n        let HGW_OPTIONS = {\\n            stock: AFFECT_STOCK_MARKET,\\n            threads: THREADS\\n        };\\n        // LOL all of that just to call this\\n        await ns.weaken(TARGET_SERVER, HGW_OPTIONS);\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Target Server\\r\\n                Expected: string\\r\\n                This is the server we want to weaken. We can weaken any server in the game, I think.\\r\\n\\r\\n                arg[1]? - Affect Stock Market?\\r\\n                Optional\\r\\n                Expected: boolean\\r\\n                If true, weaken() will affect the stock market, making it trend downwards on a successful weaken()\\r\\n\\r\\n                arg[2]? - threads\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n                the script is running with.\\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await weaken();\\n}\",\"filename\":\"/js/hack/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"1bbff95634d24a8b282237dbab905035b7fcfafc9d9527497570f725165a9d7a\",\"moduleSequenceNumber\":89215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    async function weaken() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server //\\n        // This is the server we want to hack. We can hack any server in the game, but only if our skill is high enough\\n        // and we have root access.\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", argument);\\n            argumentError();\\n        }\\n        const TARGET_SERVER = argument;\\n        // arg[1] - (Optional) Affect stock market? //\\n        // Default - false\\n        // Control whether we want the hack to affect the stock market. This will cause the stock to trend downward, for\\n        // hack()\\n        if (ns.args.length > 1) {\\n            [isArgumentValid, argument] = Argument.validateBoolean(ns.args[1]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[1] is invalid. Expected true/false, but got %s\\\", argument);\\n                argumentError();\\n            }\\n        }\\n        else {\\n            argument = false;\\n        }\\n        const AFFECT_STOCK_MARKET = argument;\\n        // arg[2] - (Optional) Threads //\\n        // Default - Number of threads the script is running with\\n        // The number of threads to use for this function. Must be less than or equal to the number of threads the\\n        // script is running with\\n        if (ns.args.length > 2) {\\n            [isArgumentValid, argument] = Argument.validateNumber(ns.args[2]);\\n            if (!isArgumentValid) {\\n                ns.tprintf(\\\"Error: arg[2] is invalid. Expected a number, but got %s\\\", argument);\\n                argumentError();\\n            }\\n        }\\n        else {\\n            argument = 0;\\n        }\\n        const THREADS = argument ? argument : 1;\\n        // Wrap these guys into a BasicHGWOptions object to give to the hack script\\n        let HGW_OPTIONS = {\\n            stock: AFFECT_STOCK_MARKET,\\n            threads: THREADS\\n        };\\n        // LOL all of that just to call this\\n        await ns.grow(TARGET_SERVER, HGW_OPTIONS);\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Target Server\\r\\n                Expected: string\\r\\n                This is the server we want to grow. We can grow any server in the game, I think.\\r\\n\\r\\n                arg[1]? - Affect Stock Market?\\r\\n                Optional\\r\\n                Expected: boolean\\r\\n                If true, grow() will affect the stock market, making it trend upwards on a successful grow()\\r\\n\\r\\n                arg[2]? - threads\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n                the script is running with.\\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await weaken();\\n}\",\"filename\":\"/js/hack/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.9,\"server\":\"home\",\"_hash\":\"6a3f10198a418c39a0b6f805efb0edde6a9cf02865ab77bc450c59bde50e0882\",\"moduleSequenceNumber\":89213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    // A simple script for toggling the Global debug variable\\n    async function toggleDebug() {\\n        if (GLOBAL.DEBUG) {\\n            GLOBAL.DEBUG = false;\\n            ns.tprint(\\\"Debug mode disabled.\\\");\\n        }\\n        else {\\n            GLOBAL.DEBUG = true;\\n            ns.tprint(\\\"Debug mode enabled.\\\");\\n        }\\n    }\\n    // Run the function or it's useless\\n    await toggleDebug();\\n}\",\"filename\":\"/js/util/toggleDebug.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/global.js\",\"url\":\"blob:file:///c02ac7ec-fbc0-4384-8b97-184d43c769bf\"},{\"filename\":\"/js/util/toggleDebug.js\",\"url\":\"blob:file:///df409f02-5744-409d-b343-eddf906e186d\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"c4b31ee47ed9704026f8ffb3f572e3095a14a2f8dfbb663ff27bd901db13d87e\",\"moduleSequenceNumber\":82277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class GLOBAL {\\n}\",\"filename\":\"/js/common/global.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"4f62655333230e8109c9b4fa94e656dc065edac2e0da1a675b552de58179bd23\",\"moduleSequenceNumber\":81476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument, StringArgument } from \\\"js/common/argument\\\";\\n// A class for handling operations common to all scripts\\n// Not really sure how to make it work well enough to be useful\\nexport class Script {\\n    constructor(netscript, totalRequiredArgs, argTypes, rawArgs, usageInfo) {\\n        this.ns = netscript;\\n        this.totalRequiredArguments = totalRequiredArgs;\\n        this.argumentTypes = argTypes;\\n        this.rawArguments = rawArgs;\\n        this.arguments = new Array();\\n        this.usageInfo = usageInfo || \\\"\\\";\\n        this.validateArguments();\\n    }\\n    validateArguments() {\\n        // First make sure we have the right number of arguments\\n        let totalArguments = this.rawArguments.length;\\n        if (totalArguments < this.totalRequiredArguments) {\\n            this.ns.tprint(this.ns.vsprintf(\\\"Error: Not enough arguments. Expected at least %s arguments, but got %s.\\\", [this.totalRequiredArguments, totalArguments]));\\n            this.argumentError();\\n        }\\n        let argument;\\n        let rawArgument;\\n        let isArgumentValid;\\n        // Go through each of our raw arguments and check them against their expected type\\n        for (let index = 0; index < this.rawArguments.length; index++) {\\n            let expectedArgType = this.argumentTypes[index];\\n            let argType = typeof (this.rawArguments[index]);\\n            switch (expectedArgType) {\\n                case 'string':\\n                    [isArgumentValid, rawArgument] = Argument.validateString(this.rawArguments[index]);\\n                    if (!isArgumentValid) {\\n                        this.ns.tprint(this.ns.vsprintf(\\\"Error: arg[%s] is invalid. Expected a number, but got %s\\\", [index, rawArgument]));\\n                        this.argumentError();\\n                    }\\n                    argument = new StringArgument(rawArgument);\\n                    break;\\n                case 'number':\\n                    break;\\n                case 'boolean':\\n                    break;\\n                default:\\n                    this.ns.print(this.ns.vsprintf(\\\"Error: Argument type is not supported. Must be string, number, or boolean. Got %s.\\\", [argType]));\\n                    this.argumentError();\\n            }\\n        }\\n    }\\n    argumentError() {\\n        this.usage();\\n        this.ns.exit();\\n    }\\n    usage() {\\n        let usage = `\\r\\n            arg[0] - Target Server\\r\\n            Expected: string\\r\\n            This is the server we want to weaken. We can weaken any server in the game, I think.\\r\\n\\r\\n            arg[1]? - Affect Stock Market?\\r\\n            Optional\\r\\n            Expected: boolean\\r\\n            If true, weaken() will affect the stock market, making it trend downwards on a successful weaken()\\r\\n\\r\\n            arg[2]? - threads\\r\\n            Optional\\r\\n            Expected: number\\r\\n            The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n            the script is running with.\\r\\n        `;\\n        this.ns.tprint(usage);\\n    }\\n}\",\"filename\":\"/js/common/script.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"66047e3be3e407e58a0e83ce7aa4758fa263ca7f7c9572d59db48bbe0777e3e4\",\"moduleSequenceNumber\":99159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    // This is a master script for running a hacking operation on a target\\n    async function master() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server //\\n        // This is the server we want to hack. We can hack any server in the game, but only if our skill is high enough\\n        // and we have root access.\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", argument);\\n            argumentError();\\n        }\\n        const ARGUMENT = argument;\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Target Server\\r\\n                Expected: string\\r\\n                This is the server we want to hack. We can hack any server in the game, but only \\r\\n                if our skill is high enough and we have root access.\\r\\n\\r\\n                arg[1]? - Affect Stock Market?\\r\\n                Optional\\r\\n                Expected: boolean\\r\\n                If true, hack() will affect the stock market, making it trend downwards on a successful hack()\\r\\n\\r\\n                arg[2]? - threads\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n                the script is running with.\\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n    }\\n    // Run the function or it's useless\\n    await master();\\n}\",\"filename\":\"/js/hack/master.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"20abef79a8d068542edc5a9d70ddf0b1ebb28a942ecf831afe91d26f014fcee5\",\"moduleSequenceNumber\":103035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Argument } from \\\"js/common/argument\\\";\\nimport { GLOBAL } from \\\"js/common/global\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // this.ns.print(this.ns.vsprintf(\\\"\\\", []));\\n    // Function must be async\\n    // A function for running a batch of HWGW on a target\\n    async function batch() {\\n        if (GLOBAL.DEBUG) {\\n            ns.print(\\\"Debug mode is on.\\\");\\n            ns.tail();\\n        }\\n        // For calling when we have an argument error. Prints the usage info and exits.\\n        function argumentError() {\\n            usage();\\n            ns.exit();\\n        }\\n        // A function for printing the usage data to the terminal\\n        function usage() {\\n            let usage = `\\r\\n                arg[0] - Target Server\\r\\n                Expected: string\\r\\n                This is the server we want to hack. We can hack any server in the game, but only \\r\\n                if our skill is high enough and we have root access.\\r\\n\\r\\n                arg[1]? - Affect Stock Market?\\r\\n                Optional\\r\\n                Expected: boolean\\r\\n                If true, hack() will affect the stock market, making it trend downwards on a successful hack()\\r\\n\\r\\n                arg[2]? - threads\\r\\n                Optional\\r\\n                Expected: number\\r\\n                The number of threads to use for this function. Must be less than or equal to the number of threads\\r\\n                the script is running with.\\r\\n            `;\\n            ns.tprint(usage);\\n        }\\n        /* ARGUMENTS */\\n        // I like to store my arguments as constants, so I need some regular variables for validating the arguments\\n        // before assignment\\n        let argument;\\n        let isArgumentValid;\\n        // arg[0] - Target Server //\\n        // This is the server we want to hack. We can hack any server in the game, but only if our skill is high enough\\n        // and we have root access.\\n        [isArgumentValid, argument] = Argument.validateString(ns.args[0]);\\n        if (!isArgumentValid) {\\n            ns.tprintf(\\\"Error: arg[0] is invalid. Expected a string, but got %s\\\", argument);\\n            argumentError();\\n        }\\n        const ARGUMENT = argument;\\n    }\\n    // Run the function or it's useless\\n    await batch();\\n}\",\"filename\":\"/js/hack/batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"f96ec42f8849944c3eb2adc1f9cb58c794bf85cc4e442770580ed2d0eb39769f\",\"moduleSequenceNumber\":103067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"mirage\",\"gremlin\",\"fear\",\"swig\",\"boomer\",\"leper\",\"crave\",\"vexed\",\"poleman\",\"wool\",\"orca\",\"sunburst\",\"chronic-noir\",\"alderman\",\"nugget\",\"treacher\",\"xion\",\"halogenic\",\"blood-rain\",\"gaucho\",\"bleach\",\"yarrow\",\"rector\",\"bellend\",\"horseboi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nhome\\n\\nDepth 1: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\n\\nDepth 2: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 3: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 4: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 5: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 6: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 7: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 8: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 9: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 10: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 11: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 12: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 13: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 14: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 15: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 16: \\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"home\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/host-info.txt\",\"text\":\"n00dles true 1 2 0 4 1 1750000 Noodle Bar \\nfoodnstuff true 1 2 0 16 1 50000000 FoodNStuff \\nsigma-cosmetics true 5 2 0 16 1 57500000 Sigma Cosmetics \\njoesguns true 10 2 0 16 1 62500000 Joe's Guns \\nhong-fang-tea true 30 2 0 16 1 75000000 HongFang Teahouse \\nharakiri-sushi true 40 2 0 16 1 100000000 HaraKiri Sushi Bar Network \\niron-gym true 100 2 1 32 1 500000000 Iron Gym Network \\ndarkweb true 1 5 5 1 1 0  \\nzer0 true 75 2 1 32 1 187500000 ZER0 Nightclub \\nnectar-net true 20 2 0 16 1 68750000 Nectar Nightclub Network \\nmax-hardware true 80 2 1 32 1 250000000 Max Hardware Store \\nCSEC true 55 2 1 8 1 0 CyberSec \\nneo-net true 50 2 1 32 1 125000000 Neo Nightclub Network \\nomega-net true 203 2 2 32 1 1725027550 Omega Software \\nphantasy true 100 2 2 32 1 600000000 Phantasy Club \\nsilver-helix true 150 2 2 64 1 1125000000 Silver Helix \\ncomptek true 308 3 3 0 1 5921159925 CompuTek \\njohnson-ortho true 253 2 2 0 1 1773378850 Johnson Orthopedics \\ncrush-fitness true 228 2 2 0 1 1277282200 Crush Fitness \\navmnite-02h true 207 2 2 128 1 0 NiteSec \\nthe-hub true 280 2 2 16 1 4292332975 The Hub \\nnetlink false 400 2 3 128 1 6875000000 NetLink Technologies \\nzb-institute false 775 2 5 32 1 23244015000 ZB Institute of Technology \\nsyscore false 646 2 4 0 1 10603677000 SysCore Securities \\nrothman-uni false 428 2 3 32 1 5667728575 Rothman University \\nI.I.I.I true 359 3 3 128 1 0 I.I.I.I \\nsummit-uni false 460 2 3 32 1 6772602600 Summit University \\ncatalyst false 432 2 3 32 1 7804752225 Catalyst Ventures \\nrho-construction false 501 2 3 16 1 16042287425 Rho Construction \\nalpha-ent false 572 2 4 64 1 16965052725 Alpha Enterprises \\naevum-police false 430 2 4 16 1 9370666600 Aevum Police Headquarters \\nmillenium-fitness false 516 2 3 128 1 6250000000 Millenium Fitness Network \\nlexo-corp false 671 2 4 32 1 19367172725 LexoCorp \\nglobal-pharm false 821 2 4 64 1 40180293800 Global Pharmaceuticals \\nsnap-fitness false 686 2 4 0 1 11250000000 Snap Fitness \\naerocorp false 880 2 5 0 1 26175673075 AeroCorp \\ngalactic-cyber false 844 2 5 0 1 20250430550 Galactic Cybersystems \\nomnia false 858 2 5 32 1 22535684725 Omnia Cybersystems \\ndeltaone false 842 2 5 0 1 37108008900 DeltaOne \\nunitalife false 781 2 4 64 1 27234884075 UnitaLife Group \\ndefcomm false 1015 2 5 0 1 20255939625 DefComm \\nuniv-energy false 856 2 4 128 1 29637468225 Universal Energy \\nicarus false 894 2 5 0 1 23881357500 Icarus Microsystems \\nsolaris false 850 2 5 128 1 17594014100 Solaris Space Systems \\nzeus-med false 820 2 5 0 1 36792590450 Zeus Medical \\ninfocomm false 909 2 5 0 1 17300085475 InfoComm \\ntaiyang-digital false 927 2 5 0 1 22181142750 Taiyang Digital \\nnova-med false 850 2 4 0 1 30841003600 Nova Medical \\nzb-def false 794 2 4 0 1 24040380050 ZB Defense Industries \\nmicrodyne false 846 2 5 16 1 14407722850 Microdyne Technologies \\napplied-energetics false 815 2 4 0 1 19183661800 Applied Energetics \\ntitan-labs false 871 2 5 32 1 20598087000 Titan Laboratories \\nrun4theh111z false 505 2 4 32 1 0 The Runners \\nfulcrumtech false 1248 2 5 2048 1 41442088875 Fulcrum Technologies \\nhelios false 853 2 5 64 1 14047078750 Helios Labs \\nstormtech false 921 2 5 0 1 25831516150 Storm Technologies \\nvitalife false 879 2 5 32 1 19936569575 VitaLife \\nomnitek false 1035 2 5 256 1 480402085925 OmniTek Incorporated \\n. false 515 2 4 16 1 0 . \\n4sigma false 1004 2 5 0 1 427979239250 Four Sigma \\nkuai-gong false 1110 2 5 0 1 745474615525 KuaiGong International \\nblade false 1163 2 5 32 1 905227932925 Blade Industries \\nnwo false 1269 2 5 0 1 915377477025 NWO \\npowerhouse-fitness false 958 2 5 32 1 22500000000 Powerhouse Fitness \\nclarkinc false 982 2 5 0 1 415519413750 Clarke Incorporated \\nb-and-a false 984 2 5 0 1 516065127125 Bachman & Associates \\nmegacorp false 1289 2 5 0 1 1357074598575 MegaCorp \\nThe-Cave false 925 2 5 0 1 0 Helios \\necorp false 1131 2 5 0 1 1336003506975 ECorp \\nfulcrumassets false 1331 2 5 0 1 25000000 Fulcrum Technologies \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/rooted-hosts.txt\",\"text\":\"homen00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nI.I.I.I\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawled-contracts.txt\",\"text\":\"contract-803169.cct n00dles\\ncontract-111307.cct sigma-cosmetics\\ncontract-323134.cct sigma-cosmetics\\ncontract-10596-Aevum.cct hong-fang-tea\\ncontract-991025.cct hong-fang-tea\\ncontract-249256.cct iron-gym\\ncontract-743332.cct darkweb\\ncontract-772315.cct zer0\\ncontract-41130.cct max-hardware\\ncontract-51303.cct max-hardware\\ncontract-719591.cct max-hardware\\ncontract-117213.cct CSEC\\ncontract-310184.cct CSEC\\ncontract-74014.cct omega-net\\ncontract-92126.cct omega-net\\ncontract-321308.cct phantasy\\ncontract-349457.cct phantasy\\ncontract-449621-NoodleBar.cct phantasy\\ncontract-304596-Sector-12.cct comptek\\ncontract-471384.cct johnson-ortho\\ncontract-362537.cct crush-fitness\\ncontract-656264.cct crush-fitness\\ncontract-781712-FulcrumTechnologies.cct crush-fitness\\ncontract-76478.cct avmnite-02h\\ncontract-111165.cct the-hub\\ncontract-89437.cct the-hub\\ncontract-543730.cct netlink\\ncontract-877276.cct netlink\\ncontract-750735.cct zb-institute\\ncontract-331223.cct syscore\\ncontract-463386-NoodleBar.cct syscore\\ncontract-919447.cct syscore\\ncontract-829954.cct I.I.I.I\\ncontract-272527.cct summit-uni\\ncontract-371074.cct catalyst\\ncontract-404649-TianDiHui.cct catalyst\\ncontract-670526.cct catalyst\\ncontract-248239.cct rho-construction\\ncontract-253997.cct rho-construction\\ncontract-539162-Netburners.cct rho-construction\\ncontract-21815-NoodleBar.cct alpha-ent\\ncontract-969792-NoodleBar.cct alpha-ent\\ncontract-895213.cct aevum-police\\ncontract-12981.cct lexo-corp\\ncontract-278002.cct lexo-corp\\ncontract-7883-NoodleBar.cct global-pharm\\ncontract-879145.cct global-pharm\\ncontract-994101.cct snap-fitness\\ncontract-336578-FulcrumTechnologies.cct aerocorp\\ncontract-656350.cct aerocorp\\ncontract-145419.cct galactic-cyber\\ncontract-616616.cct omnia\\ncontract-811498.cct omnia\\ncontract-304771-CyberSec.cct deltaone\\ncontract-348641.cct defcomm\\ncontract-388998-WatchdogSecurity.cct defcomm\\ncontract-416282.cct defcomm\\ncontract-897349-ECorp.cct defcomm\\ncontract-852946-WatchdogSecurity.cct univ-energy\\ncontract-885827.cct icarus\\ncontract-668898-Sector-12.cct solaris\\ncontract-441478.cct zeus-med\\ncontract-383266.cct infocomm\\ncontract-932951.cct infocomm\\ncontract-980667.cct infocomm\\ncontract-231125.cct taiyang-digital\\ncontract-259391.cct taiyang-digital\\ncontract-677611.cct taiyang-digital\\ncontract-702378-Netburners.cct taiyang-digital\\ncontract-193440.cct nova-med\\ncontract-954550.cct nova-med\\ncontract-528929-FulcrumTechnologies.cct zb-def\\ncontract-647473-Sector-12.cct zb-def\\ncontract-552418.cct microdyne\\ncontract-876791.cct microdyne\\ncontract-73452-WatchdogSecurity.cct applied-energetics\\ncontract-543533.cct titan-labs\\ncontract-615087.cct run4theh111z\\ncontract-231313-FulcrumTechnologies.cct stormtech\\ncontract-827052-NoodleBar.cct vitalife\\ncontract-197219.cct omnitek\\ncontract-263725.cct .\\ncontract-390126.cct .\\ncontract-617071-Sector-12.cct .\\ncontract-171951.cct 4sigma\\ncontract-772947-WatchdogSecurity.cct kuai-gong\\ncontract-851838.cct kuai-gong\\ncontract-285308-WatchdogSecurity.cct blade\\ncontract-181734.cct nwo\\ncontract-388884.cct nwo\\ncontract-407682-Aevum.cct nwo\\ncontract-498174-WatchdogSecurity.cct nwo\\ncontract-68967.cct nwo\\ncontract-968044-NoodleBar.cct powerhouse-fitness\\ncontract-805978-Sector-12.cct clarkinc\\ncontract-755835-NoodleBar.cct b-and-a\\ncontract-38937-TianDiHui.cct megacorp\\ncontract-556626-ECorp.cct megacorp\\ncontract-566891.cct The-Cave\\ncontract-701822.cct The-Cave\\ncontract-12592-Sector-12.cct ecorp\\ncontract-795271-Sector-12.cct fulcrumassets\\ncontract-922902.cct fulcrumassets\\ncontract-930298-WatchdogSecurity.cct fulcrumassets\\ncontract-997517-CyberSec.cct fulcrumassets\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/stocks/STONKS.txt\",\"text\":\"CTYS\\nSGC\\nNTLK\\nGPH\\nNVMD\\nFLCM\\nSLRS\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.505999999999979,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-12592-Sector-12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"19846107\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"22.2.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":53440140279,\"moneyMax\":1336003506975,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1131,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-38937-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[154,2,146,82,178,122,119,120,60,142,145,2,96,127]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-556626-ECorp.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[132,164,86,165,175,39,156,118,128,8,199,126,32,105,49,177],\"reward\":{\"name\":\"ECorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"22.5.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":54282983943,\"moneyMax\":1357074598575,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1289,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-755835-NoodleBar.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[38,63,107,14,131,52,60,28,128,1,144],\"reward\":{\"name\":\"Noodle Bar\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"68.4.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":20642605085,\"moneyMax\":516065127125,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":984,\"serverGrowth\":64}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-285308-WatchdogSecurity.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[164,199,110,25,6,28,171,1,60,122,113,159,121,103],\"reward\":{\"name\":\"Watchdog Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"62.4.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":36209117317,\"moneyMax\":905227932925,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1163,\"serverGrowth\":72}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-68967.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,9,0,0],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-498174-WatchdogSecurity.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[5,8],[4,7],[15,18],[16,17],[19,29],[25,32],[11,15],[17,19],[16,22]],\"reward\":{\"name\":\"Watchdog Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-181734.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,0,0,8,0,4,4,4,0,0,7,8,10,4,0,4,10,0,3,4,9,3,10],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-388884.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[16,13,99,118,164,46,19,147,51,192,20,7,170,8,89]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-407682-Aevum.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"917100221\",\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"79.4.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":36615099081,\"moneyMax\":915377477025,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1269,\"serverGrowth\":95}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-805978-Sector-12.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[6,6],[7,6,1],[4,1,5,1],[8,9,4,6,5],[4,1,1,1,9,8],[5,9,1,1,8,9,7],[8,8,3,7,6,1,3,9]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"79.0.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":16620776550,\"moneyMax\":415519413750,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":982,\"serverGrowth\":49}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-197219.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"229608716\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"89.3.9.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":19216083437,\"moneyMax\":480402085925,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1035,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-171951.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1731548200\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"45.6.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":17119169570,\"moneyMax\":427979239250,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1004,\"serverGrowth\":95}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-851838.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[82,133,147,152,79,130,77,160,105,11,71,178,31,1,144,56,39,30,178,107,78,56,58,176,174,80,103,60,17,64,58,73,152],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-772947-WatchdogSecurity.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[1,6],[4,8,3],[6,4,2,5],[6,2,4,8,2],[8,5,8,4,3,8],[9,9,8,5,7,9,6],[7,4,5,1,9,8,2,3]],\"reward\":{\"name\":\"Watchdog Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"71.1.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":29818984621,\"moneyMax\":745474615525,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1110,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"9.3.1.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1657683555,\"moneyMax\":41442088875,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1248,\"serverGrowth\":90}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-997517-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,11],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-795271-Sector-12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,0],[0,1],[1,1],[0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-922902.cct\",\"type\":\"Total Ways to Sum\",\"data\":83,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-930298-WatchdogSecurity.cct\",\"type\":\"Total Ways to Sum\",\"data\":10,\"reward\":{\"name\":\"Watchdog Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"59.1.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1331,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-231313-FulcrumTechnologies.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[8,1],[4,9,8],[1,9,8,6],[9,3,5,5,1],[7,2,1,4,7,6],[8,4,7,1,8,3,7],[3,2,5,2,8,8,3,2],[7,7,6,4,1,4,7,7,9]],\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"68.4.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1033260646,\"moneyMax\":25831516150,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":921,\"serverGrowth\":68}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-388998-WatchdogSecurity.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"21824021583\",\"reward\":{\"name\":\"Watchdog Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-897349-ECorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":99,\"reward\":{\"name\":\"ECorp\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-416282.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[102,73,36,94,143,114,149,53,50,200,171,67,64,17,3,14,41,2,52,3,30,87,87,83,67,108,146,141,198,105,87,27,24,188,124,52,16,164,15,123,127]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-348641.cct\",\"type\":\"Total Ways to Sum\",\"data\":33,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"1.6.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":810237585,\"moneyMax\":20255939625,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1015,\"serverGrowth\":60}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-980667.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[25,126,37,170,153,167,41,100,145,183,197,137,173,74,26,43,126,86,102,154,134,131,69,12,20,123,126,40,148,107,135,140,112,193,38,9,144,77,70,118,26,117,65,71],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-932951.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[77,156,122],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-383266.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[31,153,141,111,191,108,20,24,77,109,89,74,103,167,18,153,83,171,179,133,193,60,97,10,114,9,120,39,161,81,133,139,154],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"85.5.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":692003419,\"moneyMax\":17300085475,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":909,\"serverGrowth\":53}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"23.3.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":561883150,\"moneyMax\":14047078750,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":853,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-827052-NoodleBar.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[17,35,25,119,131,128],\"reward\":{\"name\":\"Noodle Bar\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"61.4.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":797462783,\"moneyMax\":19936569575,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":879,\"serverGrowth\":60}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-885827.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-404900-ECorp.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,12],\"reward\":{\"name\":\"ECorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"33.7.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":955254300,\"moneyMax\":23881357500,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":894,\"serverGrowth\":86}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-852946-WatchdogSecurity.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,4],\"reward\":{\"name\":\"Watchdog Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"62.1.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1185498729,\"moneyMax\":29637468225,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":856,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-543533.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,1,0,0,0,0,0,0],[0,0,0,0,0,1,1,0,0,0,0,0],[0,1,0,0,1,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,1,0,0,0],[0,0,0,0,1,0,1,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"17.0.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":823923480,\"moneyMax\":20598087000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":871,\"serverGrowth\":75}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-876791.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[132,155,156,6,61,96,87,19,37,49,156,163,29,134,198,56,9,26,120,111,102,164,124,16,162,179,101,191,61,129,53,10,3,52,102,11,162],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-552418.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"509843\",-39],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"19.6.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":576308914,\"moneyMax\":14407722850,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":846,\"serverGrowth\":70}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-677611.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[8,1],[1,2,4],[2,1,9,9],[2,9,8,4,3],[5,2,4,9,1,6],[9,2,2,1,3,3,9],[8,1,4,6,7,2,7,6],[9,2,7,2,5,2,5,8,3]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-702378-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,0,1,0],[0,0,0,0],[0,1,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-259391.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":578006110,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-231125.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()(a))((((a(())\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-406335.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[9,15,22,25,49,4],[13,16,27,15,3,19],[5,28,11,40,28,32],[16,1,30,6,37,5],[33,2,29,25,3,42],[50,36,16,39,18,27],[18,10,25,43,42,41],[1,39,33,9,36,3],[11,26,26,50,16,36],[9,23,49,1,20,24],[8,24,11,24,47,6],[30,40,38,17,16,21],[6,1,37,4,18,46]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"22.1.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":887245710,\"moneyMax\":22181142750,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":927,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-145419.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[2,5],[6,3,2],[3,9,9,6],[6,8,8,7,9],[5,6,7,9,3,9],[4,1,1,1,8,2,7],[8,3,1,9,3,2,5,9],[6,1,3,6,4,9,5,9,1],[2,9,3,4,2,7,9,9,6,6],[8,5,2,6,4,2,3,4,8,6,8]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"18.9.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":810017222,\"moneyMax\":20250430550,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":844,\"serverGrowth\":77}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-656350.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"21612125116\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-336578-FulcrumTechnologies.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[149,1,88,71,97,17,26,35,163,50,74,133,166,45,113,126,86,188,35,95,129,57,38,6,115,182,86,168,137,58,142,91,123,18,118,25,57,182,41,68,146,175,146,71,173,164,115],\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"20.2.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1047026923,\"moneyMax\":26175673075,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":880,\"serverGrowth\":65}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-616616.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"3612\",-95],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-811498.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a()(()\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"24.1.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":901427389,\"moneyMax\":22535684725,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":858,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-647473-Sector-12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,1,1,0,0,0,0,0],[1,0,0,0,0,1,1,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":1,\"fn\":\"contract-528929-FulcrumTechnologies.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[12,187,117,195,168,66,157,17,175,102],\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"33.0.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":961615202,\"moneyMax\":24040380050,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":794,\"serverGrowth\":75}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-73452-WatchdogSecurity.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1142117148\",\"reward\":{\"name\":\"Watchdog Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"0.4.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":767346472,\"moneyMax\":19183661800,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":815,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-668898-Sector-12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0,0,0,0,0],[1,0,1,1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"52.3.7.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":703760564,\"moneyMax\":17594014100,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":850,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-304771-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[88,21,99,27,37,66,147,127,56,52,85,155,100,11,48,111,86,142,34,94,80,50,109,24,128,143,77,100,3,180,155,57,190,59,84,130,127,62,20],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"34.4.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1484320356,\"moneyMax\":37108008900,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":842,\"serverGrowth\":58}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-7883-NoodleBar.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[25,30],[14,23],[23,30],[10,14],[1,8],[9,10],[4,13],[8,17]],\"reward\":{\"name\":\"Noodle Bar\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-879145.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[8,6],[3,3,8],[1,3,3,7],[4,9,8,8,2],[3,9,8,6,8,1],[2,7,4,7,2,4,7],[6,5,3,9,7,1,4,3],[5,5,9,4,6,7,1,2,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"60.4.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1607211752,\"moneyMax\":40180293800,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":821,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-193440.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[141,9,183,13,26,165,186,6,39,5,61,33,28,149,97,153,145,107,55,36,143,36,132,77,165,132,140,89,63,115,154,158,161,141,121,121,101,199,169,153,47,154,182,39,83,98],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-954550.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,13],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"64.0.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1233640144,\"moneyMax\":30841003600,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":850,\"serverGrowth\":84}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-441478.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"776494\",-23],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"77.1.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1471703618,\"moneyMax\":36792590450,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":820,\"serverGrowth\":71}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"89.7.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1089395363,\"moneyMax\":27234884075,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":781,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-278002.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1122520165\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-12981.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":540109247,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"2.8.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":774686909,\"moneyMax\":19367172725,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":671,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-253997.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"11584250\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-539162-Netburners.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[1,9],[1,8,5],[8,5,9,1]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-248239.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,-5,-7,-4,-1,-9,-5,-2,0,10,8,4,5,8,6,5,-7,5,8,-3,6],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"21.2.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":641691497,\"moneyMax\":16042287425,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":501,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-969792-NoodleBar.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")a())aa)a(a\",\"reward\":{\"name\":\"Noodle Bar\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-21815-NoodleBar.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[23,38,22],[4,4,44]],\"reward\":{\"name\":\"Noodle Bar\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"83.1.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":678602109,\"moneyMax\":16965052725,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":572,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895213.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[19,22],[4,11],[15,21],[8,16],[1,9],[20,29],[19,21],[5,12],[1,6],[25,29],[24,25],[16,24],[8,12],[9,11],[21,23],[19,28],[10,19],[21,30]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"23.1.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":374826664,\"moneyMax\":9370666600,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":430,\"serverGrowth\":37}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"29.2.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":226709143,\"moneyMax\":5667728575,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":428,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-750735.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[186,100,86,199,44,123,91,12,175,17,98,157,80,136,112,107,81,11,143,153,180,77,200,37,192,103,116,97,99,82,127,123,115,156,24,107,82,69],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-783399.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,5,4,8,5,0,0,1,0,10,3,0,3,10,1,0,5,0],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"84.9.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"rho-construction\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":929760600,\"moneyMax\":23244015000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":775,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-272527.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[11,18],[20,23],[18,21],[3,9],[19,27],[8,14],[7,13],[10,11]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"60.6.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":270904104,\"moneyMax\":6772602600,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":460,\"serverGrowth\":48}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-331223.cct\",\"type\":\"Total Ways to Sum\",\"data\":61,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-919447.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())aa()(a(\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-463386-NoodleBar.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[3,5],[6,3,7],[6,3,4,8],[6,7,6,8,1],[6,8,3,5,9,2],[3,8,7,2,4,5,7]],\"reward\":{\"name\":\"Noodle Bar\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"44.4.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":424147080,\"moneyMax\":10603677000,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":646,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-404649-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[93,42,15,28,163,158,177,81,22,109,42,23,126,144,93,27,43,134,185,192,20],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-371074.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[96,138,4,140,7,189,186,135,83,9,30,156,92,51,170,87,46,15,61,26,129,186,22,154,113,161,43,6,48,175,83,187,90,115,71,191,155,159,112,130,165,174,20,26,27,56,56],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-670526.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[5,37,44,14,7,23,7,24,49,25],[33,13,32,13,29,11,22,31,39,10],[24,35,26,50,33,30,38,28,21,10],[14,22,5,42,15,46,27,2,17,22],[45,21,28,19,41,35,39,30,7,45],[18,27,23,27,32,10,47,30,6,9],[11,38,3,40,45,6,32,7,37,7],[41,46,40,4,22,49,25,50,9,13],[42,40,18,27,15,34,15,34,18,10],[13,32,44,26,14,11,8,30,31,44],[50,3,37,9,28,32,4,21,39,7]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"30.6.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":312190089,\"moneyMax\":7804752225,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":432,\"serverGrowth\":44}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-89437.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[64,67,27,36,107,154,46,190,94,135,129,171,95,169,60,176,88,107,74,171,91,128,141,110,147,63,181,154,153,195,47,15,172,145,24]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-111165.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[66,42,64,193,148,169,192,133,114,185,41,12,170],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"89.0.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15.072000000000003,\"minDifficulty\":15,\"moneyAvailable\":18.1971685108221,\"moneyMax\":4292332975,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":280,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-304596-Sector-12.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[3,11],[24,32],[12,20],[1,10]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"38.7.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":19.036,\"minDifficulty\":19,\"moneyAvailable\":9.045248113591091,\"moneyMax\":5921159925,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":308,\"serverGrowth\":53}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-543730.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":958486565,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-877276.cct\",\"type\":\"Total Ways to Sum\",\"data\":89,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"44.7.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":400,\"serverGrowth\":47}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-471384.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"805609972\",30],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"94.0.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15.69800000000004,\"minDifficulty\":15,\"moneyAvailable\":219105232.7805912,\"moneyMax\":1773378850,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":253,\"serverGrowth\":59}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-803169.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2201279621\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"4.4.3.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":2.116,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"17.5.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.90399999999998,\"minDifficulty\":3,\"moneyAvailable\":6916640.834864524,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-111307.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[6,8,29,35,31,1,12,3],[43,18,12,44,36,17,34,34],[48,12,41,21,21,46,15,34],[28,12,22,24,32,19,21,43],[14,24,39,24,48,17,30,6],[10,35,11,36,24,37,45,24],[46,4,50,33,47,3,48,19],[39,30,33,25,9,33,41,48],[37,41,22,46,38,33,6,34],[2,24,6,30,50,29,11,31],[37,44,14,11,18,17,49,44],[28,40,19,38,39,36,39,10],[4,50,16,47,41,21,14,31],[32,44,26,17,27,44,41,9]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-323134.cct\",\"type\":\"Total Ways to Sum\",\"data\":18,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"4.0.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":4.2059999999999915,\"minDifficulty\":3,\"moneyAvailable\":7053090.595843182,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"7.0.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.065999999999998,\"minDifficulty\":5,\"moneyAvailable\":3698314.765159909,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-772315.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a)a)())(()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"95.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.126000000000005,\"minDifficulty\":8,\"moneyAvailable\":21212333.019369032,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"81.6.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.401999999999988,\"minDifficulty\":7,\"moneyAvailable\":7745832.998068877,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"62.2.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.036000000000001,\"minDifficulty\":8,\"moneyAvailable\":13220436.419291155,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"62.5.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":11.116000000000042,\"minDifficulty\":10,\"moneyAvailable\":115000716.61014661,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":1,\"fn\":\"contract-10596-Aevum.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[110,119,72,161,10,139,103,110,94,161,179,145,97,59,88,178,174,25,160,21,195,128,184,161,2,145,188,195,77,198,70,172,86,157,39,186,178,50,40,110],\"reward\":{\"name\":\"Aevum\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-991025.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[100,39,166,34,105,68,118,51,164,143,35,110,193,120,154,43,102,114,95,32,141,137,35,186,83,121,37,161,132,18,146,23,49,76,76,8,173,148,134,88,35,33,80,34,158,10,122,73,48,192]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"10.3.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.127999999999965,\"minDifficulty\":5,\"moneyAvailable\":7625296.120986264,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"60.1.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.893999999999976,\"minDifficulty\":5,\"moneyAvailable\":14114096.428294607,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-349457.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[38,132,15,82,98,57,139,14,141,132,10,120,51,77,147,156,185,116,115,25,39,167,115,94,119,188,156,124,143,39,27,99,79,7],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-321308.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":882870273,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-449621-NoodleBar.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[51,120,44,18,115,52,103,132,191,12,63,72,136,47,3,66,138,43,90,195,148,159,16,44,200,119,39,137,197,132,119,44],\"reward\":{\"name\":\"Noodle Bar\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"9.8.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":8.211999999999987,\"minDifficulty\":7,\"moneyAvailable\":64350036.54751638,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-719591.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"162883\",-34],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-51303.cct\",\"type\":\"Total Ways to Sum\",\"data\":60,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-41130.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[166,129,174,124,143,172,76,123,35],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"50.3.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.38799999999999,\"minDifficulty\":5,\"moneyAvailable\":35609924.51996323,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-92126.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,1,10,0,6,5,2,9,10,8,8,7,1,1,8,3,0,4,4,2,5,5,4,0,0],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-74014.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[5,2],[7,2,3],[3,4,9,8],[3,5,8,3,9],[7,3,1,3,3,1],[5,5,3,7,3,3,7],[3,8,5,8,6,5,2,3],[2,2,8,9,2,2,3,2,6],[3,4,9,7,7,7,3,6,3,3],[2,8,4,2,7,6,7,3,3,3,5]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"27.7.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":9.816000000000024,\"minDifficulty\":9,\"moneyAvailable\":231704854.0923179,\"moneyMax\":1725027550,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":203,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-362537.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"147137102253\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-656264.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[49,57,13,37],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-781712-FulcrumTechnologies.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,8],\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"65.9.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":13.700000000000026,\"minDifficulty\":13,\"moneyAvailable\":170969899.13265738,\"moneyMax\":1277282200,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":228,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-249256.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2029516574\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"36.7.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.126500000000048,\"minDifficulty\":10,\"moneyAvailable\":55124713.770429455,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"91.2.5.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":516,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-968044-NoodleBar.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[2,47,44,23,19,11],[23,18,5,42,23,46],[39,46,13,6,6,21],[26,19,21,38,38,31],[5,8,10,37,40,31],[21,30,3,16,44,11],[36,10,35,48,17,27],[40,49,20,3,21,7],[37,11,19,5,18,24],[7,2,48,14,18,37],[36,49,13,27,31,37]],\"reward\":{\"name\":\"Noodle Bar\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"13.6.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":958,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-994101.cct\",\"type\":\"Total Ways to Sum\",\"data\":37,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"41.0.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":686,\"serverGrowth\":52}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-615087.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[4,6],[6,7,2]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"35.9.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":505,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-829954.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1071650\",74],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"11.4.4.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":359,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-76478.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[6,92,63,184,197,156,37,98,7,120,4,116,143,57,199,78,148,108,125,116,190,73,99,148,112,122,191,91,164,159,100,185],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"76.7.4.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":207,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-263725.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":997481386,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-617071-Sector-12.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-6,10,7,-1,-5,-9,-2,-2,0,-10,2,-2,-2,1,6,-3,1,0,0],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-390126.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,1,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,0],[0,0,0,0,1,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"6.8.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":515,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-310184.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,-8,-9,-9,-6,3,1,-2,7,9,8,3,-1,-4,8,-2,-4,-5,-4,5,2],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-117213.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,2,2,0,0,10,0,0,6,0,7,7,2,4,3,6,2,1,3,1,0,8,0,10],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"83.0.9.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-701822.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[134,85,190,173,71,177,117,170,135,25,44],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-566891.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-3,8,1,-2,-6,8,6,-8,6,-10,0,1,-5,3,10,-1,8,-7,-2,-8,6,-3,10,-5,9,4,10,-8,8,3],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"67.2.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"84.9.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-743332.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[174,188,118,116,63,117,164,193,144,197,195,189,16,199,183,200,35,136,125,82,190,64,127,135,83,137,199,96,86,37,79,63,3,124,19,128],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"14.4.7.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.004,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"mirage\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"mirage\",\"httpPortOpen\":false,\"ip\":\"55.7.3.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":235.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11959,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.1089897842744,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.422999999999,\"onlineExpGained\":13230.525000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143565.00999947728,\"pid\":20,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[71431454,229,275,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":704.8899504568697,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.538,\"onlineExpGained\":6842.8499999999585,\"onlineMoneyMade\":71431454,\"onlineRunningTime\":143565.00999947728,\"pid\":22,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[27882851,191,76,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":613.2157584863759,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.563,\"onlineExpGained\":5901.000000000005,\"onlineMoneyMade\":27882851,\"onlineRunningTime\":143565.00999947728,\"pid\":23,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[23813555,148,170,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":597.02251580971,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.585,\"onlineExpGained\":5696.24999999998,\"onlineMoneyMade\":23813555,\"onlineRunningTime\":143565.00999947728,\"pid\":24,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5139,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8976.825000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25142.010000056456,\"pid\":633,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[39050322,126,168,66]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4334.849999999994,\"onlineMoneyMade\":39050322,\"onlineRunningTime\":25138.410000056443,\"pid\":3519,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[13329933,69,57,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3238.2000000000003,\"onlineMoneyMade\":13329933,\"onlineRunningTime\":24964.61000005581,\"pid\":3581,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[14631534,81,105,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3605.1749999999965,\"onlineMoneyMade\":14631534,\"onlineRunningTime\":24939.81000005572,\"pid\":3589,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4689,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4009,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[27303438,84,156,60]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3556.7999999999956,\"onlineMoneyMade\":27303438,\"onlineRunningTime\":21609.21000004349,\"pid\":7215,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[25015860,135,441,90]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6054.75,\"onlineMoneyMade\":25015860,\"onlineRunningTime\":21140.610000041816,\"pid\":7216,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[12304245,63,42,30]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2633.4,\"onlineMoneyMade\":12304245,\"onlineRunningTime\":19597.210000036197,\"pid\":7249,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"js/simpleHack.js\",3],\"dataMap\":{},\"filename\":\"/js/runOnKnownHosts.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7275,\"ramUsage\":2.95,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,48,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1014.3000000000003,\"onlineMoneyMade\":0,\"onlineRunningTime\":8981.009999997608,\"pid\":10429,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1527,0,510]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2955.1499999999814,\"onlineMoneyMade\":0,\"onlineRunningTime\":8114.809999994811,\"pid\":10445,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[5191218,1863,216,243]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7679.924999999897,\"onlineMoneyMade\":5191218,\"onlineRunningTime\":8034.609999994884,\"pid\":10453,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,741,240]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5886,\"onlineMoneyMade\":0,\"onlineRunningTime\":7612.209999995268,\"pid\":10542,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,633,123]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4536,\"onlineMoneyMade\":0,\"onlineRunningTime\":6124.809999996621,\"pid\":10557,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,339,48]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2902.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":3649.8099999988726,\"pid\":10573,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,234,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2025,\"onlineMoneyMade\":0,\"onlineRunningTime\":3649.8099999988726,\"pid\":10574,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"mirage\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"mirage\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"mirage\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"mirage\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":6107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"mirage\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"mirage\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"mirage\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"mirage\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nmirage\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"mirage\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"gremlin\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"gremlin\",\"httpPortOpen\":false,\"ip\":\"35.9.6.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":238.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11943,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.0368702795504,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.625,\"onlineExpGained\":13229.700000001345,\"onlineMoneyMade\":0,\"onlineRunningTime\":143563.00999947713,\"pid\":26,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[67466816,219,273,54]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":699.4298833867836,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.707999999999,\"onlineExpGained\":6760.199999999964,\"onlineMoneyMade\":67466816,\"onlineRunningTime\":143563.00999947713,\"pid\":28,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[25296292,172,80,22]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":585.237457821263,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.739,\"onlineExpGained\":5682.600000000004,\"onlineMoneyMade\":25296292,\"onlineRunningTime\":143563.00999947713,\"pid\":29,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[23706203,145,171,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":580.2317700546123,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.761,\"onlineExpGained\":5666.849999999979,\"onlineMoneyMade\":23706203,\"onlineRunningTime\":143563.00999947713,\"pid\":30,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5112,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25142.010000056456,\"pid\":619,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[32725458,105,162,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4129.649999999992,\"onlineMoneyMade\":32725458,\"onlineRunningTime\":25138.410000056443,\"pid\":3516,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[21615132,114,57,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3792.600000000002,\"onlineMoneyMade\":21615132,\"onlineRunningTime\":24977.410000055857,\"pid\":3577,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[13461234,75,102,48]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3505.9499999999966,\"onlineMoneyMade\":13461234,\"onlineRunningTime\":24939.81000005572,\"pid\":3588,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"js/simpleHack.js\",3],\"dataMap\":{},\"filename\":\"/js/runOnKnownHosts.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":40641.75,\"onlineMoneyMade\":27846897,\"onlineRunningTime\":23400.610000050125,\"pid\":3983,\"ramUsage\":2.95,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4689,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4015,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[15688404,5619,603,630]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22675.950000000495,\"onlineMoneyMade\":15688404,\"onlineRunningTime\":23400.610000050125,\"pid\":4016,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,672,126]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5985,\"onlineMoneyMade\":0,\"onlineRunningTime\":19557.01000003605,\"pid\":7256,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"js/simpleHack.js\",3],\"dataMap\":{},\"filename\":\"/js/runOnKnownHosts.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7276,\"ramUsage\":2.95,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1659,0,561]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3244.7249999999785,\"onlineMoneyMade\":0,\"onlineRunningTime\":8919.809999997386,\"pid\":10434,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[15549312,48,57,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1539.000000000001,\"onlineMoneyMade\":15549312,\"onlineRunningTime\":8644.209999996383,\"pid\":10439,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[5029821,1794,183,228]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7291.3499999999085,\"onlineMoneyMade\":5029821,\"onlineRunningTime\":7492.209999995377,\"pid\":10543,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,168,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1863,\"onlineMoneyMade\":0,\"onlineRunningTime\":7458.809999995407,\"pid\":10547,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,483,159]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3852,\"onlineMoneyMade\":0,\"onlineRunningTime\":4972.8099999976685,\"pid\":10569,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,9,3]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":244.79999999999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":3802.009999998734,\"pid\":10571,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,246,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1782,\"onlineMoneyMade\":0,\"onlineRunningTime\":2405.4100000000044,\"pid\":10580,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,222,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1912.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":2405.4100000000044,\"pid\":10581,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"gremlin\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"gremlin\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"gremlin\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"gremlin\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":6105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"gremlin\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"gremlin\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"gremlin\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"blob:file:///29765f3e-1964-4d3a-af3a-352c7c5a188a\"}],\"ramUsage\":3.45,\"server\":\"gremlin\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\ngremlin\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"gremlin\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"fear\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"fear\",\"httpPortOpen\":false,\"ip\":\"6.3.9.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":238.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11955,0,976]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.1112239091735,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.814,\"onlineExpGained\":13230.525000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143567.20999947743,\"pid\":32,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[74887480,241,274,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":711.2620960584107,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.931,\"onlineExpGained\":6951.149999999949,\"onlineMoneyMade\":74887480,\"onlineRunningTime\":143567.20999947743,\"pid\":35,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[27417429,186,81,23]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":594.532313661296,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.962,\"onlineExpGained\":5842.200000000009,\"onlineMoneyMade\":27417429,\"onlineRunningTime\":143567.20999947743,\"pid\":36,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[23877772,145,166,31]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":582.164630502136,\"offlineMoneyMade\":0,\"offlineRunningTime\":15591.988,\"onlineExpGained\":5663.174999999977,\"onlineMoneyMade\":23877772,\"onlineRunningTime\":143567.20999947743,\"pid\":37,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5100,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8976.825000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25140.61000005645,\"pid\":1503,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[31822188,102,156,78]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4086.8999999999937,\"onlineMoneyMade\":31822188,\"onlineRunningTime\":25138.210000056442,\"pid\":3522,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[19855305,105,57,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3691.8000000000015,\"onlineMoneyMade\":19855305,\"onlineRunningTime\":24981.01000005587,\"pid\":3571,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[15190047,84,99,48]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3605.1749999999965,\"onlineMoneyMade\":15190047,\"onlineRunningTime\":24978.41000005586,\"pid\":3574,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"js/simpleHack.js\",3],\"dataMap\":{},\"filename\":\"/js/runOnKnownHosts.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47570.85,\"onlineMoneyMade\":20973636,\"onlineRunningTime\":23400.610000050125,\"pid\":3984,\"ramUsage\":2.95,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4674,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4019,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[22096668,348,408,153]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9717.75,\"onlineMoneyMade\":22096668,\"onlineRunningTime\":22649.410000047275,\"pid\":7179,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[23360052,75,129,63]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3189.1499999999965,\"onlineMoneyMade\":23360052,\"onlineRunningTime\":19594.410000036187,\"pid\":7250,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,237,48]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3420,\"onlineMoneyMade\":0,\"onlineRunningTime\":19524.01000003593,\"pid\":7257,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"js/simpleHack.js\",3],\"dataMap\":{},\"filename\":\"/js/runOnKnownHosts.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7277,\"ramUsage\":2.95,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[5474766,27,18,15]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1096.1999999999998,\"onlineMoneyMade\":5474766,\"onlineRunningTime\":8135.609999994792,\"pid\":10441,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1515,0,513]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2962.574999999981,\"onlineMoneyMade\":0,\"onlineRunningTime\":8131.209999994796,\"pid\":10442,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[4765467,1731,201,228]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7140.3749999999145,\"onlineMoneyMade\":4765467,\"onlineRunningTime\":7473.0099999953945,\"pid\":10546,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[617685,3,36,15]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804.8250000000002,\"onlineMoneyMade\":617685,\"onlineRunningTime\":6795.609999996011,\"pid\":10550,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,594,198]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4752,\"onlineMoneyMade\":0,\"onlineRunningTime\":6125.20999999662,\"pid\":10556,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,390,78]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2808,\"onlineMoneyMade\":0,\"onlineRunningTime\":3797.4099999987384,\"pid\":10572,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,279,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2385,\"onlineMoneyMade\":0,\"onlineRunningTime\":2983.209999999479,\"pid\":10578,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"fear\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"fear\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"fear\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"fear\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":6104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"fear\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"fear\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"fear\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"fear\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nfear\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"fear\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"swig\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"swig\",\"httpPortOpen\":false,\"ip\":\"55.1.4.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":218.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11928,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.064998591138,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.029999999999,\"onlineExpGained\":13229.700000001345,\"onlineMoneyMade\":0,\"onlineRunningTime\":143563.00999947713,\"pid\":39,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[72904498,234,272,53]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":709.4962512207804,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.104000000001,\"onlineExpGained\":6888.449999999958,\"onlineMoneyMade\":72904498,\"onlineRunningTime\":143563.00999947713,\"pid\":41,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[27810154,191,76,22]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":617.0224437741354,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.133,\"onlineExpGained\":5896.8000000000075,\"onlineMoneyMade\":27810154,\"onlineRunningTime\":143563.00999947713,\"pid\":42,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[24473688,150,169,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":598.325907171803,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.158,\"onlineExpGained\":5725.649999999978,\"onlineMoneyMade\":24473688,\"onlineRunningTime\":143563.00999947713,\"pid\":43,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5118,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25142.010000056456,\"pid\":647,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[30126024,96,159,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4044.149999999995,\"onlineMoneyMade\":30126024,\"onlineRunningTime\":25142.010000056456,\"pid\":685,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[18310179,96,51,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3565.8000000000015,\"onlineMoneyMade\":18310179,\"onlineRunningTime\":25142.010000056456,\"pid\":689,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[12526041,69,105,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3472.8749999999973,\"onlineMoneyMade\":12526041,\"onlineRunningTime\":25142.010000056456,\"pid\":690,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4671,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4025,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[34448253,108,156,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3958.6499999999924,\"onlineMoneyMade\":34448253,\"onlineRunningTime\":23400.610000050125,\"pid\":4063,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[18156954,96,45,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3389.400000000001,\"onlineMoneyMade\":18156954,\"onlineRunningTime\":23400.610000050125,\"pid\":4067,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[17365554,96,93,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3572.0999999999963,\"onlineMoneyMade\":17365554,\"onlineRunningTime\":23400.610000050125,\"pid\":4068,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1761,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7302,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7304,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[8285748,27,63,30]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1470.6000000000008,\"onlineMoneyMade\":8285748,\"onlineRunningTime\":9607.009999999886,\"pid\":7340,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[26637498,144,162,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3253.5,\"onlineMoneyMade\":26637498,\"onlineRunningTime\":9607.009999999886,\"pid\":7341,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[5814636,30,18,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1272.5999999999997,\"onlineMoneyMade\":5814636,\"onlineRunningTime\":9607.009999999886,\"pid\":7344,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[3587208,18,42,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1267.875,\"onlineMoneyMade\":3587208,\"onlineRunningTime\":9607.009999999886,\"pid\":7345,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"swig\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"swig\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"swig\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"swig\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"swig\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"swig\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"swig\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"swig\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nswig\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"swig\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"boomer\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"boomer\",\"httpPortOpen\":false,\"ip\":\"55.2.4.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":261.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11917,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1337.9456928432166,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.2,\"onlineExpGained\":13228.875000001344,\"onlineMoneyMade\":0,\"onlineRunningTime\":143565.00999947728,\"pid\":45,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[73081721,234,279,48]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":705.661207593005,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.312000000002,\"onlineExpGained\":6908.399999999948,\"onlineMoneyMade\":73081721,\"onlineRunningTime\":143565.00999947728,\"pid\":50,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[26876078,182,80,25]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":591.8526900853054,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.341,\"onlineExpGained\":5804.400000000007,\"onlineMoneyMade\":26876078,\"onlineRunningTime\":143565.00999947728,\"pid\":51,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[25707305,157,170,34]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":592.1308424093041,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.359,\"onlineExpGained\":5817.524999999972,\"onlineMoneyMade\":25707305,\"onlineRunningTime\":143565.00999947728,\"pid\":52,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5124,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8976.825000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25140.41000005645,\"pid\":1768,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40740108,129,159,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4334.849999999992,\"onlineMoneyMade\":40740108,\"onlineRunningTime\":25140.41000005645,\"pid\":1806,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[14253642,75,60,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3313.8000000000015,\"onlineMoneyMade\":14253642,\"onlineRunningTime\":25140.41000005645,\"pid\":1810,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[13342671,72,105,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3505.949999999997,\"onlineMoneyMade\":13342671,\"onlineRunningTime\":25140.41000005645,\"pid\":1811,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4695,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4077,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2343,639]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17892,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4079,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[27924711,90,150,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3804.7499999999955,\"onlineMoneyMade\":27924711,\"onlineRunningTime\":23400.610000050125,\"pid\":4115,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[21062919,111,45,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3591.0000000000023,\"onlineMoneyMade\":21062919,\"onlineRunningTime\":23400.610000050125,\"pid\":4119,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[13983996,78,96,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3406.724999999997,\"onlineMoneyMade\":13983996,\"onlineRunningTime\":23400.610000050125,\"pid\":4120,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1767,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7353,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7355,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,867,141]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7560,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7357,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,558,60]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4635,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7359,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[14533335,45,66,27]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1650.150000000001,\"onlineMoneyMade\":14533335,\"onlineRunningTime\":9607.009999999886,\"pid\":7391,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[23958900,132,159,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3145.5,\"onlineMoneyMade\":23958900,\"onlineRunningTime\":9607.009999999886,\"pid\":7392,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[6406557,33,18,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1310.4,\"onlineMoneyMade\":6406557,\"onlineRunningTime\":9607.009999999886,\"pid\":7395,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[6307788,33,45,15]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1444.2749999999994,\"onlineMoneyMade\":6307788,\"onlineRunningTime\":9607.009999999886,\"pid\":7396,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"boomer\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"boomer\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"boomer\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"boomer\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"boomer\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"boomer\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"boomer\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"boomer\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nboomer\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"boomer\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"leper\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"leper\",\"httpPortOpen\":false,\"ip\":\"24.4.1.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":275.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11911,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.06187386908,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.396,\"onlineExpGained\":13229.700000001345,\"onlineMoneyMade\":0,\"onlineRunningTime\":143565.6099994773,\"pid\":54,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[71511439,231,278,52]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":712.7213453242593,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.508,\"onlineExpGained\":6877.04999999996,\"onlineMoneyMade\":71511439,\"onlineRunningTime\":143565.6099994773,\"pid\":58,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[25754389,178,77,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":598.1657110673431,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.529999999999,\"onlineExpGained\":5737.2000000000035,\"onlineMoneyMade\":25754389,\"onlineRunningTime\":143565.6099994773,\"pid\":59,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[21973547,134,167,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":566.6814388430854,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.548,\"onlineExpGained\":5530.874999999979,\"onlineMoneyMade\":21973547,\"onlineRunningTime\":143565.6099994773,\"pid\":60,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5136,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25141.410000056454,\"pid\":963,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[44315769,141,162,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4445.999999999991,\"onlineMoneyMade\":44315769,\"onlineRunningTime\":25141.410000056454,\"pid\":1001,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[17213736,93,57,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3553.2000000000016,\"onlineMoneyMade\":17213736,\"onlineRunningTime\":25141.410000056454,\"pid\":1005,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[13011456,72,102,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3494.924999999997,\"onlineMoneyMade\":13011456,\"onlineRunningTime\":25141.410000056454,\"pid\":1006,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4695,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4132,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[20524917,333,423,159]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9843.75,\"onlineMoneyMade\":20524917,\"onlineRunningTime\":23400.610000050125,\"pid\":4165,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[28753656,90,147,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3779.0999999999945,\"onlineMoneyMade\":28753656,\"onlineRunningTime\":23400.610000050125,\"pid\":4170,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[17637540,93,51,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3376.8000000000015,\"onlineMoneyMade\":17637540,\"onlineRunningTime\":23400.610000050125,\"pid\":4174,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[10766319,60,93,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3197.2499999999977,\"onlineMoneyMade\":10766319,\"onlineRunningTime\":23400.610000050125,\"pid\":4175,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1785,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7402,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6138414,2205,252,285]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9115.424999999846,\"onlineMoneyMade\":6138414,\"onlineRunningTime\":9607.009999999886,\"pid\":7403,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7404,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7405,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[9241662,141,174,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4118.625,\"onlineMoneyMade\":9241662,\"onlineRunningTime\":9607.009999999886,\"pid\":7435,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[12123387,39,72,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1615.950000000001,\"onlineMoneyMade\":12123387,\"onlineRunningTime\":9607.009999999886,\"pid\":7440,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[24779964,135,162,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3192.75,\"onlineMoneyMade\":24779964,\"onlineRunningTime\":9607.009999999886,\"pid\":7441,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[9506970,48,18,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1499.4000000000005,\"onlineMoneyMade\":9506970,\"onlineRunningTime\":9607.009999999886,\"pid\":7444,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[4466220,24,42,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1311.9749999999997,\"onlineMoneyMade\":4466220,\"onlineRunningTime\":9607.009999999886,\"pid\":7445,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"leper\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"leper\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"leper\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"leper\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"leper\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"leper\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"leper\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"leper\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nleper\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"leper\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"crave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"crave\",\"httpPortOpen\":false,\"ip\":\"77.9.9.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":238.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11925,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.0999773172032,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.583999999999,\"onlineExpGained\":13230.525000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143563.40999947715,\"pid\":62,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[63468564,205,277,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":688.9618858215966,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.676,\"onlineExpGained\":6657.599999999966,\"onlineMoneyMade\":63468564,\"onlineRunningTime\":143563.40999947715,\"pid\":66,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[22962343,156,77,23]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":561.5068815571984,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.698,\"onlineExpGained\":5476.800000000002,\"onlineMoneyMade\":22962343,\"onlineRunningTime\":143563.40999947715,\"pid\":67,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22308973,137,167,32]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":581.6115249642795,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.719,\"onlineExpGained\":5571.299999999982,\"onlineMoneyMade\":22308973,\"onlineRunningTime\":143563.40999947715,\"pid\":68,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5139,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25140.41000005645,\"pid\":1675,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[36332070,117,165,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4257.899999999993,\"onlineMoneyMade\":36332070,\"onlineRunningTime\":25138.210000056442,\"pid\":3525,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[17160351,90,57,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3490.2000000000016,\"onlineMoneyMade\":17160351,\"onlineRunningTime\":24975.81000005585,\"pid\":3578,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[11698800,66,102,48]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3406.724999999997,\"onlineMoneyMade\":11698800,\"onlineRunningTime\":24952.810000055768,\"pid\":3584,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"js/simpleHack.js\",3],\"dataMap\":{},\"filename\":\"/js/runOnKnownHosts.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":34817.85,\"onlineMoneyMade\":37330479,\"onlineRunningTime\":23400.610000050125,\"pid\":3988,\"ramUsage\":2.95,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4668,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4186,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[20947032,66,135,57]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3129.2999999999975,\"onlineMoneyMade\":20947032,\"onlineRunningTime\":19592.81000003618,\"pid\":7254,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"js/simpleHack.js\",3],\"dataMap\":{},\"filename\":\"/js/runOnKnownHosts.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1850.625,\"onlineMoneyMade\":2708025,\"onlineRunningTime\":9607.009999999886,\"pid\":7281,\"ramUsage\":2.95,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1398,0,471]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2729.924999999984,\"onlineMoneyMade\":0,\"onlineRunningTime\":7486.809999995382,\"pid\":10544,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[7765056,39,12,12]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1121.3999999999999,\"onlineMoneyMade\":7765056,\"onlineRunningTime\":6847.009999995964,\"pid\":10548,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[3788808,21,30,15]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":992.2500000000002,\"onlineMoneyMade\":3788808,\"onlineRunningTime\":6847.009999995964,\"pid\":10549,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,657,219]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5256,\"onlineMoneyMade\":0,\"onlineRunningTime\":6781.609999996023,\"pid\":10552,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,390,78]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2808,\"onlineMoneyMade\":0,\"onlineRunningTime\":3803.409999998733,\"pid\":10570,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,339,48]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2902.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":3648.8099999988735,\"pid\":10575,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1061925,21,198,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1788.75,\"onlineMoneyMade\":1061925,\"onlineRunningTime\":3480.6099999990265,\"pid\":10577,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,18,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":297,\"onlineMoneyMade\":0,\"onlineRunningTime\":2925.4099999995315,\"pid\":10579,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,15,6]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":252,\"onlineMoneyMade\":0,\"onlineRunningTime\":1053.0100000001023,\"pid\":10590,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"crave\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"crave\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"crave\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"crave\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":6106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"crave\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"crave\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"crave\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"crave\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\ncrave\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"crave\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"vexed\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vexed\",\"httpPortOpen\":false,\"ip\":\"37.1.3.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":261.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11941,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.18839489044,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.766000000001,\"onlineExpGained\":13230.525000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143566.4099994774,\"pid\":70,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[71218796,229,273,53]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":698.451356275638,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.853000000001,\"onlineExpGained\":6851.39999999995,\"onlineMoneyMade\":71218796,\"onlineRunningTime\":143566.4099994774,\"pid\":72,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[28684124,195,77,25]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":608.963161791992,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.896,\"onlineExpGained\":5955.600000000009,\"onlineMoneyMade\":28684124,\"onlineRunningTime\":143566.4099994774,\"pid\":74,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22947182,140,167,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":577.2812325293977,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.914999999999,\"onlineExpGained\":5611.7249999999785,\"onlineMoneyMade\":22947182,\"onlineRunningTime\":143566.4099994774,\"pid\":75,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5133,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25140.810000056452,\"pid\":1345,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[35900070,114,159,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4223.699999999993,\"onlineMoneyMade\":35900070,\"onlineRunningTime\":25140.810000056452,\"pid\":1383,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[15494292,81,54,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3389.400000000001,\"onlineMoneyMade\":15494292,\"onlineRunningTime\":25140.810000056452,\"pid\":1387,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[14647107,81,102,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3616.1999999999966,\"onlineMoneyMade\":14647107,\"onlineRunningTime\":25140.810000056452,\"pid\":1388,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4692,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4191,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[22666656,369,420,162]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10119.375,\"onlineMoneyMade\":22666656,\"onlineRunningTime\":23400.610000050125,\"pid\":4224,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[36745632,117,153,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4052.6999999999944,\"onlineMoneyMade\":36745632,\"onlineRunningTime\":23400.610000050125,\"pid\":4229,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[14295645,72,51,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3112.2000000000003,\"onlineMoneyMade\":14295645,\"onlineRunningTime\":23400.610000050125,\"pid\":4233,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[10557363,60,93,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3175.199999999997,\"onlineMoneyMade\":10557363,\"onlineRunningTime\":23400.610000050125,\"pid\":4234,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1776,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7454,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7456,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7457,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[9001197,135,174,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4071.375,\"onlineMoneyMade\":9001197,\"onlineRunningTime\":9607.009999999886,\"pid\":7487,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[9226452,30,63,30]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1521.9000000000005,\"onlineMoneyMade\":9226452,\"onlineRunningTime\":9607.009999999886,\"pid\":7492,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,213,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2376,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7493,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3578595,18,18,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1121.3999999999999,\"onlineMoneyMade\":3578595,\"onlineRunningTime\":9607.009999999886,\"pid\":7496,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[2257134,12,42,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1179.6749999999997,\"onlineMoneyMade\":2257134,\"onlineRunningTime\":9607.009999999886,\"pid\":7497,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vexed\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vexed\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vexed\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"vexed\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"vexed\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"vexed\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"vexed\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"vexed\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nvexed\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"vexed\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"poleman\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"poleman\",\"httpPortOpen\":false,\"ip\":\"90.4.4.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":261.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11922,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.013712847881,\"offlineMoneyMade\":0,\"offlineRunningTime\":15592.955,\"onlineExpGained\":13228.875000001344,\"onlineMoneyMade\":0,\"onlineRunningTime\":143563.80999947718,\"pid\":77,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[67122176,215,275,53]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":686.3737036462223,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.043,\"onlineExpGained\":6723.14999999996,\"onlineMoneyMade\":67122176,\"onlineRunningTime\":143563.80999947718,\"pid\":81,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[26071343,173,80,25]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":570.9851893606138,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.072,\"onlineExpGained\":5703.60000000001,\"onlineMoneyMade\":26071343,\"onlineRunningTime\":143563.80999947718,\"pid\":82,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[23192527,142,170,31]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":579.2500897651773,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.088,\"onlineExpGained\":5641.124999999983,\"onlineMoneyMade\":23192527,\"onlineRunningTime\":143563.80999947718,\"pid\":83,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5124,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8976.825000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25141.610000056455,\"pid\":884,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[33358053,108,159,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4129.649999999992,\"onlineMoneyMade\":33358053,\"onlineRunningTime\":25141.610000056455,\"pid\":922,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[15131277,81,57,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3389.400000000001,\"onlineMoneyMade\":15131277,\"onlineRunningTime\":25141.610000056455,\"pid\":926,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[15030048,84,105,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3660.2999999999965,\"onlineMoneyMade\":15030048,\"onlineRunningTime\":25141.610000056455,\"pid\":927,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4707,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4245,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2421,414]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17010,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4248,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[31839435,102,153,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3924.449999999994,\"onlineMoneyMade\":31839435,\"onlineRunningTime\":23400.610000050125,\"pid\":4283,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[15948057,81,48,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3213.0000000000014,\"onlineMoneyMade\":15948057,\"onlineRunningTime\":23400.610000050125,\"pid\":4287,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[10326783,57,90,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3131.099999999998,\"onlineMoneyMade\":10326783,\"onlineRunningTime\":23400.610000050125,\"pid\":4288,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1791,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7504,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7506,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7507,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[11276187,36,69,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1581.750000000001,\"onlineMoneyMade\":11276187,\"onlineRunningTime\":9607.009999999886,\"pid\":7542,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,213,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2376,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7543,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[16887927,66,96,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2241,\"onlineMoneyMade\":16887927,\"onlineRunningTime\":9607.009999999886,\"pid\":7544,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[4194873,21,21,15]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1159.2,\"onlineMoneyMade\":4194873,\"onlineRunningTime\":9607.009999999886,\"pid\":7546,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[4878570,27,42,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1345.0499999999995,\"onlineMoneyMade\":4878570,\"onlineRunningTime\":9607.009999999886,\"pid\":7547,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"poleman\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"poleman\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"poleman\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"poleman\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"poleman\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"poleman\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"poleman\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"poleman\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\npoleman\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"poleman\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"wool\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"wool\",\"httpPortOpen\":false,\"ip\":\"35.0.1.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":247,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11927,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.1335143448139,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.118999999999,\"onlineExpGained\":13229.700000001345,\"onlineMoneyMade\":0,\"onlineRunningTime\":143563.20999947714,\"pid\":85,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[70665503,227,279,47]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":706.300769025268,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.193000000001,\"onlineExpGained\":6837.1499999999605,\"onlineMoneyMade\":70665503,\"onlineRunningTime\":143563.20999947714,\"pid\":89,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[27528099,190,87,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":610.5382210010542,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.219000000001,\"onlineExpGained\":5922.00000000001,\"onlineMoneyMade\":27528099,\"onlineRunningTime\":143563.20999947714,\"pid\":90,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[24064962,146,171,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":573.7268407838772,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.234999999999,\"onlineExpGained\":5677.874999999976,\"onlineMoneyMade\":24064962,\"onlineRunningTime\":143563.20999947714,\"pid\":91,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5106,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8976.825000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25140.61000005645,\"pid\":1517,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[35648370,114,159,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4215.149999999992,\"onlineMoneyMade\":35648370,\"onlineRunningTime\":25140.61000005645,\"pid\":1555,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[15991380,87,57,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3465.0000000000014,\"onlineMoneyMade\":15991380,\"onlineRunningTime\":25140.61000005645,\"pid\":1559,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[13820769,78,102,48]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3572.0999999999967,\"onlineMoneyMade\":13820769,\"onlineRunningTime\":25140.61000005645,\"pid\":1560,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4719,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4299,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[25919754,81,147,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.5999999999954,\"onlineMoneyMade\":25919754,\"onlineRunningTime\":23400.610000050125,\"pid\":4337,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[17099325,90,51,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3339.0000000000014,\"onlineMoneyMade\":17099325,\"onlineRunningTime\":23400.610000050125,\"pid\":4341,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[12542667,69,96,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3285.4499999999975,\"onlineMoneyMade\":12542667,\"onlineRunningTime\":23400.610000050125,\"pid\":4342,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1809,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7553,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7555,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7556,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,870,141]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7582.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7557,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[12292257,39,63,30]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1573.200000000001,\"onlineMoneyMade\":12292257,\"onlineRunningTime\":9607.009999999886,\"pid\":7591,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[14966661,60,93,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2187,\"onlineMoneyMade\":14966661,\"onlineRunningTime\":9607.009999999886,\"pid\":7593,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[7227315,36,21,15]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1348.1999999999998,\"onlineMoneyMade\":7227315,\"onlineRunningTime\":9607.009999999886,\"pid\":7595,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[4322742,24,42,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1311.9749999999997,\"onlineMoneyMade\":4322742,\"onlineRunningTime\":9607.009999999886,\"pid\":7596,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"wool\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"wool\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"wool\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"wool\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"wool\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"wool\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"wool\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"wool\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nwool\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"wool\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"orca\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"orca\",\"httpPortOpen\":false,\"ip\":\"44.1.2.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":275.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11913,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.0412405337306,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.277,\"onlineExpGained\":13228.875000001344,\"onlineMoneyMade\":0,\"onlineRunningTime\":143563.40999947715,\"pid\":93,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[69063189,223,277,50]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":701.9161739584864,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.367,\"onlineExpGained\":6788.699999999961,\"onlineMoneyMade\":69063189,\"onlineRunningTime\":143563.40999947715,\"pid\":97,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[26713088,181,82,23]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":595.8945974384233,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.394,\"onlineExpGained\":5796.000000000008,\"onlineMoneyMade\":26713088,\"onlineRunningTime\":143563.40999947715,\"pid\":98,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22177177,135,175,31]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":563.2467569506748,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.411,\"onlineExpGained\":5578.649999999981,\"onlineMoneyMade\":22177177,\"onlineRunningTime\":143563.40999947715,\"pid\":99,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5121,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25140.01000005645,\"pid\":2003,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40816176,129,159,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4334.849999999991,\"onlineMoneyMade\":40816176,\"onlineRunningTime\":25140.01000005645,\"pid\":2041,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[19899468,105,51,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3679.200000000001,\"onlineMoneyMade\":19899468,\"onlineRunningTime\":25140.01000005645,\"pid\":2045,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[16661040,93,96,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3704.399999999996,\"onlineMoneyMade\":16661040,\"onlineRunningTime\":25140.01000005645,\"pid\":2046,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4716,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4352,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2343,639]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17892,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4354,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[25004418,81,147,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3710.6999999999944,\"onlineMoneyMade\":25004418,\"onlineRunningTime\":23400.610000050125,\"pid\":4390,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[12245316,63,45,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2986.2000000000003,\"onlineMoneyMade\":12245316,\"onlineRunningTime\":23400.610000050125,\"pid\":4394,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[12559947,69,96,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3307.4999999999973,\"onlineMoneyMade\":12559947,\"onlineRunningTime\":23400.610000050125,\"pid\":4395,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1782,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7601,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7603,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7604,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,354,57]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4315.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7638,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[9454221,30,60,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1487.7000000000007,\"onlineMoneyMade\":9454221,\"onlineRunningTime\":9607.009999999886,\"pid\":7639,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[20556279,117,162,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3051,\"onlineMoneyMade\":20556279,\"onlineRunningTime\":9607.009999999886,\"pid\":7640,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17303826,69,90,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2259,\"onlineMoneyMade\":17303826,\"onlineRunningTime\":9607.009999999886,\"pid\":7641,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[5518767,27,24,12]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1247.3999999999999,\"onlineMoneyMade\":5518767,\"onlineRunningTime\":9607.009999999886,\"pid\":7643,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[2148399,12,42,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1179.6749999999997,\"onlineMoneyMade\":2148399,\"onlineRunningTime\":9607.009999999886,\"pid\":7644,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"orca\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"orca\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"orca\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"orca\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"orca\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"orca\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"orca\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"orca\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\norca\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"orca\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"sunburst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sunburst\",\"httpPortOpen\":false,\"ip\":\"23.6.8.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":261.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11896,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.0309813249335,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.451000000001,\"onlineExpGained\":13228.875000001344,\"onlineMoneyMade\":0,\"onlineRunningTime\":143565.4099994773,\"pid\":101,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[71177990,228,275,54]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":700.0216854607949,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.525,\"onlineExpGained\":6842.849999999955,\"onlineMoneyMade\":71177990,\"onlineRunningTime\":143565.4099994773,\"pid\":104,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[26119084,176,84,23]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":593.5142647192165,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.56,\"onlineExpGained\":5733.00000000001,\"onlineMoneyMade\":26119084,\"onlineRunningTime\":143565.4099994773,\"pid\":105,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[26317327,161,164,32]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":602.6941394358531,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.579,\"onlineExpGained\":5835.899999999976,\"onlineMoneyMade\":26317327,\"onlineRunningTime\":143565.4099994773,\"pid\":106,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5133,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8976.825000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25142.410000056458,\"pid\":230,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[34543365,111,162,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4163.849999999992,\"onlineMoneyMade\":34543365,\"onlineRunningTime\":25142.410000056458,\"pid\":268,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[12611061,66,51,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3200.4,\"onlineMoneyMade\":12611061,\"onlineRunningTime\":25142.410000056458,\"pid\":272,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[13829391,78,105,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3572.0999999999967,\"onlineMoneyMade\":13829391,\"onlineRunningTime\":25142.410000056458,\"pid\":273,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4689,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4407,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[29483337,96,147,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3813.2999999999943,\"onlineMoneyMade\":29483337,\"onlineRunningTime\":23400.610000050125,\"pid\":4445,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[13726614,72,51,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3112.2000000000007,\"onlineMoneyMade\":13726614,\"onlineRunningTime\":23400.610000050125,\"pid\":4449,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[12394827,69,93,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3274.4249999999975,\"onlineMoneyMade\":12394827,\"onlineRunningTime\":23400.610000050125,\"pid\":4450,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1791,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7650,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[5945277,2211,267,282]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9140.174999999845,\"onlineMoneyMade\":5945277,\"onlineRunningTime\":9607.009999999886,\"pid\":7651,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7653,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,588,111]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5242.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7655,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,354,57]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4315.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7687,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[14260356,45,66,27]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1658.700000000001,\"onlineMoneyMade\":14260356,\"onlineRunningTime\":9607.009999999886,\"pid\":7688,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,114,27]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1692,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7690,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[6133146,30,24,12]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1285.1999999999998,\"onlineMoneyMade\":6133146,\"onlineRunningTime\":9607.009999999886,\"pid\":7692,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[3929544,21,42,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1278.8999999999999,\"onlineMoneyMade\":3929544,\"onlineRunningTime\":9607.009999999886,\"pid\":7693,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"sunburst\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"sunburst\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"sunburst\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"sunburst\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"sunburst\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"sunburst\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"sunburst\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"sunburst\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nsunburst\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"sunburst\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"chronic-noir\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"chronic-noir\",\"httpPortOpen\":false,\"ip\":\"1.5.9.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":289.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11924,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.269516742021,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.618999999999,\"onlineExpGained\":13231.350000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143564.60999947725,\"pid\":108,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[68397176,221,275,53]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":699.2302405741102,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.702000000001,\"onlineExpGained\":6774.449999999958,\"onlineMoneyMade\":68397176,\"onlineRunningTime\":143564.60999947725,\"pid\":111,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[28129548,192,84,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":612.1335818264108,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.724999999999,\"onlineExpGained\":5947.20000000001,\"onlineMoneyMade\":28129548,\"onlineRunningTime\":143564.60999947725,\"pid\":112,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[25347416,156,167,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":595.82989145481,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.743999999999,\"onlineExpGained\":5784.449999999976,\"onlineMoneyMade\":25347416,\"onlineRunningTime\":143564.60999947725,\"pid\":113,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5094,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25140.810000056452,\"pid\":1424,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[38408733,120,162,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4266.4499999999925,\"onlineMoneyMade\":38408733,\"onlineRunningTime\":25140.810000056452,\"pid\":1462,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[15307095,81,57,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3389.400000000001,\"onlineMoneyMade\":15307095,\"onlineRunningTime\":25140.810000056452,\"pid\":1466,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[11855292,66,102,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3428.774999999997,\"onlineMoneyMade\":11855292,\"onlineRunningTime\":25140.810000056452,\"pid\":1467,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4701,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4453,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[33383472,105,156,63]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3958.6499999999946,\"onlineMoneyMade\":33383472,\"onlineRunningTime\":23400.610000050125,\"pid\":4491,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[15291996,81,51,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3225.600000000001,\"onlineMoneyMade\":15291996,\"onlineRunningTime\":23400.610000050125,\"pid\":4495,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[13369215,75,93,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3340.574999999997,\"onlineMoneyMade\":13369215,\"onlineRunningTime\":23400.610000050125,\"pid\":4496,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1782,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7700,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6291933,2247,252,288]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9219.37499999984,\"onlineMoneyMade\":6291933,\"onlineRunningTime\":9607.009999999886,\"pid\":7701,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7702,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7703,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,870,141]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7582.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7704,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,354,57]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4315.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7737,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[13573779,42,66,27]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1624.500000000001,\"onlineMoneyMade\":13573779,\"onlineRunningTime\":9607.009999999886,\"pid\":7738,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[21717300,120,165,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3105,\"onlineMoneyMade\":21717300,\"onlineRunningTime\":9607.009999999886,\"pid\":7739,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,114,27]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1692,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7740,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[5259249,27,18,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1234.8000000000002,\"onlineMoneyMade\":5259249,\"onlineRunningTime\":9607.009999999886,\"pid\":7742,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[3976587,21,42,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1278.8999999999999,\"onlineMoneyMade\":3976587,\"onlineRunningTime\":9607.009999999886,\"pid\":7743,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"chronic-noir\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"chronic-noir\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"chronic-noir\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"chronic-noir\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"chronic-noir\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"chronic-noir\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"chronic-noir\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nchronic-noir\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"chronic-noir\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alderman\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alderman\",\"httpPortOpen\":false,\"ip\":\"79.0.0.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":304,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11958,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.1585620911117,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.782,\"onlineExpGained\":13229.700000001345,\"onlineMoneyMade\":0,\"onlineRunningTime\":143565.80999947732,\"pid\":115,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[73028485,236,270,55]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":712.7221947900398,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.886,\"onlineExpGained\":6899.849999999955,\"onlineMoneyMade\":73028485,\"onlineRunningTime\":143565.80999947732,\"pid\":119,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[24300003,170,84,22]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":594.0451384189283,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.914,\"onlineExpGained\":5670.000000000002,\"onlineMoneyMade\":24300003,\"onlineRunningTime\":143565.80999947732,\"pid\":120,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[24243581,148,167,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":586.2687546842653,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.938,\"onlineExpGained\":5703.599999999979,\"onlineMoneyMade\":24243581,\"onlineRunningTime\":143565.80999947732,\"pid\":121,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5085,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8976.825000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25141.610000056455,\"pid\":805,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[36326799,117,159,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4232.249999999993,\"onlineMoneyMade\":36326799,\"onlineRunningTime\":25141.610000056455,\"pid\":843,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[11659641,63,60,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3175.2,\"onlineMoneyMade\":11659641,\"onlineRunningTime\":25141.610000056455,\"pid\":847,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[12930951,72,105,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3527.9999999999973,\"onlineMoneyMade\":12930951,\"onlineRunningTime\":25141.610000056455,\"pid\":848,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4695,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4507,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[38147949,120,147,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4052.6999999999916,\"onlineMoneyMade\":38147949,\"onlineRunningTime\":23400.610000050125,\"pid\":4545,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[17396280,90,45,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3326.4,\"onlineMoneyMade\":17396280,\"onlineRunningTime\":23400.610000050125,\"pid\":4549,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[12921195,72,96,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3318.5249999999974,\"onlineMoneyMade\":12921195,\"onlineRunningTime\":23400.610000050125,\"pid\":4550,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1794,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7749,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6439398,2295,264,267]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9345.599999999835,\"onlineMoneyMade\":6439398,\"onlineRunningTime\":9607.009999999886,\"pid\":7750,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7752,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,588,111]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5242.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7754,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,156,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2376,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7756,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,633,102]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6615,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7783,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,354,57]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4315.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7786,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[13541403,42,63,30]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1615.950000000001,\"onlineMoneyMade\":13541403,\"onlineRunningTime\":9607.009999999886,\"pid\":7787,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[21739488,120,165,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3098.25,\"onlineMoneyMade\":21739488,\"onlineRunningTime\":9607.009999999886,\"pid\":7788,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,114,27]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1692,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7789,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[7365744,36,21,15]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1348.2000000000003,\"onlineMoneyMade\":7365744,\"onlineRunningTime\":9607.009999999886,\"pid\":7791,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[5720760,30,42,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1378.1249999999995,\"onlineMoneyMade\":5720760,\"onlineRunningTime\":9607.009999999886,\"pid\":7792,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"alderman\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"alderman\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"alderman\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"alderman\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"alderman\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"alderman\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"alderman\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"alderman\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nalderman\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"alderman\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"nugget\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nugget\",\"httpPortOpen\":false,\"ip\":\"37.2.6.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":289.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11919,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.3866071728278,\"offlineMoneyMade\":0,\"offlineRunningTime\":15593.982,\"onlineExpGained\":13231.350000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143566.20999947737,\"pid\":123,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[68073034,220,277,52]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":696.1186535061246,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.071,\"onlineExpGained\":6785.849999999959,\"onlineMoneyMade\":68073034,\"onlineRunningTime\":143566.20999947737,\"pid\":125,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[25262965,170,80,25]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":576.6469037221763,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.096,\"onlineExpGained\":5653.200000000007,\"onlineMoneyMade\":25262965,\"onlineRunningTime\":143566.20999947737,\"pid\":126,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[26167077,160,166,34]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":595.4808544951342,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.116,\"onlineExpGained\":5817.524999999974,\"onlineMoneyMade\":26167077,\"onlineRunningTime\":143566.20999947737,\"pid\":127,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5136,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25140.21000005645,\"pid\":1845,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[31779711,102,153,81]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4078.349999999993,\"onlineMoneyMade\":31779711,\"onlineRunningTime\":25140.21000005645,\"pid\":1883,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[19370547,105,48,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3666.6000000000013,\"onlineMoneyMade\":19370547,\"onlineRunningTime\":25140.21000005645,\"pid\":1887,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[13642839,75,105,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3539.024999999997,\"onlineMoneyMade\":13642839,\"onlineRunningTime\":25140.21000005645,\"pid\":1888,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4704,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4559,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[28895037,93,141,78]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3787.649999999995,\"onlineMoneyMade\":28895037,\"onlineRunningTime\":23400.610000050125,\"pid\":4597,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[19198953,102,48,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3477.6000000000017,\"onlineMoneyMade\":19198953,\"onlineRunningTime\":23400.610000050125,\"pid\":4601,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[16314891,90,99,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3550.0499999999965,\"onlineMoneyMade\":16314891,\"onlineRunningTime\":23400.610000050125,\"pid\":4602,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1785,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7799,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7802,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[3390075,111,543,111]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5793.75,\"onlineMoneyMade\":3390075,\"onlineRunningTime\":9607.009999999886,\"pid\":7804,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,156,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2376,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7806,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,633,102]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6615,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7833,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[5604063,117,309,57]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5126.625,\"onlineMoneyMade\":5604063,\"onlineRunningTime\":9607.009999999886,\"pid\":7836,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[10649055,33,66,27]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1556.1000000000008,\"onlineMoneyMade\":10649055,\"onlineRunningTime\":9607.009999999886,\"pid\":7837,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[19688616,108,165,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3017.25,\"onlineMoneyMade\":19688616,\"onlineRunningTime\":9607.009999999886,\"pid\":7838,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,114,27]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1692,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7839,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[6664464,33,24,12]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1323,\"onlineMoneyMade\":6664464,\"onlineRunningTime\":9607.009999999886,\"pid\":7841,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[5187603,27,42,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1356.0749999999996,\"onlineMoneyMade\":5187603,\"onlineRunningTime\":9607.009999999886,\"pid\":7842,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"nugget\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"nugget\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"nugget\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"nugget\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"nugget\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"nugget\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"nugget\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"nugget\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nnugget\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"nugget\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"treacher\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"treacher\",\"httpPortOpen\":false,\"ip\":\"44.6.8.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":304,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11942,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.3196162674133,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.154999999999,\"onlineExpGained\":13230.525000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143563.60999947716,\"pid\":129,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[65014208,209,278,52]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":683.3708213762987,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.26,\"onlineExpGained\":6680.39999999996,\"onlineMoneyMade\":65014208,\"onlineRunningTime\":143563.60999947716,\"pid\":132,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[23182212,159,83,25]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":578.0975191811605,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.296,\"onlineExpGained\":5535.600000000005,\"onlineMoneyMade\":23182212,\"onlineRunningTime\":143563.60999947716,\"pid\":133,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22917634,140,172,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":576.2873681814112,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.332,\"onlineExpGained\":5619.074999999981,\"onlineMoneyMade\":22917634,\"onlineRunningTime\":143563.60999947716,\"pid\":134,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5100,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25141.810000056455,\"pid\":726,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[38832135,126,162,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4326.299999999991,\"onlineMoneyMade\":38832135,\"onlineRunningTime\":25141.810000056455,\"pid\":764,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[17530419,96,51,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3565.800000000001,\"onlineMoneyMade\":17530419,\"onlineRunningTime\":25141.810000056455,\"pid\":768,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[13595502,75,105,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3561.074999999997,\"onlineMoneyMade\":13595502,\"onlineRunningTime\":25141.810000056455,\"pid\":769,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4713,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4613,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[37442001,117,156,63]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4035.599999999993,\"onlineMoneyMade\":37442001,\"onlineRunningTime\":23400.610000050125,\"pid\":4651,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[18350916,93,54,30]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3389.4000000000024,\"onlineMoneyMade\":18350916,\"onlineRunningTime\":23400.610000050125,\"pid\":4655,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[12845346,72,96,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3329.549999999997,\"onlineMoneyMade\":12845346,\"onlineRunningTime\":23400.610000050125,\"pid\":4656,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1797,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7847,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[5930997,2196,270,285]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9103.049999999845,\"onlineMoneyMade\":5930997,\"onlineRunningTime\":9607.009999999886,\"pid\":7848,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7850,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,588,111]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5242.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7852,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,156,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2412,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7854,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,633,102]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6615,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7881,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,351,57]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4284,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7884,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[9963420,33,63,30]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1521.900000000001,\"onlineMoneyMade\":9963420,\"onlineRunningTime\":9607.009999999886,\"pid\":7885,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[20119788,111,165,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3037.5,\"onlineMoneyMade\":20119788,\"onlineRunningTime\":9607.009999999886,\"pid\":7886,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,114,27]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1692,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7887,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[6892104,33,27,9]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1335.6,\"onlineMoneyMade\":6892104,\"onlineRunningTime\":9607.009999999886,\"pid\":7889,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[4623288,24,42,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1322.9999999999998,\"onlineMoneyMade\":4623288,\"onlineRunningTime\":9607.009999999886,\"pid\":7890,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"treacher\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"treacher\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"treacher\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"treacher\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"treacher\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"treacher\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"treacher\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"treacher\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\ntreacher\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"treacher\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"xion\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"xion\",\"httpPortOpen\":false,\"ip\":\"12.3.7.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":289.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11903,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.3179980114585,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.38,\"onlineExpGained\":13230.525000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143565.2099994773,\"pid\":136,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[68385363,220,274,53]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":698.8135783756463,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.496000000001,\"onlineExpGained\":6782.99999999996,\"onlineMoneyMade\":68385363,\"onlineRunningTime\":143565.2099994773,\"pid\":141,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[27908651,190,79,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":612.7421795145166,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.519,\"onlineExpGained\":5913.6000000000095,\"onlineMoneyMade\":27908651,\"onlineRunningTime\":143565.2099994773,\"pid\":142,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[23282726,143,169,32]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":582.3202458142313,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.543,\"onlineExpGained\":5652.149999999979,\"onlineMoneyMade\":23282726,\"onlineRunningTime\":143565.2099994773,\"pid\":143,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5109,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8976.825000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25142.410000056458,\"pid\":309,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[33082950,108,159,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4129.649999999994,\"onlineMoneyMade\":33082950,\"onlineRunningTime\":25142.410000056458,\"pid\":347,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[16155870,84,51,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3414.6000000000013,\"onlineMoneyMade\":16155870,\"onlineRunningTime\":25142.410000056458,\"pid\":351,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[17135349,96,102,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3759.524999999996,\"onlineMoneyMade\":17135349,\"onlineRunningTime\":25142.410000056458,\"pid\":352,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4710,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4667,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[29239584,93,150,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3813.2999999999947,\"onlineMoneyMade\":29239584,\"onlineRunningTime\":23400.610000050125,\"pid\":4705,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[18340296,96,48,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3402.0000000000023,\"onlineMoneyMade\":18340296,\"onlineRunningTime\":23400.610000050125,\"pid\":4709,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[10718556,60,96,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3197.2499999999973,\"onlineMoneyMade\":10718556,\"onlineRunningTime\":23400.610000050125,\"pid\":4710,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1785,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7898,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7901,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,588,111]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5242.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7903,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,558,60]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4635,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7904,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[684510,9,12,6]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":283.5,\"onlineMoneyMade\":684510,\"onlineRunningTime\":690.8100000000201,\"pid\":7931,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,633,102]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6615,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7932,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,345,54]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2992.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7933,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[12204558,39,66,27]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1598.850000000001,\"onlineMoneyMade\":12204558,\"onlineRunningTime\":9607.009999999886,\"pid\":7936,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[21784608,120,165,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3098.25,\"onlineMoneyMade\":21784608,\"onlineRunningTime\":9607.009999999886,\"pid\":7937,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[9675324,48,27,9]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1524.6000000000004,\"onlineMoneyMade\":9675324,\"onlineRunningTime\":9607.009999999886,\"pid\":7940,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[3490635,18,42,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1256.85,\"onlineMoneyMade\":3490635,\"onlineRunningTime\":9607.009999999886,\"pid\":7941,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"xion\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"xion\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"xion\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"xion\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"xion\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"xion\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"xion\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"xion\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nxion\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"xion\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"halogenic\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"halogenic\",\"httpPortOpen\":false,\"ip\":\"74.0.8.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":304,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11931,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.346543336145,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.583,\"onlineExpGained\":13230.525000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143564.0099994772,\"pid\":145,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[69042101,223,278,48]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":704.4215995220302,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.690999999999,\"onlineExpGained\":6805.799999999961,\"onlineMoneyMade\":69042101,\"onlineRunningTime\":143564.0099994772,\"pid\":149,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[26873408,184,81,25]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":606.1146271206258,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.718,\"onlineExpGained\":5833.800000000008,\"onlineMoneyMade\":26873408,\"onlineRunningTime\":143564.0099994772,\"pid\":150,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22159307,136,168,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":575.2740087823108,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.74,\"onlineExpGained\":5567.62499999998,\"onlineMoneyMade\":22159307,\"onlineRunningTime\":143564.0099994772,\"pid\":151,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5106,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25140.21000005645,\"pid\":1924,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[33325713,108,159,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4138.199999999993,\"onlineMoneyMade\":33325713,\"onlineRunningTime\":25140.21000005645,\"pid\":1962,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[21418779,114,54,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3805.200000000002,\"onlineMoneyMade\":21418779,\"onlineRunningTime\":25140.21000005645,\"pid\":1966,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[15976539,87,102,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3682.3499999999963,\"onlineMoneyMade\":15976539,\"onlineRunningTime\":25140.21000005645,\"pid\":1967,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4713,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4717,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2343,639]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17892,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4719,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,552,162]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7497,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4750,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[30198099,96,150,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3856.0499999999956,\"onlineMoneyMade\":30198099,\"onlineRunningTime\":23400.610000050125,\"pid\":4755,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[12399033,66,48,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3036.6,\"onlineMoneyMade\":12399033,\"onlineRunningTime\":23400.610000050125,\"pid\":4759,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[14157690,78,96,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3373.649999999997,\"onlineMoneyMade\":14157690,\"onlineRunningTime\":23400.610000050125,\"pid\":4760,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1791,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7948,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7950,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7951,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,588,111]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5242.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7953,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[7926033,123,174,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3976.875,\"onlineMoneyMade\":7926033,\"onlineRunningTime\":9607.009999999886,\"pid\":7981,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,633,102]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6615,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7982,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[10228137,33,63,30]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1547.5500000000009,\"onlineMoneyMade\":10228137,\"onlineRunningTime\":9607.009999999886,\"pid\":7986,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[23818725,132,165,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3179.25,\"onlineMoneyMade\":23818725,\"onlineRunningTime\":9607.009999999886,\"pid\":7987,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[5389428,27,27,9]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1260,\"onlineMoneyMade\":5389428,\"onlineRunningTime\":9607.009999999886,\"pid\":7990,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[2844747,15,42,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1223.7749999999999,\"onlineMoneyMade\":2844747,\"onlineRunningTime\":9607.009999999886,\"pid\":7991,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"halogenic\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"halogenic\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"halogenic\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"halogenic\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"halogenic\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"halogenic\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"halogenic\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"halogenic\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nhalogenic\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"halogenic\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blood-rain\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blood-rain\",\"httpPortOpen\":false,\"ip\":\"28.0.1.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":318.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11913,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.3516212007241,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.798999999999,\"onlineExpGained\":13231.350000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143565.00999947728,\"pid\":153,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[71835303,230,276,52]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":701.6961363871906,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.909,\"onlineExpGained\":6874.1999999999525,\"onlineMoneyMade\":71835303,\"onlineRunningTime\":143565.00999947728,\"pid\":155,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[26354499,179,84,25]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":597.8412735854621,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.93,\"onlineExpGained\":5796.000000000008,\"onlineMoneyMade\":26354499,\"onlineRunningTime\":143565.00999947728,\"pid\":156,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[24980048,154,165,34]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":602.5129301864127,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.954,\"onlineExpGained\":5762.399999999976,\"onlineMoneyMade\":24980048,\"onlineRunningTime\":143565.00999947728,\"pid\":157,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5106,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8976.825000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25140.61000005645,\"pid\":1596,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[35955531,114,162,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4223.6999999999925,\"onlineMoneyMade\":35955531,\"onlineRunningTime\":25140.61000005645,\"pid\":1634,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[18878445,102,60,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3666.6000000000026,\"onlineMoneyMade\":18878445,\"onlineRunningTime\":25140.61000005645,\"pid\":1638,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[14005974,78,105,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3572.099999999997,\"onlineMoneyMade\":14005974,\"onlineRunningTime\":25140.61000005645,\"pid\":1639,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4692,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8367.975000000151,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4773,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[322458,3,795,156]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7160.625,\"onlineMoneyMade\":322458,\"onlineRunningTime\":23400.610000050125,\"pid\":4808,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[32624055,105,147,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3907.349999999995,\"onlineMoneyMade\":32624055,\"onlineRunningTime\":23400.610000050125,\"pid\":4811,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[15877893,81,54,30]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3238.2000000000007,\"onlineMoneyMade\":15877893,\"onlineRunningTime\":23400.610000050125,\"pid\":4815,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[13019727,72,96,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3340.5749999999975,\"onlineMoneyMade\":13019727,\"onlineRunningTime\":23400.610000050125,\"pid\":4816,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1797,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":7998,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6019398,2235,270,273]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9199.574999999842,\"onlineMoneyMade\":6019398,\"onlineRunningTime\":9607.009999999886,\"pid\":7999,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,933,303]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8000,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,975,201]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7056,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8001,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[8608380,135,174,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4071.375,\"onlineMoneyMade\":8608380,\"onlineRunningTime\":9607.009999999886,\"pid\":8031,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,633,102]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6615,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8032,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[337152,3,345,54]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3020.625,\"onlineMoneyMade\":337152,\"onlineRunningTime\":9607.009999999886,\"pid\":8033,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[10379709,33,60,30]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1539.0000000000007,\"onlineMoneyMade\":10379709,\"onlineRunningTime\":9607.009999999886,\"pid\":8036,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[20339565,114,165,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3057.75,\"onlineMoneyMade\":20339565,\"onlineRunningTime\":9607.009999999886,\"pid\":8037,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[10441842,42,90,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2016,\"onlineMoneyMade\":10441842,\"onlineRunningTime\":9607.009999999886,\"pid\":8038,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[7494351,36,27,9]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1373.3999999999999,\"onlineMoneyMade\":7494351,\"onlineRunningTime\":9607.009999999886,\"pid\":8040,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[4018287,21,42,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1289.925,\"onlineMoneyMade\":4018287,\"onlineRunningTime\":9607.009999999886,\"pid\":8041,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"blood-rain\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"blood-rain\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"blood-rain\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"blood-rain\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"blood-rain\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"blood-rain\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"blood-rain\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"blood-rain\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nblood-rain\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"blood-rain\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"gaucho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"gaucho\",\"httpPortOpen\":false,\"ip\":\"12.4.7.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":304,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11947,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.2451606527159,\"offlineMoneyMade\":0,\"offlineRunningTime\":15594.991,\"onlineExpGained\":13229.700000001345,\"onlineMoneyMade\":0,\"onlineRunningTime\":143566.00999947733,\"pid\":159,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[67293347,215,278,53]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":683.7646621132405,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.071,\"onlineExpGained\":6737.399999999954,\"onlineMoneyMade\":67293347,\"onlineRunningTime\":143566.00999947733,\"pid\":161,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[25849990,173,87,23]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":574.0600486408762,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.096,\"onlineExpGained\":5712.000000000007,\"onlineMoneyMade\":25849990,\"onlineRunningTime\":143566.00999947733,\"pid\":162,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[24258024,149,167,31]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":592.1452946590229,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.115,\"onlineExpGained\":5703.599999999982,\"onlineMoneyMade\":24258024,\"onlineRunningTime\":143566.00999947733,\"pid\":163,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5094,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25141.010000056453,\"pid\":1266,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[38222316,120,162,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4283.549999999993,\"onlineMoneyMade\":38222316,\"onlineRunningTime\":25141.010000056453,\"pid\":1304,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[16774956,87,60,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3477.6000000000013,\"onlineMoneyMade\":16774956,\"onlineRunningTime\":25141.010000056453,\"pid\":1308,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[14129334,78,102,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3583.124999999997,\"onlineMoneyMade\":14129334,\"onlineRunningTime\":25141.010000056453,\"pid\":1309,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4728,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4827,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,552,162]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7497,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4860,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[34824954,111,150,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3984.2999999999943,\"onlineMoneyMade\":34824954,\"onlineRunningTime\":23400.610000050125,\"pid\":4865,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[18288738,96,51,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3414.600000000002,\"onlineMoneyMade\":18288738,\"onlineRunningTime\":23400.610000050125,\"pid\":4869,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[10736688,60,90,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3186.224999999998,\"onlineMoneyMade\":10736688,\"onlineRunningTime\":23400.610000050125,\"pid\":4870,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1782,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8046,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,933,303]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8048,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,870,141]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7582.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8050,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,588,111]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5242.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8051,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,156,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2412,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8053,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[9577395,141,180,63]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4126.5,\"onlineMoneyMade\":9577395,\"onlineRunningTime\":9607.009999999886,\"pid\":8079,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[14310885,45,57,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1607.400000000001,\"onlineMoneyMade\":14310885,\"onlineRunningTime\":9607.009999999886,\"pid\":8084,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[19231842,108,162,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2990.25,\"onlineMoneyMade\":19231842,\"onlineRunningTime\":9607.009999999886,\"pid\":8085,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[14134755,57,90,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2151,\"onlineMoneyMade\":14134755,\"onlineRunningTime\":9607.009999999886,\"pid\":8086,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[7987710,39,24,12]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1398.6000000000001,\"onlineMoneyMade\":7987710,\"onlineRunningTime\":9607.009999999886,\"pid\":8088,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[2849379,15,42,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1223.775,\"onlineMoneyMade\":2849379,\"onlineRunningTime\":9607.009999999886,\"pid\":8089,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"gaucho\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"gaucho\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"gaucho\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"gaucho\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"gaucho\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"gaucho\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"gaucho\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"gaucho\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\ngaucho\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"gaucho\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\nbleach\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"bleach\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"bleach\",\"httpPortOpen\":false,\"ip\":\"61.0.7.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":289.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11937,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.278551510405,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.169,\"onlineExpGained\":13230.525000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143564.2099994772,\"pid\":165,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[65909892,213,280,52]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":693.7034028686563,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.245,\"onlineExpGained\":6731.699999999963,\"onlineMoneyMade\":65909892,\"onlineRunningTime\":143564.2099994772,\"pid\":168,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[21355445,145,81,25]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":550.9202974584914,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.297,\"onlineExpGained\":5342.400000000002,\"onlineMoneyMade\":21355445,\"onlineRunningTime\":143564.2099994772,\"pid\":169,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[23752105,145,167,34]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":584.2336642781409,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.314,\"onlineExpGained\":5670.524999999978,\"onlineMoneyMade\":23752105,\"onlineRunningTime\":143564.2099994772,\"pid\":170,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5121,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8976.825000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25140.41000005645,\"pid\":1689,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[37668885,120,159,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4249.349999999992,\"onlineMoneyMade\":37668885,\"onlineRunningTime\":25140.41000005645,\"pid\":1727,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[12731040,69,63,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3250.8000000000006,\"onlineMoneyMade\":12731040,\"onlineRunningTime\":25140.41000005645,\"pid\":1731,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[16124487,90,105,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3704.3999999999965,\"onlineMoneyMade\":16124487,\"onlineRunningTime\":25140.41000005645,\"pid\":1732,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4683,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4881,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2343,639]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17892,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4883,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,552,162]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7497,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4914,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[31541883,102,150,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3898.7999999999943,\"onlineMoneyMade\":31541883,\"onlineRunningTime\":23400.610000050125,\"pid\":4919,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[15555186,81,54,30]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3238.2000000000007,\"onlineMoneyMade\":15555186,\"onlineRunningTime\":23400.610000050125,\"pid\":4923,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[11742723,66,87,48]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3241.3499999999976,\"onlineMoneyMade\":11742723,\"onlineRunningTime\":23400.610000050125,\"pid\":4924,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1776,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8094,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8096,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,588,111]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5242.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8099,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[9562005,141,183,60]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4134.375,\"onlineMoneyMade\":9562005,\"onlineRunningTime\":9607.009999999886,\"pid\":8127,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[13431069,42,57,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1581.7500000000011,\"onlineMoneyMade\":13431069,\"onlineRunningTime\":9607.009999999886,\"pid\":8132,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[20599968,117,162,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3051,\"onlineMoneyMade\":20599968,\"onlineRunningTime\":9607.009999999886,\"pid\":8133,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17115231,69,90,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2259,\"onlineMoneyMade\":17115231,\"onlineRunningTime\":9607.009999999886,\"pid\":8134,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[9183963,45,24,12]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1474.2000000000003,\"onlineMoneyMade\":9183963,\"onlineRunningTime\":9607.009999999886,\"pid\":8136,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[3924234,21,42,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1289.925,\"onlineMoneyMade\":3924234,\"onlineRunningTime\":9607.009999999886,\"pid\":8137,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"bleach\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"bleach\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"bleach\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"bleach\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"bleach\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"bleach\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"bleach\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"bleach\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nbleach\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nyarrow\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"bleach\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nyarrow\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"yarrow\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"yarrow\",\"httpPortOpen\":false,\"ip\":\"76.8.0.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":289.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11946,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.2649239425934,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.358,\"onlineExpGained\":13229.700000001345,\"onlineMoneyMade\":0,\"onlineRunningTime\":143566.6099994774,\"pid\":172,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[70347928,227,276,50]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":712.5208124147016,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.472,\"onlineExpGained\":6831.449999999965,\"onlineMoneyMade\":70347928,\"onlineRunningTime\":143566.6099994774,\"pid\":176,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[28062144,194,80,26]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":628.6860630179002,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.499,\"onlineExpGained\":5964.000000000007,\"onlineMoneyMade\":28062144,\"onlineRunningTime\":143566.6099994774,\"pid\":177,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[23298341,142,170,35]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":582.8425925592825,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.516,\"onlineExpGained\":5644.799999999977,\"onlineMoneyMade\":23298341,\"onlineRunningTime\":143566.6099994774,\"pid\":178,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5127,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25142.010000056456,\"pid\":542,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[32944380,108,156,78]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4121.099999999993,\"onlineMoneyMade\":32944380,\"onlineRunningTime\":25142.010000056456,\"pid\":580,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[16495440,90,45,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3477.6,\"onlineMoneyMade\":16495440,\"onlineRunningTime\":25142.010000056456,\"pid\":584,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[13377957,75,105,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3561.074999999998,\"onlineMoneyMade\":13377957,\"onlineRunningTime\":25142.010000056456,\"pid\":585,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4707,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4936,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,552,162]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7497,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4969,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[35487138,111,147,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3958.6499999999937,\"onlineMoneyMade\":35487138,\"onlineRunningTime\":23400.610000050125,\"pid\":4974,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[20100441,105,48,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3528.0000000000023,\"onlineMoneyMade\":20100441,\"onlineRunningTime\":23400.610000050125,\"pid\":4978,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[13939488,78,93,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3373.649999999997,\"onlineMoneyMade\":13939488,\"onlineRunningTime\":23400.610000050125,\"pid\":4979,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1797,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8145,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6256602,2238,252,285]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9197.099999999844,\"onlineMoneyMade\":6256602,\"onlineRunningTime\":9607.009999999886,\"pid\":8146,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8147,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,867,141]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7560,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8149,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,588,111]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5242.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8150,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[9886101,150,177,66]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4189.5,\"onlineMoneyMade\":9886101,\"onlineRunningTime\":9607.009999999886,\"pid\":8178,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[13884684,45,54,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1624.500000000001,\"onlineMoneyMade\":13884684,\"onlineRunningTime\":9607.009999999886,\"pid\":8183,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,213,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2376,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8184,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[8426307,42,24,12]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1436.4000000000003,\"onlineMoneyMade\":8426307,\"onlineRunningTime\":9607.009999999886,\"pid\":8187,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[6864207,36,45,15]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1466.3249999999994,\"onlineMoneyMade\":6864207,\"onlineRunningTime\":9607.009999999886,\"pid\":8188,\"ramUsage\":4.75,\"server\":\"yarrow\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"yarrow\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"yarrow\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"yarrow\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"yarrow\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"yarrow\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"yarrow\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"yarrow\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"yarrow\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nyarrow\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nrector\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"yarrow\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nrector\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"rector\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"rector\",\"httpPortOpen\":false,\"ip\":\"69.5.2.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":304,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11902,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.3845159608002,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.565,\"onlineExpGained\":13231.350000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143567.00999947742,\"pid\":180,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[72596884,233,275,49]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":709.8546347203753,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.743,\"onlineExpGained\":6877.0499999999565,\"onlineMoneyMade\":72596884,\"onlineRunningTime\":143567.00999947742,\"pid\":184,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[26618456,183,75,23]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":605.2166528514338,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.776,\"onlineExpGained\":5783.400000000003,\"onlineMoneyMade\":26618456,\"onlineRunningTime\":143567.00999947742,\"pid\":185,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22173457,136,168,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":565.7825273958438,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.792,\"onlineExpGained\":5560.274999999981,\"onlineMoneyMade\":22173457,\"onlineRunningTime\":143567.00999947742,\"pid\":186,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5115,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25142.410000056458,\"pid\":386,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,597,171]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8064,\"onlineMoneyMade\":0,\"onlineRunningTime\":25142.410000056458,\"pid\":419,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[33984336,111,159,75]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4172.399999999994,\"onlineMoneyMade\":33984336,\"onlineRunningTime\":25142.410000056458,\"pid\":424,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[17370741,93,51,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3528.0000000000005,\"onlineMoneyMade\":17370741,\"onlineRunningTime\":25142.410000056458,\"pid\":428,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[14536785,81,105,42]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3616.1999999999966,\"onlineMoneyMade\":14536785,\"onlineRunningTime\":25142.410000056458,\"pid\":429,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4698,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8367.975000000151,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":4989,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,552,162]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7497,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":5022,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[33310431,105,147,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3907.349999999994,\"onlineMoneyMade\":33310431,\"onlineRunningTime\":23400.610000050125,\"pid\":5027,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[16305129,84,51,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3263.4000000000015,\"onlineMoneyMade\":16305129,\"onlineRunningTime\":23400.610000050125,\"pid\":5031,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[15180069,84,93,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3439.7999999999965,\"onlineMoneyMade\":15180069,\"onlineRunningTime\":23400.610000050125,\"pid\":5032,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1785,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8193,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8195,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,558,60]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4635,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8199,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[8682069,126,174,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3992.625,\"onlineMoneyMade\":8682069,\"onlineRunningTime\":9607.009999999886,\"pid\":8226,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,354,57]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4315.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8230,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[19138476,60,57,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1761.3000000000013,\"onlineMoneyMade\":19138476,\"onlineRunningTime\":9607.009999999886,\"pid\":8231,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,213,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2376,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8232,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[15068592,60,90,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2178,\"onlineMoneyMade\":15068592,\"onlineRunningTime\":9607.009999999886,\"pid\":8233,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[5851050,30,24,12]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1285.1999999999998,\"onlineMoneyMade\":5851050,\"onlineRunningTime\":9607.009999999886,\"pid\":8235,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[3439275,18,42,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1256.85,\"onlineMoneyMade\":3439275,\"onlineRunningTime\":9607.009999999886,\"pid\":8236,\"ramUsage\":4.75,\"server\":\"rector\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"rector\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"rector\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"rector\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"rector\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"rector\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"rector\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"rector\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"rector\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nrector\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nbellend\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"rector\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nbellend\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"bellend\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"bellend\",\"httpPortOpen\":false,\"ip\":\"59.4.2.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":261.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11930,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.3235784141023,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.822,\"onlineExpGained\":13229.700000001345,\"onlineMoneyMade\":0,\"onlineRunningTime\":143564.4099994772,\"pid\":188,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[73106009,236,278,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":715.132955150008,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.888,\"onlineExpGained\":6911.249999999952,\"onlineMoneyMade\":73106009,\"onlineRunningTime\":143564.4099994772,\"pid\":191,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[24738613,174,81,26]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":604.1695192413962,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.907000000001,\"onlineExpGained\":5716.200000000006,\"onlineMoneyMade\":24738613,\"onlineRunningTime\":143564.4099994772,\"pid\":192,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[25894166,159,170,34]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":594.7515550117266,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.926000000001,\"onlineExpGained\":5821.199999999975,\"onlineMoneyMade\":25894166,\"onlineRunningTime\":143564.4099994772,\"pid\":193,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5112,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8974.350000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25141.410000056454,\"pid\":1042,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[32801358,105,165,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4146.749999999994,\"onlineMoneyMade\":32801358,\"onlineRunningTime\":25141.410000056454,\"pid\":1080,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[14054874,75,57,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3313.8000000000006,\"onlineMoneyMade\":14054874,\"onlineRunningTime\":25141.410000056454,\"pid\":1084,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[12209160,69,102,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3461.8499999999976,\"onlineMoneyMade\":12209160,\"onlineRunningTime\":25141.410000056454,\"pid\":1085,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4707,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8367.975000000151,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":5040,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[36607833,117,147,72]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4027.049999999993,\"onlineMoneyMade\":36607833,\"onlineRunningTime\":23400.610000050125,\"pid\":5078,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[54322680,300,414,99]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7566.75,\"onlineMoneyMade\":54322680,\"onlineRunningTime\":23400.610000050125,\"pid\":5079,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[17132943,90,51,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3339.0000000000014,\"onlineMoneyMade\":17132943,\"onlineRunningTime\":23400.610000050125,\"pid\":5082,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[9919719,54,96,45]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3131.0999999999976,\"onlineMoneyMade\":9919719,\"onlineRunningTime\":23400.610000050125,\"pid\":5083,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1782,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8242,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,936,300]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7416,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8244,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,870,141]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7582.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8246,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[14640357,48,60,30]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1658.7000000000012,\"onlineMoneyMade\":14640357,\"onlineRunningTime\":9607.009999999886,\"pid\":8280,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,213,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2376,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8281,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[13110594,51,90,24]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2097,\"onlineMoneyMade\":13110594,\"onlineRunningTime\":9607.009999999886,\"pid\":8282,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[8583669,42,24,12]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1436.4000000000003,\"onlineMoneyMade\":8583669,\"onlineRunningTime\":9607.009999999886,\"pid\":8284,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[5673141,30,42,18]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1389.1499999999996,\"onlineMoneyMade\":5673141,\"onlineRunningTime\":9607.009999999886,\"pid\":8285,\"ramUsage\":4.75,\"server\":\"bellend\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"bellend\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"bellend\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"bellend\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"bellend\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"bellend\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"bellend\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"bellend\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"bellend\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nbellend\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nhorseboi\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"bellend\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nhorseboi\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"horseboi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"horseboi\",\"httpPortOpen\":false,\"ip\":\"86.0.2.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":289.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,11923,0,975]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1338.301641634867,\"offlineMoneyMade\":0,\"offlineRunningTime\":15595.961,\"onlineExpGained\":13230.525000001346,\"onlineMoneyMade\":0,\"onlineRunningTime\":143567.20999947743,\"pid\":195,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[68479287,221,277,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":692.8733143871384,\"offlineMoneyMade\":0,\"offlineRunningTime\":15596.026,\"onlineExpGained\":6791.549999999957,\"onlineMoneyMade\":68479287,\"onlineRunningTime\":143567.20999947743,\"pid\":197,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[27524962,186,76,23]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":592.4786416962231,\"offlineMoneyMade\":0,\"offlineRunningTime\":15596.054,\"onlineExpGained\":5821.200000000007,\"onlineMoneyMade\":27524962,\"onlineRunningTime\":143567.20999947743,\"pid\":198,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[25275388,156,169,34]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":599.4901561341993,\"offlineMoneyMade\":0,\"offlineRunningTime\":15596.067000000001,\"onlineExpGained\":5791.79999999998,\"onlineMoneyMade\":25275388,\"onlineRunningTime\":143567.20999947743,\"pid\":199,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///dcd3b837-1af6-4583-9ed4-f018e7f3ff12\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///d4e9e4ce-07c4-4893-ac80-58e02eb85135\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,5109,0,1416]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8976.825000000184,\"onlineMoneyMade\":0,\"onlineRunningTime\":25142.210000056457,\"pid\":463,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,597,171]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8064,\"onlineMoneyMade\":0,\"onlineRunningTime\":25142.210000056457,\"pid\":496,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[37446453,120,165,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4249.349999999993,\"onlineMoneyMade\":37446453,\"onlineRunningTime\":25142.210000056457,\"pid\":501,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[16609032,90,51,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3490.2000000000007,\"onlineMoneyMade\":16609032,\"onlineRunningTime\":25142.210000056457,\"pid\":505,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[12364302,69,99,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3461.849999999997,\"onlineMoneyMade\":12364302,\"onlineRunningTime\":25142.210000056457,\"pid\":506,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,4701,0,1341]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8370.450000000152,\"onlineMoneyMade\":0,\"onlineRunningTime\":23400.610000050125,\"pid\":5093,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[21453378,324,432,150]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9780.75,\"onlineMoneyMade\":21453378,\"onlineRunningTime\":23400.610000050125,\"pid\":5126,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[34939728,114,141,78]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3967.1999999999935,\"onlineMoneyMade\":34939728,\"onlineRunningTime\":23400.610000050125,\"pid\":5131,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[18003078,93,51,33]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3376.8000000000015,\"onlineMoneyMade\":18003078,\"onlineRunningTime\":23400.610000050125,\"pid\":5135,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[14984985,81,99,39]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3450.8249999999966,\"onlineMoneyMade\":14984985,\"onlineRunningTime\":23400.610000050125,\"pid\":5136,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,1791,0,603]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3489.749999999976,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8289,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,588,111]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5242.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8294,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[8297754,123,174,69]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3969,\"onlineMoneyMade\":8297754,\"onlineRunningTime\":9607.009999999886,\"pid\":8322,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,354,57]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4315.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8326,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[9242520,30,54,36]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1487.7000000000007,\"onlineMoneyMade\":9242520,\"onlineRunningTime\":9607.009999999886,\"pid\":8327,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,213,51]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2376,\"onlineMoneyMade\":0,\"onlineRunningTime\":9607.009999999886,\"pid\":8328,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[14356980,60,93,21]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2187,\"onlineMoneyMade\":14356980,\"onlineRunningTime\":9607.009999999886,\"pid\":8329,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[9856701,48,24,12]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1512.0000000000002,\"onlineMoneyMade\":9856701,\"onlineRunningTime\":9607.009999999886,\"pid\":8331,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[7582656,39,45,15]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1499.3999999999994,\"onlineMoneyMade\":7582656,\"onlineRunningTime\":9607.009999999886,\"pid\":8332,\"ramUsage\":4.75,\"server\":\"horseboi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"horseboi\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"horseboi\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"horseboi\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"horseboi\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///51c20d61-ad06-4b81-a144-cab2784af813\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///342cfd73-0240-4d8b-8786-2682149c2077\"}],\"ramUsage\":3.9,\"server\":\"horseboi\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":5098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///bf543772-e114-4f84-85ca-8cbc2a05a6be\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///cb37ead3-a7e3-4035-8504-75d0ea810f68\"}],\"ramUsage\":4.75,\"server\":\"horseboi\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"horseboi\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///571f6680-2156-4d69-a40a-29d347db6b44\"}],\"ramUsage\":2.95,\"server\":\"horseboi\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":5035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nhorseboi\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"horseboi\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nyarrow\\nrector\\nbellend\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":184.98267076923406,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":267.0533615384627,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":40040.484126153846,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":4335.5668461508,\"favor\":0,\"isMegacorp\":false,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":112831.43094348938}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":3,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":108342.30325265392}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":3,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":25121.169410429968}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":3,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":42404.056074462576}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":3,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":84846.04993130933}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":3,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":22996.334556022575}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run NUKE.exe\",\"sq\":\"run /js/stocks/stockQuery.js\",\"debug\":\"run js/util/toggleDebug.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":8315.749201049011,\"lastPrice\":8325.812358777768,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":5.227344697057145,\"otlkMagForecast\":27.3580192598763,\"cap\":432569164,\"spreadPerc\":0.1,\"shareTxForMovement\":47184,\"shareTxUntilMovement\":39606,\"totalShares\":129100000,\"maxShares\":25800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":351520.3080137781,\"lastPrice\":351171.83718431025,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":5.299983752492878,\"otlkMagForecast\":29.794634745520586,\"cap\":117899692,\"spreadPerc\":0.1,\"shareTxForMovement\":80193,\"shareTxUntilMovement\":51089,\"totalShares\":75300000,\"maxShares\":15100000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":1403.080727608257,\"lastPrice\":1405.7294726376838,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":5.443198249682765,\"otlkMagForecast\":65.94901960606985,\"cap\":93961551,\"spreadPerc\":0.4,\"shareTxForMovement\":78654,\"shareTxUntilMovement\":16230,\"totalShares\":126600000,\"maxShares\":25300000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":19094.001322279346,\"lastPrice\":19062.62842785209,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":5.445149132207819,\"otlkMagForecast\":62.98481802191795,\"cap\":402770942,\"spreadPerc\":0.1,\"shareTxForMovement\":53194,\"shareTxUntilMovement\":29638,\"totalShares\":78400000,\"maxShares\":15700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":107812.93163359682,\"lastPrice\":107982.53993502553,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":16.778639417961177,\"otlkMagForecast\":28.69319176885017,\"cap\":417285935,\"spreadPerc\":0.6,\"shareTxForMovement\":70044,\"shareTxUntilMovement\":58850,\"totalShares\":54100000,\"maxShares\":10800000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":58.10221107457625,\"lastPrice\":58.249864950447645,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.05,\"b\":false,\"otlkMag\":16.84553820507344,\"otlkMagForecast\":26.844688778273337,\"cap\":526810131,\"spreadPerc\":0.8,\"shareTxForMovement\":75892,\"shareTxUntilMovement\":38462,\"totalShares\":29600000,\"maxShares\":5900000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":13740.992944475189,\"lastPrice\":13769.261260319217,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":9.686520735546685,\"otlkMagForecast\":34.347812169045014,\"cap\":333699032,\"spreadPerc\":0.1,\"shareTxForMovement\":49361,\"shareTxUntilMovement\":8818,\"totalShares\":73800000,\"maxShares\":14800000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":257.8067098421906,\"lastPrice\":257.0539221709215,\"playerShares\":12700000,\"playerAvgPx\":246.80542068493236,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":true,\"otlkMag\":5.655277069023421,\"otlkMagForecast\":59.10039574053764,\"cap\":80631764,\"spreadPerc\":0.8,\"shareTxForMovement\":79271,\"shareTxUntilMovement\":17422,\"totalShares\":63300000,\"maxShares\":12700000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":1196.391731988922,\"lastPrice\":1193.935537810189,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":5.942178737350976,\"otlkMagForecast\":38.134026768985926,\"cap\":341038273,\"spreadPerc\":0.7,\"shareTxForMovement\":48482,\"shareTxUntilMovement\":48482,\"totalShares\":56100000,\"maxShares\":11200000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":14824.736952381665,\"lastPrice\":14800.378783579392,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":5.591335581247739,\"otlkMagForecast\":42.18551717271853,\"cap\":286270619,\"spreadPerc\":0.4,\"shareTxForMovement\":42024,\"shareTxUntilMovement\":33740,\"totalShares\":53700000,\"maxShares\":10700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":9695.007116085097,\"lastPrice\":9680.714880801279,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":5.1055674746542,\"otlkMagForecast\":55.18835147725051,\"cap\":319710879,\"spreadPerc\":0.9,\"shareTxForMovement\":107573,\"shareTxUntilMovement\":75403,\"totalShares\":62200000,\"maxShares\":12400000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":11752.259403854936,\"lastPrice\":11772.169910060375,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":5.817542893601398,\"otlkMagForecast\":43.10579735034773,\"cap\":148301871,\"spreadPerc\":0.2,\"shareTxForMovement\":63596,\"shareTxUntilMovement\":39314,\"totalShares\":122800000,\"maxShares\":24600000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":29816.81317084889,\"lastPrice\":29865.88508846543,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":5.448438857832117,\"otlkMagForecast\":44.73847592805951,\"cap\":275405647,\"spreadPerc\":0.4,\"shareTxForMovement\":97501,\"shareTxUntilMovement\":94992,\"totalShares\":57200000,\"maxShares\":11400000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":22888.334833247853,\"lastPrice\":22921.57233255288,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":5.318947269661077,\"otlkMagForecast\":41.877571592362635,\"cap\":442286918,\"spreadPerc\":0.7,\"shareTxForMovement\":72557,\"shareTxUntilMovement\":70427,\"totalShares\":37500000,\"maxShares\":7500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":40254.13000890396,\"lastPrice\":40197.70233910983,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":3.1137751401377693,\"otlkMagForecast\":55.76161808260613,\"cap\":89749456,\"spreadPerc\":0.3,\"shareTxForMovement\":115429,\"shareTxUntilMovement\":70053,\"totalShares\":43000000,\"maxShares\":8600000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":161788.95293529358,\"lastPrice\":161495.80596884966,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":5.987472599674716,\"otlkMagForecast\":44.1612434559364,\"cap\":318641219,\"spreadPerc\":0.5,\"shareTxForMovement\":51742,\"shareTxUntilMovement\":51742,\"totalShares\":45600000,\"maxShares\":9100000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":91026.11455201716,\"lastPrice\":90850.20929778197,\"playerShares\":7200000,\"playerAvgPx\":88073.05611919232,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":5.531721751988162,\"otlkMagForecast\":58.63231728438171,\"cap\":469099020,\"spreadPerc\":1.2,\"shareTxForMovement\":95286,\"shareTxUntilMovement\":37098,\"totalShares\":36200000,\"maxShares\":7200000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":24476.30672696982,\"lastPrice\":24511.25782235786,\"playerShares\":5100000,\"playerAvgPx\":24528.339363363517,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":5.779582763836499,\"otlkMagForecast\":56.777935255214004,\"cap\":161359923,\"spreadPerc\":0.5,\"shareTxForMovement\":56937,\"shareTxUntilMovement\":25510,\"totalShares\":25400000,\"maxShares\":5100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":5487.9590532274615,\"lastPrice\":5498.319258437259,\"playerShares\":4800000,\"playerAvgPx\":3891.677403915031,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":5.675532831815785,\"otlkMagForecast\":57.3232849508846,\"cap\":493213077,\"spreadPerc\":0.8,\"shareTxForMovement\":98250,\"shareTxUntilMovement\":34280,\"totalShares\":24100000,\"maxShares\":4800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":13021.40058149771,\"lastPrice\":13102.394743337736,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.57,\"b\":true,\"otlkMag\":4.082668161098082,\"otlkMagForecast\":52.715841137018124,\"cap\":41396890,\"spreadPerc\":0.5,\"shareTxForMovement\":13485,\"shareTxUntilMovement\":13485,\"totalShares\":103500000,\"maxShares\":20700000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":9297.442724940105,\"lastPrice\":9323.770385265869,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.17,\"b\":false,\"otlkMag\":5.526020343135281,\"otlkMagForecast\":42.9240138344879,\"cap\":49377918,\"spreadPerc\":0.7,\"shareTxForMovement\":55967,\"shareTxUntilMovement\":22728,\"totalShares\":57500000,\"maxShares\":11500000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4949.355407112696,\"lastPrice\":4941.70086319111,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":5.6100055786423155,\"otlkMagForecast\":57.28213195034911,\"cap\":22738493,\"spreadPerc\":0.7,\"shareTxForMovement\":77342,\"shareTxUntilMovement\":41074,\"totalShares\":51800000,\"maxShares\":10400000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":381305.00769920356,\"lastPrice\":379687.665013119,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.76,\"b\":false,\"otlkMag\":7.021601054783447,\"otlkMagForecast\":39.615197937686666,\"cap\":129062948,\"spreadPerc\":1.5,\"shareTxForMovement\":53941,\"shareTxUntilMovement\":47170,\"totalShares\":38800000,\"maxShares\":7800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":296.00150085893034,\"lastPrice\":297.2050562639932,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.68,\"b\":false,\"otlkMag\":5.403270369841591,\"otlkMagForecast\":41.568954249177736,\"cap\":67333539,\"spreadPerc\":1.1,\"shareTxForMovement\":39148,\"shareTxUntilMovement\":39148,\"totalShares\":40300000,\"maxShares\":8100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":8394.063860389062,\"lastPrice\":8410.72286368209,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":false,\"otlkMag\":5.1284487905370035,\"otlkMagForecast\":42.83852569038162,\"cap\":22433129,\"spreadPerc\":0.9,\"shareTxForMovement\":78474,\"shareTxUntilMovement\":32788,\"totalShares\":44000000,\"maxShares\":8800000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":5736.444233405719,\"lastPrice\":5708.810566355931,\"playerShares\":4100000,\"playerAvgPx\":5758.515930706172,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2,\"b\":true,\"otlkMag\":8.682095118529489,\"otlkMagForecast\":61.782595225290166,\"cap\":45394602,\"spreadPerc\":0.8,\"shareTxForMovement\":43782,\"shareTxUntilMovement\":37500,\"totalShares\":20500000,\"maxShares\":4100000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1980.1554697023703,\"lastPrice\":1985.139670401743,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":false,\"otlkMag\":7.112010607261409,\"otlkMagForecast\":42.98743891494768,\"cap\":29009079,\"spreadPerc\":0.7,\"shareTxForMovement\":34120,\"shareTxUntilMovement\":21540,\"totalShares\":9900000,\"maxShares\":2000000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":147.58378882847214,\"lastPrice\":147.83739504616585,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":5.601433299738118,\"otlkMagForecast\":42.621777750115996,\"cap\":6493492,\"spreadPerc\":0.8,\"shareTxForMovement\":121671,\"shareTxUntilMovement\":70817,\"totalShares\":73900000,\"maxShares\":14800000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":133.0728404109021,\"lastPrice\":132.55312227838593,\"playerShares\":1800000,\"playerAvgPx\":49.85858138581244,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.62,\"b\":true,\"otlkMag\":9.051252150093141,\"otlkMagForecast\":61.540595041547725,\"cap\":41596833,\"spreadPerc\":1.3,\"shareTxForMovement\":61740,\"shareTxUntilMovement\":61590,\"totalShares\":9200000,\"maxShares\":1800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":318.21552746551976,\"lastPrice\":320.7493731268313,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.29,\"b\":false,\"otlkMag\":8.813672753927625,\"otlkMagForecast\":39.79810113835937,\"cap\":11518066,\"spreadPerc\":0.9,\"shareTxForMovement\":29416,\"shareTxUntilMovement\":922,\"totalShares\":49200000,\"maxShares\":9800000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":0.8577779001501981,\"lastPrice\":0.8607051302232632,\"playerShares\":25900000,\"playerAvgPx\":0.775490905170281,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.41,\"b\":true,\"otlkMag\":9.135509663135535,\"otlkMagForecast\":63.86428432081171,\"cap\":15246496,\"spreadPerc\":0.6,\"shareTxForMovement\":51938,\"shareTxUntilMovement\":11548,\"totalShares\":129500000,\"maxShares\":25900000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":16173.900078565486,\"lastPrice\":16203.258919899812,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":3.7138990126551423,\"otlkMagForecast\":54.31343897825348,\"cap\":158540873,\"spreadPerc\":0.8,\"shareTxForMovement\":199165,\"shareTxUntilMovement\":61005,\"totalShares\":12100000,\"maxShares\":2400000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":11728.630466103905,\"lastPrice\":11712.189437893077,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":11.05543725253098,\"otlkMagForecast\":34.7294871685389,\"cap\":237788736,\"spreadPerc\":1,\"shareTxForMovement\":119949,\"shareTxUntilMovement\":71139,\"totalShares\":29800000,\"maxShares\":6000000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":17280,\"lastUpdate\":1642456042269,\"ticksUntilCycle\":21}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":60,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#BA55D3\",\"primary\":\"#9370DB\",\"primarydark\":\"#8A2BE2\",\"successlight\":\"#BA55D3\",\"success\":\"#9370DB\",\"successdark\":\"#8A2BE2\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-2504,\"y\":1007,\"opened\":true}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1642456044271","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642456044367"}}