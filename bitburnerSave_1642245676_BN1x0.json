{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":244,\"hp\":24,\"max_hp\":24,\"strength\":120,\"defense\":146,\"dexterity\":121,\"agility\":134,\"charisma\":162,\"intelligence\":0,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"hacking_exp\":1088499.9695414312,\"strength_exp\":21846.535999981465,\"defense_exp\":49422.37600014893,\"dexterity_exp\":22615.695999980595,\"agility_exp\":34090.81600013613,\"charisma_exp\":82230.02199965555,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"money\":35972224.3907331,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{\"Watchdog Security\":\"Software Engineering Intern\",\"Noodle Bar\":\"Waiter\"},\"companyName\":\"Noodle Bar\",\"currentServer\":\"home\",\"purchasedServers\":[\"mirage\",\"gremlin\",\"fear\",\"swig\",\"boomer\",\"leper\",\"crave\",\"vexed\",\"poleman\",\"wool\",\"orca\",\"sunburst\",\"chronic-noir\",\"alderman\",\"nugget\",\"treacher\",\"xion\",\"halogenic\",\"blood-rain\",\"gaucho\",\"bleach\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":135262.59999908155,\"ram\":64,\"totalMoneyGenerated\":366527606.625368,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":132410.5999989448,\"ram\":64,\"totalMoneyGenerated\":364395604.8911148,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":132401.19999894424,\"ram\":64,\"totalMoneyGenerated\":357680008.31292963,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":130095.79999888291,\"ram\":64,\"totalMoneyGenerated\":356410704.53585917,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":130008.99999888417,\"ram\":64,\"totalMoneyGenerated\":356389938.26437473,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":129627.19999889072,\"ram\":64,\"totalMoneyGenerated\":356375239.86259305,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":129614.59999889093,\"ram\":64,\"totalMoneyGenerated\":356377740.085935,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":127290.99999893011,\"ram\":64,\"totalMoneyGenerated\":356273829.5733074,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":127277.79999893036,\"ram\":64,\"totalMoneyGenerated\":345564674.2605672,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":125540.1999989475,\"ram\":64,\"totalMoneyGenerated\":345429327.01052547,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":125525.99999894745,\"ram\":64,\"totalMoneyGenerated\":345422656.0129758,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":119382.59999892369,\"ram\":64,\"totalMoneyGenerated\":344759482.0418616,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":44178.999999953165,\"ram\":64,\"totalMoneyGenerated\":250424142.68878877,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":44178.59999995317,\"ram\":64,\"totalMoneyGenerated\":250417254.60126838,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":44178.199999953176,\"ram\":64,\"totalMoneyGenerated\":250412349.48124227,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":44177.599999953185,\"ram\":64,\"totalMoneyGenerated\":250408258.9528202,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":388.3999999999872,\"ram\":64,\"totalMoneyGenerated\":2042872.885061495,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":387.7999999999872,\"ram\":64,\"totalMoneyGenerated\":2043210.6663992929,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":387.39999999998724,\"ram\":64,\"totalMoneyGenerated\":2043298.3122013183,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":386.7999999999873,\"ram\":64,\"totalMoneyGenerated\":2042856.6424430695,\"name\":\"hacknet-node-19\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"Netburners\",\"CyberSec\",\"Tian Di Hui\",\"Aevum\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"}],\"augmentations\":[],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1,\"crime_success_mult\":1,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"Tian Di Hui\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.15,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.25025641025641027,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":3750.569999998615,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":6176.810666666752,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":6059400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":true,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1642245675595,\"totalPlaytime\":135896000,\"playtimeSinceLastAug\":135896000,\"playtimeSinceLastBitnode\":135896000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-64726040,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":886682996.5615861,\"hacknet\":5261441055.38763,\"hacknet_expenses\":-1307929349.6785254,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-3120749979.961008,\"total\":35971224.3907331,\"work\":1052501.5,\"servers\":-1478749959.7224817,\"other\":-1800000,\"augmentations\":-139250000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-64726040,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":886682996.5615861,\"hacknet\":5261441055.38763,\"hacknet_expenses\":-1307929349.6785254,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-3120749979.961008,\"total\":35971224.3907331,\"work\":1052501.5,\"servers\":-1478749959.7224817,\"other\":-1800000,\"augmentations\":-139250000}},\"scriptProdSinceLastAug\":882485360,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642110450530},{\"ID\":\"NS2\",\"unlockedOn\":1642111950521},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642115796686},{\"ID\":\"TOR\",\"unlockedOn\":1642118076679},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642120036185},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642126767776},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642148465933},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642166619871},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642197369785},{\"ID\":\"4S\",\"unlockedOn\":1642240378617}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"17.2.3.4\",\"isConnectedTo\":true,\"maxRam\":512,\"messages\":[\"hackers-starting-handbook.lit\",\"sector-12-crime.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"democracy-is-dead.lit\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"FTPCrack.exe\"],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22320,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[11272,7,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23.1,\"onlineMoneyMade\":11272,\"onlineRunningTime\":84.01000000000066,\"pid\":22321,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22322,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22323,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[62484,2,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24.375,\"onlineMoneyMade\":62484,\"onlineRunningTime\":84.01000000000066,\"pid\":22324,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22325,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22326,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22327,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[173712,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21,\"onlineMoneyMade\":173712,\"onlineRunningTime\":84.01000000000066,\"pid\":22350,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22351,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22352,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22354,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22355,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[559639,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18,\"onlineMoneyMade\":559639,\"onlineRunningTime\":84.01000000000066,\"pid\":22356,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22357,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22359,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22360,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":22362,\"ramUsage\":4.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\r\\n\\r\\n    // Function must be async\\r\\n    // This function will be run a script on a remote server\\r\\n    async function remoteInjection_() {\\r\\n\\r\\n    }\\r\\n\\r\\n    // Run the function or it's uselss\\r\\n    remoteInjection_();\\r\\n}\",\"filename\":\"/newb/remoteInjection.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"372e2a8a3d93102bc70110ea5447dcfa0f13751bc7cba63bda35e0c0c2cb7959\",\"moduleSequenceNumber\":126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\r\\n\\r\\n    // Function must be async\\r\\n    async function template_() {\\r\\n\\r\\n    }\\r\\n\\r\\n    // Run the function or it's uselss\\r\\n    template_();\\r\\n}\",\"filename\":\"/newb/template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"64c5faf2d76f8bb7c99db305350623f114705d526d707030017f26b7c7501afa\",\"moduleSequenceNumber\":127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\r\\n\\t// Wrapping everything in a function to keep the variables from entering the global scope.\\r\\n\\tasync function simpleHack () {\\r\\n\\t\\tconst HOST_SERVER = \\\"home\\\";\\r\\n\\t\\t// Our target server and the name of this file\\r\\n\\t\\tconst TARGET_SERVER = ns.args[0];\\r\\n\\t\\tconst SCRIPT_NAME = \\\"simpleHack.js\\\";\\r\\n\\r\\n\\t\\t// Program names\\r\\n\\t\\tconst NUKE \\t\\t= \\\"NUKE.exe\\\";\\r\\n\\t\\tconst AUTO_LINK = \\\"AutoLink.exe\\\";\\r\\n\\t\\tconst BRUTE_SSH = \\\"BruteSSH.exe\\\";\\r\\n\\r\\n\\t\\tconst MAX_OPEN_PORTS = 1;\\r\\n\\r\\n\\t\\t// For tracking our hacking level\\r\\n\\t\\tlet hackingLevel;\\r\\n\\r\\n\\t\\t// We will want to know some system details, including how much we can weaken the target, before we hack\\r\\n\\t\\tlet minSecruityLevel;\\r\\n\\t\\tlet maxMoney;\\r\\n\\t\\tlet securityDecrease;\\r\\n\\r\\n\\t\\tlet openPorts = 0;\\r\\n\\t\\tlet portsRequired;\\r\\n\\r\\n\\t\\t// For checking avialble programs on the system\\r\\n\\t\\tlet hasNuke;\\r\\n\\t\\tlet hasAutoLink;\\r\\n\\t\\tlet hasBruteSSH;\\r\\n\\r\\n\\t\\t// We will want to keep track of how much money is available on the server as well as the security level.\\r\\n\\t\\tlet moneyAvailable;\\r\\n\\t\\tlet securityLevel;\\r\\n\\r\\n\\t\\t// Get some of the basic system details and other needed setup\\r\\n\\t\\tinitialize_();\\r\\n\\r\\n\\t\\t// First we lower the security level before hacking further\\r\\n\\t\\twhile (securityLevel > minSecruityLevel + securityDecrease) {\\r\\n\\t\\t\\tawait securityCheck_();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Grow the money until it is at least 90% of the maximum possible\\r\\n\\t\\twhile (moneyAvailable < maxMoney * 0.9) {\\r\\n\\t\\t\\tawait ns.grow(TARGET_SERVER);\\r\\n\\t\\t\\tawait securityCheck_();\\r\\n\\t\\t\\tmoneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Hack as long as there is 10% of the maximum money available.\\r\\n\\t\\t// Try to replenish funding when it falls below 85%, but I'm not sure\\r\\n\\t\\t// if max money means max money ever, or just a funding cap on the machine.\\r\\n\\t\\t// At the end of each loop, check the hacking level, and update our security decrease value t\\r\\n\\t\\twhile (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\r\\n\\t\\t\\tawait ns.hack(TARGET_SERVER);\\r\\n\\r\\n\\t\\t\\tif (moneyAvailable < maxMoney * 0.85) {\\r\\n\\t\\t\\t\\tawait ns.grow(TARGET_SERVER);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tawait securityCheck_();\\r\\n\\r\\n\\t\\t\\tlet currentHackingLevel = ns.getHackingLevel();\\r\\n\\t\\t\\tif (hackingLevel < currentHackingLevel) {\\r\\n\\t\\t\\t\\thackingLeveledUp_(currentHackingLevel);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tmoneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// If we cannot continuously grow money, then we will eventually kill the script when the\\r\\n\\t\\t// funding drops\\r\\n\\t\\tns.tprint(\\\"ERROR: No money to hack.\\\");\\r\\n\\t\\tns.kill(SCRIPT_NAME, HOST_SERVER, ns.args[0]);\\r\\n\\r\\n\\t\\t// Initialize by getting the min security level and max money so we can manage those\\r\\n\\t\\t// Also check how much weaken will affect the target, so we can determine how often to run it\\r\\n\\t\\tfunction initialize_() {\\r\\n\\t\\t\\tminSecruityLevel \\t= ns.getServerMinSecurityLevel(\\tTARGET_SERVER);\\r\\n\\t\\t\\tsecurityLevel \\t\\t= ns.getServerSecurityLevel(\\tTARGET_SERVER);\\r\\n\\t\\t\\tsecurityDecrease \\t= ns.weakenAnalyze(\\t\\t\\t\\tTARGET_SERVER);\\r\\n\\t\\t\\tmaxMoney \\t\\t\\t= ns.getServerMaxMoney(\\t\\t\\tTARGET_SERVER);\\r\\n\\t\\t\\tmoneyAvailable \\t\\t= ns.getServerMoneyAvailable(\\tTARGET_SERVER);\\r\\n\\r\\n\\t\\t\\tportsRequired\\t\\t= ns.getServerNumPortsRequired(\\tTARGET_SERVER);\\r\\n\\r\\n\\t\\t\\thackingLevel \\t\\t= ns.getHackingLevel();\\r\\n\\r\\n\\t\\t\\t// Check which programs are available on this computer\\r\\n\\t\\t\\thasNuke \\t= ns.fileExists(NUKE, HOST_SERVER);\\r\\n\\t\\t\\thasAutoLink = ns.fileExists(AUTO_LINK, HOST_SERVER);\\r\\n\\t\\t\\thasBruteSSH = ns.fileExists(BRUTE_SSH, HOST_SERVER);\\r\\n\\r\\n\\t\\t\\t// Check if we have root, if we don't see if we can get it\\r\\n\\t\\t\\t// Kill the script if we can't open enough ports\\r\\n\\t\\t\\tif (!ns.hasRootAccess(TARGET_SERVER)) {\\r\\n\\t\\t\\t\\tif (portsRequired > 0) {\\r\\n\\t\\t\\t\\t\\tif (hasBruteSSH) {\\r\\n\\t\\t\\t\\t\\t\\tns.brutessh(TARGET_SERVER);\\r\\n\\t\\t\\t\\t\\t\\tnuke();\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"ERROR: Missing BruteSSH.exe\\\");\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse if (portsRequired > MAX_OPEN_PORTS) {\\r\\n\\t\\t\\t\\t\\tns.tprint(\\\"ERROR: Cannot open enough ports\\\")\\r\\n\\t\\t\\t\\t\\tns.kill(SCRIPT_NAME, HOST_SERVER, ns.args[0]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\tnuke();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tns.tail(SCRIPT_NAME, HOST_SERVER, ns.args[0]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Check the security level and weaken it if it gets too high.\\r\\n\\t\\t// We can check how much weaken will work, so we will only use weaken if the security level exceeds\\r\\n\\t\\t// a threshold defined as the sum of the minimum security level plus the \\r\\n\\t\\tasync function securityCheck_() {\\r\\n\\t\\t\\tsecurityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tif (securityLevel >= minSecruityLevel + securityDecrease) {\\r\\n\\t\\t\\t\\tawait ns.weaken(TARGET_SERVER);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Run when our hacking level goes up\\r\\n\\t\\tfunction hackingLeveledUp_(newLevel) {\\r\\n\\t\\t\\tsecurityDecrease = ns.weakenAnalyze(TARGET_SERVER);\\r\\n\\t\\t\\thackingLevel = newLevel;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction nuke() {\\r\\n\\t\\t\\tif (hasNuke) {\\r\\n\\t\\t\\t\\tns.nuke(TARGET_SERVER);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tns.tprint(\\\"ERROR: missing NUKE.exe\\\");\\r\\n\\t\\t\\t\\tns.kill(SCRIPT_NAME, HOST_SERVER, ns.args[0]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tawait simpleHack();\\r\\n}\",\"filename\":\"/newb/simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newb/simpleHack.js\",\"url\":\"blob:file:///ff9ea9fd-7f39-48d3-8154-8de224629570\"}],\"ramUsage\":4.3,\"server\":\"home\",\"_hash\":\"589b14c469bb2a5adabc38ca9c75260a35b297598bdd396789abb971848cb594\",\"moduleSequenceNumber\":128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    // Our target server and the name of this file\\r\\n\\tlet TARGET_SERVER = \\\"n00dles\\\";\\r\\n\\tlet SCRIPT_NAME = \\\"n00dles.js\\\";\\r\\n\\r\\n    // For tracking our hacking level\\r\\n\\tlet hackingLevel;\\r\\n\\r\\n    // We will want to know some system details, including how much we can weaken the target, before we hack\\r\\n\\tlet minSecruityLevel;\\r\\n\\tlet maxMoney;\\r\\n\\tlet securityDecrease;\\r\\n\\r\\n    // We will want to keep track of how much money is available on the server.\\r\\n\\tlet moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\r\\n\\r\\n    // Get some of the basic system details and other needed setup\\r\\n\\tinitialize_();\\r\\n\\r\\n\\t// Grow the money until it is at least 90% of the maximum possible\\r\\n\\twhile (moneyAvailable < maxMoney * 0.9) {\\r\\n\\t\\tawait ns.grow(TARGET_SERVER);\\r\\n\\t\\tawait securityCheck_();\\r\\n        moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\r\\n\\t}\\r\\n\\r\\n\\t// Hack as long as there is 10% of the maximum money available.\\r\\n\\t// Try to replenish funding when it falls below 85%, but I'm not sure\\r\\n\\t// if max money means max money ever, or just a funding cap on the machine.\\r\\n\\t// At the end of each loop, check the hacking level, and update our security decrease value t\\r\\n\\twhile (moneyAvailable > maxMoney * 0.1) {\\r\\n\\t\\tawait ns.hack(TARGET_SERVER);\\r\\n\\r\\n\\t\\tif (moneyAvailable < maxMoney * 0.85) {\\r\\n\\t\\t\\tawait ns.grow(TARGET_SERVER);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tawait securityCheck_();\\r\\n\\r\\n\\t\\tlet currentHackingLevel = ns.getHackingLevel();\\r\\n\\t\\tif (hackingLevel < currentHackingLevel) {\\r\\n\\t\\t\\thackingLeveledUp_(currentHackingLevel);\\r\\n\\t\\t}\\r\\n\\r\\n        moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\r\\n\\t}\\r\\n\\r\\n\\t// If we cannot continuously grow money, then we will eventually kill the script when the\\r\\n\\t// funding drops\\r\\n\\tkill(SCRIPT_NAME);\\r\\n\\r\\n\\t// Initialize by getting the min security level and max money so we can manage those\\r\\n\\t// Also check how much weaken will affect the target, so we can determine how often to run it\\r\\n\\tfunction initialize_() {\\r\\n\\t\\tminSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\r\\n\\t\\tsecurityDecrease = ns.weakenAnalyze(TARGET_SERVER);\\r\\n\\t\\tmaxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\r\\n\\t\\thackingLevel = ns.getHackingLevel();\\r\\n\\t\\tns.tail(SCRIPT_NAME);\\r\\n\\t}\\r\\n\\r\\n\\t// Check the security level and weaken it if it gets too high.\\r\\n\\t// We can check how much weaken will work, so we will only use weaken if the security level exceeds\\r\\n\\t// a threshold defined as the sum of the minimum security level plus the \\r\\n\\tasync function securityCheck_() {\\r\\n\\t\\tlet securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\r\\n\\t\\t\\r\\n\\t\\tif (securityLevel >= minSecruityLevel + securityDecrease) {\\r\\n\\t\\t\\tawait ns.weaken(TARGET_SERVER);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// Run when our hacking level goes up\\r\\n\\tfunction hackingLeveledUp_(newLevel) {\\r\\n\\t\\tsecurityDecrease = ns.weakenAnalyze(TARGET_SERVER);\\r\\n\\t\\thackingLevel = newLevel;\\r\\n\\t}\\r\\n}\",\"filename\":\"/newb/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.95,\"server\":\"home\",\"_hash\":\"337cc700ff747663812f69165953107902f47f25ffbb86baaeb28b9f2a3fd4b6\",\"moduleSequenceNumber\":129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"home\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":20347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    async function template() {\\n    }\\n    // Run the function or it's useless\\n    await template();\\n}\",\"filename\":\"/js/template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"91406ade9fdc0987f106d086167ab063bd3e9f7d4b9ed704e8b240985c905649\",\"moduleSequenceNumber\":131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"home\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Turns out this object exists in NS and this is not needed at all, whoops. Just use Server from the NS definitions.\\nexport class System {\\n    constructor(netscript, host, threads) {\\n        this.ns = netscript;\\n        // If there is no hostname passed in, get the host that the script is running on\\n        this.host = host || this.ns.getHostname();\\n        this.threads = threads || 1;\\n        this.securityMinLevel = this.ns.getServerMinSecurityLevel(this.host);\\n        this.securityLevel = this.ns.getServerSecurityLevel(this.host);\\n        this.securityWeakenAmount = this.ns.weakenAnalyze(this.threads);\\n        this.moneyMaxAvailable = this.ns.getServerMaxMoney(this.host);\\n        this.moneyAvailable = this.ns.getServerMoneyAvailable(this.host);\\n        this.portsRequired = this.ns.getServerNumPortsRequired(this.host);\\n        this.hackingLevelRequired = this.ns.getServerRequiredHackingLevel(this.host);\\n        this.hasRoot = this.ns.hasRootAccess(this.host);\\n    }\\n    updateSecurityLevel() {\\n        this.securityLevel = this.ns.getServerSecurityLevel(this.host);\\n    }\\n    updateSecurityWeakenAmount() {\\n        this.securityLevel = this.ns.weakenAnalyze(this.threads);\\n    }\\n    updateMoneyAvailable() {\\n        this.moneyAvailable = this.ns.getServerMoneyAvailable(this.host);\\n    }\\n    updateRootAccess() {\\n        this.hasRoot = this.ns.hasRootAccess(this.host);\\n    }\\n}\",\"filename\":\"/js/common/system.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.3,\"server\":\"home\",\"_hash\":\"fab10d0d48327d48ad452479dfc8fc270e33e3e454cf861e81ea49c5dc0e24e1\",\"moduleSequenceNumber\":136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Pretty useless class, I thought I would do more with it\\nexport class Argument {\\n    constructor(argument, argumentIndex) {\\n        this.index = argumentIndex;\\n        this.type = typeof (argument);\\n        this.value = argument;\\n    }\\n    isString() {\\n        if (this.type == \\\"string\\\") {\\n            return true;\\n        }\\n        else {\\n            return false;\\n        }\\n    }\\n    isNumber() {\\n        if (this.type == \\\"number\\\") {\\n            return true;\\n        }\\n        else {\\n            return false;\\n        }\\n    }\\n    isBoolean() {\\n        if (this.type == \\\"string\\\") {\\n            return true;\\n        }\\n        else {\\n            return false;\\n        }\\n    }\\n    static parseArgs(ns, args) {\\n        let parsedArgs = [];\\n        if (args.length == 0) {\\n            ns.tprint(\\\"Error: No arguments passed to parseArgs. Got: \\\" + args.toString());\\n        }\\n        for (let index = 0; index < args.length; index++) {\\n            new Argument(args[index], index);\\n        }\\n        return parsedArgs;\\n    }\\n}\",\"filename\":\"/js/common/argument.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"9828ee39163d4e69a120424f014e3cf7d66fcc923a915d88ea09d7487610f7c7\",\"moduleSequenceNumber\":137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    async function purchaseServers() {\\n        let purchasedServerMaxRam = ns.getPurchasedServerMaxRam();\\n        let purchasedServerLimit = ns.getPurchasedServerLimit();\\n        let purchasedServers = ns.getPurchasedServers();\\n        ns.tprint(\\\"Max RAM can purchase: \\\" + purchasedServerMaxRam);\\n        ns.tprint(\\\"Total Servers: \\\" + purchasedServers.length + \\\" / \\\" + purchasedServerLimit);\\n        ns.tprint(\\\"Price of Max RAM server: \\\" + ns.getPurchasedServerCost(purchasedServerMaxRam));\\n        ns.tprint(\\\"Purchased Servers: \\\" + purchasedServers);\\n        if (ns.args.length == 0) {\\n            ns.tprint(\\\"Script usage: run purchaseServers.js isBuying RAM_Exponent? Hostname?\\\");\\n            ns.tprint(\\\"RAM is purchased using 2 to the RAM_Exponent power.\\\");\\n        }\\n        // Check if we are buying or just looking for information\\n        // If we are buying, then we check the arguments to make sure they are correct. We then set up a confirmation\\n        // prompt to avoid wasting money if we put in something wrong.\\n        if (typeof (ns.args[0]) == \\\"boolean\\\") {\\n            let isBuying = ns.args[0];\\n            if (isBuying) {\\n                if (ns.args.length > 2) {\\n                    if (typeof (ns.args[1]) == \\\"number\\\") {\\n                        if (typeof (ns.args[2]) == \\\"string\\\") {\\n                            let requestedRAM = Math.pow(2, ns.args[1]);\\n                            let hostname = ns.args[2];\\n                            let hasConfirmed = await ns.prompt(\\\"Purchasing a \\\" + requestedRAM + \\\" GB server for \\\"\\n                                + ns.getPurchasedServerCost(requestedRAM) + \\\" with hostname, \\\"\\n                                + hostname + \\\". Is this correct?\\\");\\n                            if (hasConfirmed) {\\n                                ns.purchaseServer(hostname, requestedRAM);\\n                                ns.tprint(\\\"Server purchased. Hostname: \\\" + hostname);\\n                            }\\n                            else {\\n                                ns.tprint(\\\"Purchase canceled.\\\");\\n                            }\\n                            ;\\n                        }\\n                        else {\\n                            ns.tprint(\\\"Error: args[2] not a string. Got \\\" + ns.args[2].toString());\\n                        }\\n                    }\\n                    else {\\n                        ns.tprint(\\\"Error: args[1] not a number. Got \\\" + ns.args[1].toString());\\n                    }\\n                }\\n            }\\n            // If we are not buying, then use the second argument to check the cost of the server for that amount\\n            // of RAM\\n            else {\\n                if (ns.args.length > 1) {\\n                    if (typeof (ns.args[1]) == \\\"number\\\") {\\n                        let requestedRAM = Math.pow(2, ns.args[1]);\\n                        ns.tprint(\\\"Price of requested \\\" + requestedRAM + \\\" GB RAM server: \\\"\\n                            + ns.getPurchasedServerCost(requestedRAM));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    // Run the function or it's useless\\n    await purchaseServers();\\n}\",\"filename\":\"/js/common/util/purchaseServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/util/purchaseServers.js\",\"url\":\"blob:file:///029b9d7d-66e6-49b9-8362-11cf79f07c8b\"}],\"ramUsage\":6.45,\"server\":\"home\",\"_hash\":\"27b8e2d733f4180c3d94d55f1c98fcd0e1e07f65cfaaa26ef175ad650b5704fd\",\"moduleSequenceNumber\":8209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\n// Once again I am dumb. You can't even copy programs to servers.\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    ns.tail();\\n    // Function must be async\\n    // Get purchased servers and copy all available scripts to them\\n    async function copyProgramsToServers() {\\n        const HOST_SERVER = ns.getHostname();\\n        let purchasedServers;\\n        let filesToCopy = [];\\n        let failedCopies = [];\\n        /*\\n        // For checking avialble programs on the system\\n        let hasNuke             : boolean;\\n        let hasAutoLink         : boolean;\\n        let hasDeepScanV1       : boolean;\\n        let hasServerProfiler   : boolean;\\n        let hasBruteSSH         : boolean;\\n        let hasFTPCrack         : boolean;\\n        */\\n        function initialize() {\\n            // Check which programs are available on this computer\\n            /*\\n            hasNuke \\t        = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink         = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasDeepScanV1       = ns.fileExists(PROGRAMS.DEEPSCAN_V1, HOST_SERVER);\\n            hasServerProfiler   = ns.fileExists(PROGRAMS.SERVER_PROFILER, HOST_SERVER);\\n            hasBruteSSH         = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack         = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            */\\n            purchasedServers = ns.getPurchasedServers();\\n            for (let program of PROGRAMS.all()) {\\n                ns.tprint(program);\\n                ns.tprint(HOST_SERVER);\\n                ns.tprint(ns.fileExists(program, HOST_SERVER));\\n                if (ns.fileExists(program, HOST_SERVER)) {\\n                    filesToCopy.push(program);\\n                }\\n            }\\n            ns.tprint(\\\"Files ready to copy: \\\" + filesToCopy);\\n        }\\n        async function copyFiles() {\\n            for (let server in purchasedServers) {\\n                let fileCopied = await ns.scp(filesToCopy, HOST_SERVER, server);\\n                if (!fileCopied) {\\n                    failedCopies.push(server);\\n                }\\n            }\\n            ns.tprint(\\\"Finished copying. \\\" + failedCopies.length + \\\" Failures. Failed servers: \\\" + failedCopies);\\n        }\\n        initialize();\\n        await copyFiles();\\n    }\\n    // Run the function or it's useless\\n    await copyProgramsToServers();\\n}\",\"filename\":\"/js/common/util/copyProgramsToServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///9f45841f-6a3e-4fe5-8460-fbacdd1c5425\"},{\"filename\":\"/js/common/util/copyProgramsToServers.js\",\"url\":\"blob:file:///61b14747-5e70-43c6-890e-1341af6db4af\"}],\"ramUsage\":4.6,\"server\":\"home\",\"_hash\":\"04f453fa269e9f227e89f0f733aeded27fa694cddebfe748855db84480a2522b\",\"moduleSequenceNumber\":139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SCRIPTS {\\n    static all() {\\n        let allScripts = [];\\n        allScripts.push(SCRIPTS.CONSTANTS);\\n        allScripts.push(SCRIPTS.PROGRAMS);\\n        allScripts.push(SCRIPTS.SERVERS);\\n        allScripts.push(SCRIPTS.KILL_THEN_INJECT);\\n        allScripts.push(SCRIPTS.GAIN_ROOT);\\n        allScripts.push(SCRIPTS.SIMPLE_HACK);\\n        allScripts.push(SCRIPTS.CRAWL);\\n        allScripts.push(SCRIPTS.RUN_KNOWN_HOSTS);\\n        return allScripts;\\n    }\\n}\\nSCRIPTS.CONSTANTS = \\\"/js/common/constants/constants.js\\\";\\nSCRIPTS.PROGRAMS = \\\"/js/common/constants/programs.js\\\";\\nSCRIPTS.SERVERS = \\\"/js/common/constants/servers.js\\\";\\nSCRIPTS.KILL_THEN_INJECT = \\\"/js/common/util/killThenInject.js\\\";\\nSCRIPTS.GAIN_ROOT = \\\"/js/gainRoot.js\\\";\\nSCRIPTS.SIMPLE_HACK = \\\"/js/simpleHack.js\\\";\\nSCRIPTS.CRAWL = \\\"/js/crawl.js\\\";\\nSCRIPTS.RUN_KNOWN_HOSTS = \\\"/js/runOnKnownHosts.js\\\";\",\"filename\":\"/js/common/constants/scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"a2f163d9b7d6f00d1bc00fd9d435748f01a2f1b4b6d06ba942705ca9edd6fedb\",\"moduleSequenceNumber\":140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SCRIPTS } from \\\"js/common/constants/scripts\\\";\\n// Once again I am dumb. You can't even copy programs to servers.\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // Get purchased servers and copy all available scripts to them\\n    async function copyProgramsToServers() {\\n        const HOST_SERVER = ns.getHostname();\\n        let purchasedServers;\\n        let filesToCopy = [];\\n        let failedCopies = [];\\n        /*\\n        // For checking avialble programs on the system\\n        let hasNuke             : boolean;\\n        let hasAutoLink         : boolean;\\n        let hasDeepScanV1       : boolean;\\n        let hasServerProfiler   : boolean;\\n        let hasBruteSSH         : boolean;\\n        let hasFTPCrack         : boolean;\\n        */\\n        function initialize() {\\n            // Check which programs are available on this computer\\n            /*\\n            hasNuke \\t        = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink         = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasDeepScanV1       = ns.fileExists(PROGRAMS.DEEPSCAN_V1, HOST_SERVER);\\n            hasServerProfiler   = ns.fileExists(PROGRAMS.SERVER_PROFILER, HOST_SERVER);\\n            hasBruteSSH         = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack         = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            */\\n            purchasedServers = ns.getPurchasedServers();\\n            for (let script of SCRIPTS.all()) {\\n                if (ns.fileExists(script, HOST_SERVER)) {\\n                    filesToCopy.push(script);\\n                }\\n            }\\n            ns.tprint(\\\"Files ready to copy: \\\" + filesToCopy);\\n        }\\n        async function copyFiles() {\\n            for (let server of purchasedServers) {\\n                let fileCopied = await ns.scp(filesToCopy, HOST_SERVER, server);\\n                if (!fileCopied) {\\n                    failedCopies.push(server);\\n                }\\n            }\\n            ns.tprint(\\\"Finished copying. \\\" + failedCopies.length + \\\" Failures. \\\\n Failed servers: \\\" + failedCopies);\\n        }\\n        initialize();\\n        await copyFiles();\\n    }\\n    // Run the function or it's useless\\n    await copyProgramsToServers();\\n}\",\"filename\":\"/js/common/util/copyScriptsToServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/scripts.js\",\"url\":\"blob:file:///45996210-f741-424e-8ffc-5a5f00393fa5\"},{\"filename\":\"/js/common/util/copyScriptsToServers.js\",\"url\":\"blob:file:///8d1ae56b-c77d-4cc7-889c-88f099b00239\"}],\"ramUsage\":4.6,\"server\":\"home\",\"_hash\":\"e0442fc86b31b65b30386c51ee9566dc55055d3252a6506e010edcd4015866e9\",\"moduleSequenceNumber\":1755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"home\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    ns.tail();\\n    // Function must be async\\n    // This function should get server details and output a report\\n    async function analyzeServer() {\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        async function initialize() {\\n        }\\n        await initialize();\\n    }\\n    // Run the function or it's useless\\n    await analyzeServer();\\n}\",\"filename\":\"/js/analyzeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"88ac8cec007b20b6e7c7da47070d82cf53b9431b482b441ce2dcd0b75a05eba4\",\"moduleSequenceNumber\":143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"home\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SCRIPTS } from \\\"js/common/constants/scripts\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    ns.tail();\\n    // Function must be async\\n    async function runOnAllServers() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run.\\\");\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let arg2 = false;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"boolean\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not boolean. It should be the whether or not to kill \\\"\\n                    + \\\"all scripts before running new ones.\\\");\\n            }\\n        }\\n        const SHOULD_KILL = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        let purchasedServers;\\n        async function initiailize() {\\n            purchasedServers = ns.getPurchasedServers();\\n            purchasedServers.push(HOST_SERVER);\\n        }\\n        // Execute the script on each server, passing in args if we have them\\n        async function remoteExecute() {\\n            for (let server of purchasedServers) {\\n                if (SHOULD_KILL) {\\n                    if (server == HOST_SERVER) {\\n                        if (purchasedServers.length > 1) {\\n                            // LMAO\\n                            ns.exec(SCRIPTS.KILL_THEN_INJECT, purchasedServers[1], THREADS, HOST_SERVER, SCRIPT_NAME, THREADS, ...args);\\n                        }\\n                        else {\\n                            ns.print(\\\"Error: Can't Kill All and execute with only one server! Kill all first, then run with arg[2] = false.\\\");\\n                        }\\n                    }\\n                    ns.killall(server);\\n                }\\n                if (TOTAL_ARGS > 3) {\\n                    ns.exec(SCRIPT_NAME, server, THREADS, ...args);\\n                }\\n                else {\\n                    ns.exec(SCRIPT_NAME, server, THREADS);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnAllServers();\\n}\",\"filename\":\"/js/runOnAllServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/scripts.js\",\"url\":\"blob:file:///45996210-f741-424e-8ffc-5a5f00393fa5\"},{\"filename\":\"/js/runOnAllServers.js\",\"url\":\"blob:file:///dd1085ea-53b2-4d9c-b448-46d72bec6f65\"}],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"cc8709c2dbeca5d8707c97e87ef8f56086748d4674d54b5d16939a4a0b300b9d\",\"moduleSequenceNumber\":979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"blob:file:///11575556-7680-465d-8555-427c15945676\"}],\"ramUsage\":3.45,\"server\":\"home\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"mirage\",\"gremlin\",\"fear\",\"swig\",\"boomer\",\"leper\",\"crave\",\"vexed\",\"poleman\",\"wool\",\"orca\",\"sunburst\",\"chronic-noir\",\"alderman\",\"nugget\",\"treacher\",\"xion\",\"halogenic\",\"blood-rain\",\"gaucho\",\"bleach\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nhome\\n\\nDepth 1: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 2: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 3: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 4: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 5: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 6: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 7: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 8: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 9: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 10: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 11: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 12: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 13: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 14: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 15: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 16: \\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"home\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.9460000000000008,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-12592-Sector-12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"19846107\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"22.2.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":53440140279,\"moneyMax\":1336003506975,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1131,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"22.5.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":54282983943,\"moneyMax\":1357074598575,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1289,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-755835-NoodleBar.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[38,63,107,14,131,52,60,28,128,1,144],\"reward\":{\"name\":\"Noodle Bar\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"68.4.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":20642605085,\"moneyMax\":516065127125,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":984,\"serverGrowth\":64}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"62.4.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":36209117317,\"moneyMax\":905227932925,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1163,\"serverGrowth\":72}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-68967.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,9,0,0],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-498174-WatchdogSecurity.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[5,8],[4,7],[15,18],[16,17],[19,29],[25,32],[11,15],[17,19],[16,22]],\"reward\":{\"name\":\"Watchdog Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-181734.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,0,0,8,0,4,4,4,0,0,7,8,10,4,0,4,10,0,3,4,9,3,10],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"79.4.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":36615099081,\"moneyMax\":915377477025,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1269,\"serverGrowth\":95}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-805978-Sector-12.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[6,6],[7,6,1],[4,1,5,1],[8,9,4,6,5],[4,1,1,1,9,8],[5,9,1,1,8,9,7],[8,8,3,7,6,1,3,9]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"79.0.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":16620776550,\"moneyMax\":415519413750,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":982,\"serverGrowth\":49}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"89.3.9.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":19216083437,\"moneyMax\":480402085925,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1035,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-171951.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1731548200\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"45.6.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":17119169570,\"moneyMax\":427979239250,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1004,\"serverGrowth\":95}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-851838.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[82,133,147,152,79,130,77,160,105,11,71,178,31,1,144,56,39,30,178,107,78,56,58,176,174,80,103,60,17,64,58,73,152],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"71.1.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":29818984621,\"moneyMax\":745474615525,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1110,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"9.3.1.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1657683555,\"moneyMax\":41442088875,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1248,\"serverGrowth\":90}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-997517-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,11],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"59.1.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1331,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"68.4.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1033260646,\"moneyMax\":25831516150,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":921,\"serverGrowth\":68}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-388998-WatchdogSecurity.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"21824021583\",\"reward\":{\"name\":\"Watchdog Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"1.6.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":810237585,\"moneyMax\":20255939625,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1015,\"serverGrowth\":60}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"85.5.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":692003419,\"moneyMax\":17300085475,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":909,\"serverGrowth\":53}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"23.3.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":561883150,\"moneyMax\":14047078750,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":853,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-827052-NoodleBar.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[17,35,25,119,131,128],\"reward\":{\"name\":\"Noodle Bar\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"61.4.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":797462783,\"moneyMax\":19936569575,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":879,\"serverGrowth\":60}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-885827.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"33.7.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":955254300,\"moneyMax\":23881357500,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":894,\"serverGrowth\":86}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"62.1.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1185498729,\"moneyMax\":29637468225,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":856,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-543533.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,1,0,0,0,0,0,0],[0,0,0,0,0,1,1,0,0,0,0,0],[0,1,0,0,1,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,1,0,0,0],[0,0,0,0,1,0,1,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"17.0.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":823923480,\"moneyMax\":20598087000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":871,\"serverGrowth\":75}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-876791.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[132,155,156,6,61,96,87,19,37,49,156,163,29,134,198,56,9,26,120,111,102,164,124,16,162,179,101,191,61,129,53,10,3,52,102,11,162],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-552418.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"509843\",-39],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"19.6.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":576308914,\"moneyMax\":14407722850,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":846,\"serverGrowth\":70}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-677611.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[8,1],[1,2,4],[2,1,9,9],[2,9,8,4,3],[5,2,4,9,1,6],[9,2,2,1,3,3,9],[8,1,4,6,7,2,7,6],[9,2,7,2,5,2,5,8,3]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-702378-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,0,1,0],[0,0,0,0],[0,1,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"22.1.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":887245710,\"moneyMax\":22181142750,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":927,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-145419.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[2,5],[6,3,2],[3,9,9,6],[6,8,8,7,9],[5,6,7,9,3,9],[4,1,1,1,8,2,7],[8,3,1,9,3,2,5,9],[6,1,3,6,4,9,5,9,1],[2,9,3,4,2,7,9,9,6,6],[8,5,2,6,4,2,3,4,8,6,8]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"18.9.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":810017222,\"moneyMax\":20250430550,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":844,\"serverGrowth\":77}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-656350.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"21612125116\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"20.2.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1047026923,\"moneyMax\":26175673075,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":880,\"serverGrowth\":65}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"24.1.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":901427389,\"moneyMax\":22535684725,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":858,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-647473-Sector-12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,1,1,0,0,0,0,0],[1,0,0,0,0,1,1,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"33.0.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":961615202,\"moneyMax\":24040380050,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":794,\"serverGrowth\":75}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"0.4.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":767346472,\"moneyMax\":19183661800,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":815,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-668898-Sector-12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0,0,0,0,0],[1,0,1,1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"52.3.7.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":703760564,\"moneyMax\":17594014100,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":850,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"34.4.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1484320356,\"moneyMax\":37108008900,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":842,\"serverGrowth\":58}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"60.4.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1607211752,\"moneyMax\":40180293800,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":821,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"64.0.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1233640144,\"moneyMax\":30841003600,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":850,\"serverGrowth\":84}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"77.1.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1471703618,\"moneyMax\":36792590450,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":820,\"serverGrowth\":71}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"89.7.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1089395363,\"moneyMax\":27234884075,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":781,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"2.8.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":774686909,\"moneyMax\":19367172725,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":671,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"21.2.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":641691497,\"moneyMax\":16042287425,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":501,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-969792-NoodleBar.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")a())aa)a(a\",\"reward\":{\"name\":\"Noodle Bar\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"83.1.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":678602109,\"moneyMax\":16965052725,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":572,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"23.1.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":374826664,\"moneyMax\":9370666600,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":430,\"serverGrowth\":37}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"29.2.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":226709143,\"moneyMax\":5667728575,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":428,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-750735.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[186,100,86,199,44,123,91,12,175,17,98,157,80,136,112,107,81,11,143,153,180,77,200,37,192,103,116,97,99,82,127,123,115,156,24,107,82,69],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"84.9.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"rho-construction\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":929760600,\"moneyMax\":23244015000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":775,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-272527.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[11,18],[20,23],[18,21],[3,9],[19,27],[8,14],[7,13],[10,11]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"60.6.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":270904104,\"moneyMax\":6772602600,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":460,\"serverGrowth\":48}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"44.4.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":424147080,\"moneyMax\":10603677000,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":646,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-404649-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[93,42,15,28,163,158,177,81,22,109,42,23,126,144,93,27,43,134,185,192,20],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-371074.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[96,138,4,140,7,189,186,135,83,9,30,156,92,51,170,87,46,15,61,26,129,186,22,154,113,161,43,6,48,175,83,187,90,115,71,191,155,159,112,130,165,174,20,26,27,56,56],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"30.6.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":312190089,\"moneyMax\":7804752225,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":432,\"serverGrowth\":44}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-89437.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[64,67,27,36,107,154,46,190,94,135,129,171,95,169,60,176,88,107,74,171,91,128,141,110,147,63,181,154,153,195,47,15,172,145,24]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-111165.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[66,42,64,193,148,169,192,133,114,185,41,12,170],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"89.0.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":36.35000000000049,\"minDifficulty\":15,\"moneyAvailable\":171693319,\"moneyMax\":4292332975,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":280,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"38.7.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":236846397,\"moneyMax\":5921159925,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":308,\"serverGrowth\":53}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-543730.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":958486565,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"44.7.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":400,\"serverGrowth\":47}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"94.0.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":36.600000000000534,\"minDifficulty\":15,\"moneyAvailable\":70935154,\"moneyMax\":1773378850,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":253,\"serverGrowth\":59}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-803169.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2201279621\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"4.4.3.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":2.0419999999999963,\"minDifficulty\":1,\"moneyAvailable\":275216.91900387267,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"17.5.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.7999999999999505,\"minDifficulty\":3,\"moneyAvailable\":5233043.630973093,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-111307.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[6,8,29,35,31,1,12,3],[43,18,12,44,36,17,34,34],[48,12,41,21,21,46,15,34],[28,12,22,24,32,19,21,43],[14,24,39,24,48,17,30,6],[10,35,11,36,24,37,45,24],[46,4,50,33,47,3,48,19],[39,30,33,25,9,33,41,48],[37,41,22,46,38,33,6,34],[2,24,6,30,50,29,11,31],[37,44,14,11,18,17,49,44],[28,40,19,38,39,36,39,10],[4,50,16,47,41,21,14,31],[32,44,26,17,27,44,41,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"4.0.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.5379999999999696,\"minDifficulty\":3,\"moneyAvailable\":5873551.940720303,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"7.0.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.595999999999897,\"minDifficulty\":5,\"moneyAvailable\":7620780.14151828,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-772315.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a)a)())(()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"95.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.402000000000106,\"minDifficulty\":8,\"moneyAvailable\":31747561.20788946,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"81.6.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.63399999999993,\"minDifficulty\":7,\"moneyAvailable\":8750744.116249725,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"62.2.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.234000000000078,\"minDifficulty\":8,\"moneyAvailable\":17087344.19871267,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"62.5.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.071999999999992,\"minDifficulty\":10,\"moneyAvailable\":75546116.84254763,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"10.3.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.591999999999935,\"minDifficulty\":5,\"moneyAvailable\":9174036.867586806,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"60.1.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.607999999999928,\"minDifficulty\":5,\"moneyAvailable\":14600551.865039261,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-349457.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[38,132,15,82,98,57,139,14,141,132,10,120,51,77,147,156,185,116,115,25,39,167,115,94,119,188,156,124,143,39,27,99,79,7],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"9.8.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.27399999999997,\"minDifficulty\":7,\"moneyAvailable\":118916868.56417632,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-719591.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"162883\",-34],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-51303.cct\",\"type\":\"Total Ways to Sum\",\"data\":60,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"50.3.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.373999999999959,\"minDifficulty\":5,\"moneyAvailable\":36722926.1834815,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-92126.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,1,10,0,6,5,2,9,10,8,8,7,1,1,8,3,0,4,4,2,5,5,4,0,0],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-74014.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[5,2],[7,2,3],[3,4,9,8],[3,5,8,3,9],[7,3,1,3,3,1],[5,5,3,7,3,3,7],[3,8,5,8,6,5,2,3],[2,2,8,9,2,2,3,2,6],[3,4,9,7,7,7,3,6,3,3],[2,8,4,2,7,6,7,3,3,3,5]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"27.7.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":9,\"minDifficulty\":9,\"moneyAvailable\":95860906.1025575,\"moneyMax\":1725027550,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":203,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-362537.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"147137102253\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"65.9.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":23.65000000000028,\"minDifficulty\":13,\"moneyAvailable\":51091288,\"moneyMax\":1277282200,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":228,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"36.7.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.107999999999988,\"minDifficulty\":10,\"moneyAvailable\":40212694.12500149,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"91.2.5.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":516,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"13.6.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":958,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-994101.cct\",\"type\":\"Total Ways to Sum\",\"data\":37,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"41.0.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":686,\"serverGrowth\":52}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"35.9.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":505,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"11.4.4.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":359,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-76478.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[6,92,63,184,197,156,37,98,7,120,4,116,143,57,199,78,148,108,125,116,190,73,99,148,112,122,191,91,164,159,100,185],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"76.7.4.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":207,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-263725.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":997481386,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"6.8.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":515,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"83.0.9.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-701822.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[134,85,190,173,71,177,117,170,135,25,44],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-566891.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-3,8,1,-2,-6,8,6,-8,6,-10,0,1,-5,3,10,-1,8,-7,-2,-8,6,-3,10,-5,9,4,10,-8,8,3],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"67.2.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"84.9.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"14.4.7.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"mirage\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"mirage\",\"httpPortOpen\":false,\"ip\":\"55.7.3.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19818,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[13411,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":13411,\"onlineRunningTime\":84.01000000000066,\"pid\":19819,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19820,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19821,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[128631,4,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":37.5,\"onlineMoneyMade\":128631,\"onlineRunningTime\":84.01000000000066,\"pid\":19822,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19823,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19824,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19825,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[180604,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21,\"onlineMoneyMade\":180604,\"onlineRunningTime\":84.01000000000066,\"pid\":19847,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19848,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19849,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19851,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19852,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[578098,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18,\"onlineMoneyMade\":578098,\"onlineRunningTime\":84.01000000000066,\"pid\":19853,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19854,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19856,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19857,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19859,\"ramUsage\":4.75,\"server\":\"mirage\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"mirage\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"mirage\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"mirage\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"mirage\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"mirage\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":18656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"mirage\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"mirage\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"mirage\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nmirage\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"mirage\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"gremlin\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"gremlin\",\"httpPortOpen\":false,\"ip\":\"35.9.6.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19866,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[11134,7,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23.925,\"onlineMoneyMade\":11134,\"onlineRunningTime\":84.01000000000066,\"pid\":19867,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19868,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19869,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[66793,2,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24.375,\"onlineMoneyMade\":66793,\"onlineRunningTime\":84.01000000000066,\"pid\":19870,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19871,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19872,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19873,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[91995,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13.125,\"onlineMoneyMade\":91995,\"onlineRunningTime\":84.01000000000066,\"pid\":19895,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19896,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19897,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19899,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19900,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[576758,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18,\"onlineMoneyMade\":576758,\"onlineRunningTime\":84.01000000000066,\"pid\":19901,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19902,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19904,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19905,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19907,\"ramUsage\":4.75,\"server\":\"gremlin\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"gremlin\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"gremlin\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"gremlin\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"gremlin\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"gremlin\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":18704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"gremlin\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"gremlin\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"blob:file:///3a52282e-4b41-4f20-8afd-c662f6e4360f\"}],\"ramUsage\":3.45,\"server\":\"gremlin\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":1118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\ngremlin\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"gremlin\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"fear\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"fear\",\"httpPortOpen\":false,\"ip\":\"6.3.9.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19914,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[13310,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":13310,\"onlineRunningTime\":84.01000000000066,\"pid\":19915,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19916,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19917,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[99441,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":99441,\"onlineRunningTime\":84.01000000000066,\"pid\":19918,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19919,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19920,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19921,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[91748,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13.125,\"onlineMoneyMade\":91748,\"onlineRunningTime\":84.01000000000066,\"pid\":19943,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19944,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19945,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19947,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19948,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19949,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19950,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19952,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19953,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19955,\"ramUsage\":4.75,\"server\":\"fear\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"fear\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"fear\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"fear\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"fear\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"fear\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":18752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"fear\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"fear\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"fear\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nfear\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"fear\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"swig\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"swig\",\"httpPortOpen\":false,\"ip\":\"55.1.4.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19962,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[13256,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":13256,\"onlineRunningTime\":84.01000000000066,\"pid\":19963,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19964,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19965,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[68157,2,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24.375,\"onlineMoneyMade\":68157,\"onlineRunningTime\":84.01000000000066,\"pid\":19966,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19967,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19968,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19969,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[88125,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13.125,\"onlineMoneyMade\":88125,\"onlineRunningTime\":84.01000000000066,\"pid\":19991,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19992,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19993,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19995,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19996,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[282702,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11.25,\"onlineMoneyMade\":282702,\"onlineRunningTime\":84.01000000000066,\"pid\":19997,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":19998,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20000,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20001,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20003,\"ramUsage\":4.75,\"server\":\"swig\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"swig\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"swig\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"swig\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"swig\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"swig\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":18843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"swig\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"swig\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"swig\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nswig\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"swig\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"boomer\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"boomer\",\"httpPortOpen\":false,\"ip\":\"55.2.4.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20054,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[13202,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":13202,\"onlineRunningTime\":84.01000000000066,\"pid\":20055,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20056,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20057,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[98800,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":98800,\"onlineRunningTime\":84.01000000000066,\"pid\":20058,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20059,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20060,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20061,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[87889,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13.125,\"onlineMoneyMade\":87889,\"onlineRunningTime\":84.01000000000066,\"pid\":20083,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20084,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20085,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20087,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20088,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[574765,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18,\"onlineMoneyMade\":574765,\"onlineRunningTime\":84.01000000000066,\"pid\":20089,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20090,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20092,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20093,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20095,\"ramUsage\":4.75,\"server\":\"boomer\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"boomer\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"boomer\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"boomer\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"boomer\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"boomer\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":18934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"boomer\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"boomer\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"boomer\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nboomer\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"boomer\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"leper\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"leper\",\"httpPortOpen\":false,\"ip\":\"24.4.1.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20146,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[13148,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":13148,\"onlineRunningTime\":84.01000000000066,\"pid\":20147,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20148,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20149,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[98425,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":98425,\"onlineRunningTime\":84.01000000000066,\"pid\":20150,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20151,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20152,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20153,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[179155,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21,\"onlineMoneyMade\":179155,\"onlineRunningTime\":84.01000000000066,\"pid\":20175,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20176,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20177,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20179,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20180,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[573432,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18,\"onlineMoneyMade\":573432,\"onlineRunningTime\":84.01000000000066,\"pid\":20181,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20182,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20184,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20185,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20187,\"ramUsage\":4.75,\"server\":\"leper\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"leper\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"leper\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"leper\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"leper\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"leper\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":19025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"leper\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"leper\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"leper\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nleper\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"leper\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"crave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"crave\",\"httpPortOpen\":false,\"ip\":\"77.9.9.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20238,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[13095,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":13095,\"onlineRunningTime\":84.01000000000066,\"pid\":20239,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20240,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20241,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[98048,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":98048,\"onlineRunningTime\":84.01000000000066,\"pid\":20242,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20243,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20244,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20245,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[178674,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21,\"onlineMoneyMade\":178674,\"onlineRunningTime\":84.01000000000066,\"pid\":20267,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20268,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20269,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20271,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20272,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[572103,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18,\"onlineMoneyMade\":572103,\"onlineRunningTime\":84.01000000000066,\"pid\":20273,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20274,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20276,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20277,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20279,\"ramUsage\":4.75,\"server\":\"crave\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"crave\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"crave\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"crave\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"crave\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"crave\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":19073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"crave\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"crave\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"crave\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\ncrave\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"crave\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"vexed\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vexed\",\"httpPortOpen\":false,\"ip\":\"37.1.3.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20286,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[13042,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":13042,\"onlineRunningTime\":84.01000000000066,\"pid\":20287,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20288,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20289,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[97674,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":97674,\"onlineRunningTime\":84.01000000000066,\"pid\":20290,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20291,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20292,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20293,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[178194,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21,\"onlineMoneyMade\":178194,\"onlineRunningTime\":84.01000000000066,\"pid\":20315,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20316,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20317,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20319,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20320,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[280089,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11.25,\"onlineMoneyMade\":280089,\"onlineRunningTime\":84.01000000000066,\"pid\":20321,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20322,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20324,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20325,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20327,\"ramUsage\":4.75,\"server\":\"vexed\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vexed\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vexed\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vexed\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"vexed\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"vexed\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"vexed\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":19164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"vexed\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"vexed\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nvexed\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"vexed\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"poleman\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"poleman\",\"httpPortOpen\":false,\"ip\":\"90.4.4.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20378,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[12987,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":12987,\"onlineRunningTime\":84.01000000000066,\"pid\":20379,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20380,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20381,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[97322,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":97322,\"onlineRunningTime\":84.01000000000066,\"pid\":20382,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20383,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20384,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20385,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[90767,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13.125,\"onlineMoneyMade\":90767,\"onlineRunningTime\":84.01000000000066,\"pid\":20407,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20408,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20409,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20411,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20412,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20413,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20414,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20416,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20417,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20419,\"ramUsage\":4.75,\"server\":\"poleman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"poleman\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"poleman\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"poleman\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"poleman\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"poleman\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"poleman\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":19255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"poleman\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"poleman\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\npoleman\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"poleman\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"wool\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"wool\",\"httpPortOpen\":false,\"ip\":\"35.0.1.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20470,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[11417,7,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23.925,\"onlineMoneyMade\":11417,\"onlineRunningTime\":84.01000000000066,\"pid\":20471,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20472,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20473,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[96951,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":96951,\"onlineRunningTime\":84.01000000000066,\"pid\":20474,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20475,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20476,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20477,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[86950,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13.125,\"onlineMoneyMade\":86950,\"onlineRunningTime\":84.01000000000066,\"pid\":20499,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20500,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20501,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20503,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20504,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[570127,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18,\"onlineMoneyMade\":570127,\"onlineRunningTime\":84.01000000000066,\"pid\":20505,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20506,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20508,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20509,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20511,\"ramUsage\":4.75,\"server\":\"wool\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"wool\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"wool\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"wool\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"wool\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"wool\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"wool\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":19346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"wool\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"wool\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nwool\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"wool\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"orca\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"orca\",\"httpPortOpen\":false,\"ip\":\"44.1.2.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20562,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[12887,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":12887,\"onlineRunningTime\":84.01000000000066,\"pid\":20563,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20564,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20565,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[96581,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":96581,\"onlineRunningTime\":84.01000000000066,\"pid\":20566,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20567,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20568,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20569,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[177240,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21,\"onlineMoneyMade\":177240,\"onlineRunningTime\":84.01000000000066,\"pid\":20591,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20592,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20593,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20595,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20596,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[290013,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11.25,\"onlineMoneyMade\":290013,\"onlineRunningTime\":84.01000000000066,\"pid\":20597,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20598,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20600,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20601,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20603,\"ramUsage\":4.75,\"server\":\"orca\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"orca\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"orca\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"orca\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"orca\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"orca\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"orca\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":19437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"orca\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"orca\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\norca\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"orca\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"sunburst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sunburst\",\"httpPortOpen\":false,\"ip\":\"23.6.8.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20654,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[12834,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":12834,\"onlineRunningTime\":84.01000000000066,\"pid\":20655,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20656,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20657,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[96212,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":96212,\"onlineRunningTime\":84.01000000000066,\"pid\":20658,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20659,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20660,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20661,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[86484,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13.125,\"onlineMoneyMade\":86484,\"onlineRunningTime\":84.01000000000066,\"pid\":20683,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20684,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20685,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20687,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20688,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[289340,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11.25,\"onlineMoneyMade\":289340,\"onlineRunningTime\":84.01000000000066,\"pid\":20689,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20690,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20692,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20693,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20695,\"ramUsage\":4.75,\"server\":\"sunburst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"sunburst\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"sunburst\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"sunburst\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"sunburst\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"sunburst\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"sunburst\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":19528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"sunburst\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"sunburst\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nsunburst\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"sunburst\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"chronic-noir\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"chronic-noir\",\"httpPortOpen\":false,\"ip\":\"1.5.9.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20746,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[12780,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":12780,\"onlineRunningTime\":84.01000000000066,\"pid\":20747,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20748,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20749,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[95845,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":95845,\"onlineRunningTime\":84.01000000000066,\"pid\":20750,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20751,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20752,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20753,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[86252,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13.125,\"onlineMoneyMade\":86252,\"onlineRunningTime\":84.01000000000066,\"pid\":20775,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20776,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20777,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20779,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20780,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[567462,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18,\"onlineMoneyMade\":567462,\"onlineRunningTime\":84.01000000000066,\"pid\":20781,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20782,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20784,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20785,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20787,\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"chronic-noir\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"chronic-noir\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"chronic-noir\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"chronic-noir\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"chronic-noir\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":1436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"chronic-noir\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":19619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"chronic-noir\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"chronic-noir\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":6759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nchronic-noir\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"chronic-noir\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"alderman\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"alderman\",\"httpPortOpen\":false,\"ip\":\"79.0.0.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20838,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[12727,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":12727,\"onlineRunningTime\":84.01000000000066,\"pid\":20839,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20840,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20841,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[95480,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":95480,\"onlineRunningTime\":84.01000000000066,\"pid\":20842,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20843,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20844,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20845,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[90281,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13.125,\"onlineMoneyMade\":90281,\"onlineRunningTime\":84.01000000000066,\"pid\":20867,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20868,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20869,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20871,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20872,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[288000,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11.25,\"onlineMoneyMade\":288000,\"onlineRunningTime\":84.01000000000066,\"pid\":20873,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20874,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20876,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20877,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20879,\"ramUsage\":4.75,\"server\":\"alderman\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"alderman\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":8468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"alderman\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":8469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"alderman\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":8470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"alderman\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":8471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"alderman\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":9105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"alderman\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":19710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"alderman\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"alderman\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":8524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nalderman\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"alderman\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"nugget\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nugget\",\"httpPortOpen\":false,\"ip\":\"37.2.6.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20930,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[12676,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":12676,\"onlineRunningTime\":84.01000000000066,\"pid\":20931,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20932,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20933,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[63689,2,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24.375,\"onlineMoneyMade\":63689,\"onlineRunningTime\":84.01000000000066,\"pid\":20934,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20935,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20936,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20937,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[176060,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21,\"onlineMoneyMade\":176060,\"onlineRunningTime\":84.01000000000066,\"pid\":20959,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20960,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20961,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20963,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20964,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[278146,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11.25,\"onlineMoneyMade\":278146,\"onlineRunningTime\":84.01000000000066,\"pid\":20965,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20966,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20968,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20969,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":20971,\"ramUsage\":4.75,\"server\":\"nugget\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"nugget\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":8484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"nugget\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":8485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"nugget\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":8486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"nugget\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":8487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"nugget\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":9156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"nugget\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":19801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"nugget\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"nugget\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":8525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nnugget\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"nugget\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"treacher\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"treacher\",\"httpPortOpen\":false,\"ip\":\"44.6.8.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21022,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[12623,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.400000000000002,\"onlineMoneyMade\":12623,\"onlineRunningTime\":84.01000000000066,\"pid\":21023,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21024,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21025,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[65220,2,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24.375,\"onlineMoneyMade\":65220,\"onlineRunningTime\":84.01000000000066,\"pid\":21026,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21027,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21028,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21029,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[175587,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21,\"onlineMoneyMade\":175587,\"onlineRunningTime\":84.01000000000066,\"pid\":21051,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21052,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21053,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21055,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21056,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[277501,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11.25,\"onlineMoneyMade\":277501,\"onlineRunningTime\":84.01000000000066,\"pid\":21057,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21058,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21060,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21061,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21063,\"ramUsage\":4.75,\"server\":\"treacher\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"treacher\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":8500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"treacher\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":8501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"treacher\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":8502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"treacher\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":8503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"treacher\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":9207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"treacher\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":19892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"treacher\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"treacher\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":8526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\ntreacher\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"treacher\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"xion\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"xion\",\"httpPortOpen\":false,\"ip\":\"12.3.7.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21114,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[10820,7,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23.925,\"onlineMoneyMade\":10820,\"onlineRunningTime\":84.01000000000066,\"pid\":21115,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21116,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21117,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[94624,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":94624,\"onlineRunningTime\":84.01000000000066,\"pid\":21118,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21119,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21120,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21121,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[89556,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13.125,\"onlineMoneyMade\":89556,\"onlineRunningTime\":84.01000000000066,\"pid\":21143,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21144,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21145,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21147,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21148,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[276858,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11.25,\"onlineMoneyMade\":276858,\"onlineRunningTime\":84.01000000000066,\"pid\":21149,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21150,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21152,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21153,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21155,\"ramUsage\":4.75,\"server\":\"xion\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"xion\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":8516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"xion\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":8517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"xion\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":8518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"xion\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":8519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"xion\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":9258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"xion\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":19983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"xion\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":8701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"xion\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":8527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nxion\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"xion\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nhalogenic\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"halogenic\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"halogenic\",\"httpPortOpen\":false,\"ip\":\"74.0.8.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21206,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[9654,6,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20.625,\"onlineMoneyMade\":9654,\"onlineRunningTime\":84.01000000000066,\"pid\":21207,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21208,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21209,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[29539,1,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18.75,\"onlineMoneyMade\":29539,\"onlineRunningTime\":84.01000000000066,\"pid\":21210,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21211,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21212,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21213,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[174876,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21,\"onlineMoneyMade\":174876,\"onlineRunningTime\":84.01000000000066,\"pid\":21235,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21236,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21237,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21239,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21240,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[563549,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18,\"onlineMoneyMade\":563549,\"onlineRunningTime\":84.01000000000066,\"pid\":21241,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21242,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21244,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21245,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21247,\"ramUsage\":4.75,\"server\":\"halogenic\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"halogenic\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":17934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"halogenic\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":17935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"halogenic\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":17936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"halogenic\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":17937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"halogenic\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":18303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"halogenic\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":20074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"halogenic\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":17974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"halogenic\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":17977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nhalogenic\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nblood-rain\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"halogenic\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nblood-rain\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"blood-rain\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"blood-rain\",\"httpPortOpen\":false,\"ip\":\"28.0.1.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21298,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[11364,7,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23.1,\"onlineMoneyMade\":11364,\"onlineRunningTime\":84.01000000000066,\"pid\":21299,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21300,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21301,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[94150,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":94150,\"onlineRunningTime\":84.01000000000066,\"pid\":21302,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21303,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21304,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21305,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[174408,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21,\"onlineMoneyMade\":174408,\"onlineRunningTime\":84.01000000000066,\"pid\":21327,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21328,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21329,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21331,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21332,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[562242,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18,\"onlineMoneyMade\":562242,\"onlineRunningTime\":84.01000000000066,\"pid\":21333,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21334,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21336,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21337,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21339,\"ramUsage\":4.75,\"server\":\"blood-rain\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"blood-rain\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":17950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"blood-rain\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":17951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"blood-rain\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":17952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"blood-rain\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":17953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"blood-rain\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":18354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"blood-rain\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":20165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"blood-rain\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":17975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"blood-rain\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":17978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nblood-rain\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\ngaucho\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"blood-rain\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\ngaucho\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"gaucho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"gaucho\",\"httpPortOpen\":false,\"ip\":\"12.4.7.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,9,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21390,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[11318,7,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23.1,\"onlineMoneyMade\":11318,\"onlineRunningTime\":84.01000000000066,\"pid\":21391,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21392,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21393,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[93791,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":93791,\"onlineRunningTime\":84.01000000000066,\"pid\":21394,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21395,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21396,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21397,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[85102,1,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13.125,\"onlineMoneyMade\":85102,\"onlineRunningTime\":84.01000000000066,\"pid\":21419,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21420,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21421,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21423,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21424,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[560940,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18,\"onlineMoneyMade\":560940,\"onlineRunningTime\":84.01000000000066,\"pid\":21425,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21426,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21428,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21429,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":21431,\"ramUsage\":4.75,\"server\":\"gaucho\",\"threads\":1,\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"gaucho\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":17966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"gaucho\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":17967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"gaucho\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":17968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"gaucho\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":17969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"gaucho\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":18405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"gaucho\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":20256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"gaucho\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":17976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"gaucho\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":17979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\ngaucho\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\nbleach\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"gaucho\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\nbleach\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"bleach\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"bleach\",\"httpPortOpen\":false,\"ip\":\"61.0.7.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":85.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,8,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.425000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22431,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[11226,7,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23.1,\"onlineMoneyMade\":11226,\"onlineRunningTime\":81.41000000000062,\"pid\":22432,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22433,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,2,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22434,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[93195,3,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30,\"onlineMoneyMade\":93195,\"onlineRunningTime\":81.41000000000062,\"pid\":22435,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22436,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22437,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22438,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[173245,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21,\"onlineMoneyMade\":173245,\"onlineRunningTime\":81.41000000000062,\"pid\":22460,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,1,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22461,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22462,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22464,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22465,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[558342,2,0,0]},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18,\"onlineMoneyMade\":558342,\"onlineRunningTime\":81.41000000000062,\"pid\":22466,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22467,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22469,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22470,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/js/simpleHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":22472,\"ramUsage\":4.75,\"server\":\"bleach\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CONSTANTS {\\n}\\nCONSTANTS.SCRIPT_DIRECTORY = \\\"js/\\\";\",\"filename\":\"/js/common/constants/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"bleach\",\"_hash\":\"f0d5d6f03e46856cb263a1fdab8b4a954431e7e88cc1501bb3aef8794e4e4681\",\"moduleSequenceNumber\":20356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PROGRAMS {\\n    static all() {\\n        let allPrograms = [];\\n        allPrograms.push(PROGRAMS.NUKE);\\n        allPrograms.push(PROGRAMS.AUTO_LINK);\\n        allPrograms.push(PROGRAMS.SERVER_PROFILER);\\n        allPrograms.push(PROGRAMS.DEEPSCAN_V1);\\n        allPrograms.push(PROGRAMS.BRUTE_SSH);\\n        allPrograms.push(PROGRAMS.FTP_CRACK);\\n        return allPrograms;\\n    }\\n}\\nPROGRAMS.NUKE = \\\"NUKE.exe\\\";\\nPROGRAMS.AUTO_LINK = \\\"AutoLink.exe\\\";\\nPROGRAMS.SERVER_PROFILER = \\\"ServerProfiler.exe\\\";\\nPROGRAMS.DEEPSCAN_V1 = \\\"DeepscanV1.exe\\\";\\nPROGRAMS.BRUTE_SSH = \\\"BruteSSH.exe\\\";\\nPROGRAMS.FTP_CRACK = \\\"FTPCrack.exe\\\";\",\"filename\":\"/js/common/constants/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"bleach\",\"_hash\":\"5fbc31293eefa286c439ec116c71a9bda762f4aeb91b3da00d9a18d605ac7838\",\"moduleSequenceNumber\":20357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class SERVERS {\\n}\\nSERVERS.HOME_SERVER = \\\"home\\\";\\nSERVERS.MIRAGE = \\\"mirage\\\";\",\"filename\":\"/js/common/constants/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"bleach\",\"_hash\":\"31ff2b3b39c44048f891e26e6685a49b8ed62daeba3d456aea066602f132752d\",\"moduleSequenceNumber\":20358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // Function must be async\\n    // This script will be used to kill off scripts on a server and then inject a new one\\n    async function killThenInject() {\\n        const TOTAL_ARGS = ns.args.length;\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the host to run on. Got: \\\" + ns.args[0]);\\n        }\\n        const TARGET_SERVER = arg0;\\n        let arg1 = \\\"\\\";\\n        if (TOTAL_ARGS > 1) {\\n            if (typeof (ns.args[1]) == \\\"string\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the script to run. Got: \\\" + ns.args[1]);\\n            }\\n        }\\n        const SCRIPT_NAME = arg1;\\n        let arg2 = 1;\\n        if (TOTAL_ARGS > 2) {\\n            if (typeof (ns.args[2]) == \\\"number\\\") {\\n                arg2 = ns.args[2];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[2] is not a number. It should be the number of threads to use. Got: \\\" + ns.args[2]);\\n            }\\n        }\\n        const THREADS = arg2;\\n        // We need to accept an unknown amount of arguments and bundle them into an array\\n        let args = new Array();\\n        if (TOTAL_ARGS > 3) {\\n            for (let index = 3; index < TOTAL_ARGS; index++) {\\n                ns.print(\\\"arg: \\\" + ns.args[index]);\\n                args.push(ns.args[index]);\\n            }\\n        }\\n        async function initiailize() {\\n            ns.killall(TARGET_SERVER);\\n            ns.exec(SCRIPT_NAME, TARGET_SERVER, THREADS, ...args);\\n        }\\n        await initiailize();\\n    }\\n    // Run the function or it's useless\\n    await killThenInject();\\n}\",\"filename\":\"/js/common/util/killThenInject.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"bleach\",\"_hash\":\"ae07cc62595c648fce04f07b35d0adf88f9fcf7af979d3200e6c632fa7608807\",\"moduleSequenceNumber\":20359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PROGRAMS } from \\\"js/common/constants/programs\\\";\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    // ns.tail();\\n    // Function must be async\\n    async function gainRoot() {\\n        /* CONSTANTS */\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        /* ARGUMENTS */\\n        // args[0] - Target System to gain root access to\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        const TARGET_SERVER = arg0;\\n        /* VARIABLES */\\n        let server;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        let hasFTPCrack;\\n        function initialize() {\\n            server = ns.getServer(TARGET_SERVER);\\n            // Check which programs are available on this computer\\n            hasNuke = ns.fileExists(PROGRAMS.NUKE, HOST_SERVER);\\n            hasAutoLink = ns.fileExists(PROGRAMS.AUTO_LINK, HOST_SERVER);\\n            hasBruteSSH = ns.fileExists(PROGRAMS.BRUTE_SSH, HOST_SERVER);\\n            hasFTPCrack = ns.fileExists(PROGRAMS.FTP_CRACK, HOST_SERVER);\\n            // Open ports, even if we don't need to, just in case\\n            if (!server.sshPortOpen) {\\n                if (hasBruteSSH) {\\n                    ns.brutessh(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing BruteSSH, cannot open SSH port.\\\");\\n                }\\n            }\\n            if (!server.ftpPortOpen) {\\n                if (hasFTPCrack) {\\n                    ns.ftpcrack(TARGET_SERVER);\\n                }\\n                else {\\n                    ns.print(\\\"Error: Missing FTPCrack, cannot open SSH port.\\\");\\n                }\\n            }\\n            // Get server again to update data\\n            server = ns.getServer(TARGET_SERVER);\\n            if (!server.hasAdminRights) {\\n                if (server.numOpenPortsRequired <= server.openPortCount) {\\n                    if (hasNuke) {\\n                        ns.nuke(TARGET_SERVER);\\n                    }\\n                    else {\\n                        ns.print(\\\"Error: Missing NUKE.exe\\\");\\n                    }\\n                }\\n                else {\\n                    ns.print(\\\"Error: Not enough open ports. Open ports: \\\" + server.openPortCount\\n                        + \\\". Ports required: \\\" + server.numOpenPortsRequired);\\n                }\\n            }\\n            else {\\n                ns.print(\\\"Already have admin right.\\\");\\n            }\\n        }\\n        initialize();\\n    }\\n    // Run the function or it's useless\\n    gainRoot();\\n}\",\"filename\":\"/js/gainRoot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/programs.js\",\"url\":\"blob:file:///71cbeded-235e-4f55-b8d1-690b176defae\"},{\"filename\":\"/js/gainRoot.js\",\"url\":\"blob:file:///97b7110c-4a84-4ecb-ab4b-628fc6ae3937\"}],\"ramUsage\":3.9,\"server\":\"bleach\",\"_hash\":\"2d6540e18a56375e46191331eba487752a5812026c498ee76c6971fa172999b5\",\"moduleSequenceNumber\":20697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CONSTANTS } from \\\"js/common/constants/constants\\\";\\nexport async function main(ns) {\\n    // Open a window on screen so we can see our progress\\n    //ns.tail();\\n    // Wrapping everything in a function to keep the variables from entering the global scope. \\n    async function simpleHack() {\\n        /* CONSTANTS */\\n        const MAX_MONEY_PERCENTAGE_THRESHOLD = 0.15;\\n        const SECURITY_MULTIPLIER = 20;\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = CONSTANTS.SCRIPT_DIRECTORY + \\\"simpleHack.js\\\";\\n        let arg0 = \\\"\\\";\\n        // Our target server\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: Argument 0 is not a string!\\\");\\n            ns.exit();\\n        }\\n        const TARGET_SERVER = arg0;\\n        const THREADS = 1;\\n        const MAX_OPEN_PORTS = 1;\\n        /* VARIABLES */\\n        // For tracking our hacking level\\n        let hackingLevel;\\n        // We will want to know some system details, including how much we can weaken the target, before we hack\\n        let minSecruityLevel;\\n        let maxMoney;\\n        let securityDecrement;\\n        let openPorts = 0;\\n        let portsRequired;\\n        // For checking avialble programs on the system\\n        let hasNuke;\\n        let hasAutoLink;\\n        let hasBruteSSH;\\n        // We will want to keep track of how much money is available on the server as well as the security level.\\n        let moneyAvailable;\\n        let securityLevel;\\n        /* Functions */\\n        // Initialize by getting the min security level and max money so we can manage those\\n        // Also check how much weaken will affect the target, so we can determine how often to run it\\n        async function initialize() {\\n            minSecruityLevel = ns.getServerMinSecurityLevel(TARGET_SERVER);\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            maxMoney = ns.getServerMaxMoney(TARGET_SERVER);\\n            moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            portsRequired = ns.getServerNumPortsRequired(TARGET_SERVER);\\n            hackingLevel = ns.getHackingLevel();\\n            // Check if we have root, if we don't see if we can get it\\n            // Kill the script if we can't open enough ports\\n            if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                ns.print(\\\"Error: Do not have root access. Trying to gain root.\\\");\\n                ns.run(\\\"js/gainRoot.js\\\", 1, TARGET_SERVER);\\n                // Wait for script to start up\\n                await ns.sleep(2000);\\n                while (ns.isRunning(\\\"js/gainRoot.js\\\", HOST_SERVER, TARGET_SERVER)) {\\n                    await ns.sleep(100);\\n                }\\n                if (!ns.hasRootAccess(TARGET_SERVER)) {\\n                    ns.print(\\\"Error: Failed to gain root. Ending hack.\\\");\\n                    ns.exit();\\n                }\\n            }\\n        }\\n        async function preHack() {\\n            // First we lower the security level before hacking further\\n            while (securityLevel > minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                ns.print(\\\"Security Level: \\\" + securityLevel + \\\" / \\\" + minSecruityLevel + \\\" + \\\" + securityDecrement);\\n                await securityCheck();\\n            }\\n            // Grow the money until it is at least X% of the maximum possible\\n            while (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                ns.print(\\\"Available Money: \\\" + moneyAvailable + \\\" / \\\" + maxMoney);\\n                await ns.grow(TARGET_SERVER);\\n                await securityCheck();\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n        }\\n        async function continuousHack() {\\n            // Hack as long as there is 10% of the maximum money available.\\n            // Try to replenish funding when it falls below X%, but I'm not sure\\n            // if max money means max money ever, or just a funding cap on the machine.\\n            // At the end of each loop, check the hacking level, and update our security decrease value t\\n            while (moneyAvailable > maxMoney * 0.1 && moneyAvailable > 0) {\\n                await ns.hack(TARGET_SERVER);\\n                if (moneyAvailable < (maxMoney * MAX_MONEY_PERCENTAGE_THRESHOLD)) {\\n                    await ns.grow(TARGET_SERVER);\\n                }\\n                await securityCheck();\\n                let currentHackingLevel = ns.getHackingLevel();\\n                if (hackingLevel < currentHackingLevel) {\\n                    hackingLeveledUp(currentHackingLevel);\\n                }\\n                moneyAvailable = ns.getServerMoneyAvailable(TARGET_SERVER);\\n            }\\n            // If we cannot continuously grow money, then we will eventually kill the script when the\\n            // funding drops\\n            ns.print(\\\"ERROR: No money to hack.\\\");\\n            ns.exit();\\n        }\\n        // Check the security level and weaken it if it gets too high.\\n        // We can check how much weaken will work, so we will only use weaken if the security level exceeds\\n        // a threshold defined as the sum of the minimum security level plus the \\n        async function securityCheck() {\\n            securityLevel = ns.getServerSecurityLevel(TARGET_SERVER);\\n            if (securityLevel >= minSecruityLevel + (securityDecrement * SECURITY_MULTIPLIER)) {\\n                await ns.weaken(TARGET_SERVER);\\n            }\\n        }\\n        // Run when our hacking level goes up\\n        function hackingLeveledUp(newLevel) {\\n            securityDecrement = ns.weakenAnalyze(THREADS);\\n            hackingLevel = newLevel;\\n        }\\n        /* EXECUTION */\\n        // Get some of the basic system details and other needed setup\\n        await initialize();\\n        if (ns.hasRootAccess(TARGET_SERVER)) {\\n            await preHack();\\n            await continuousHack();\\n        }\\n    }\\n    await simpleHack();\\n}\",\"filename\":\"/js/simpleHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/common/constants/constants.js\",\"url\":\"blob:file:///8027171d-f9b6-47ca-a335-4a8b1bd8b162\"},{\"filename\":\"/js/simpleHack.js\",\"url\":\"blob:file:///6411d5dd-3601-456e-b5e9-ad6968a3962c\"}],\"ramUsage\":4.75,\"server\":\"bleach\",\"_hash\":\"dadf36d18ebfaf40abf3e32a24af454efd0f39ab485b0e540d874d11a22ecbf9\",\"moduleSequenceNumber\":20646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* TODO\\n\\n1) Read the known hosts file ahead of time and don't overwrite it. In case new hosts are added/discovered.\\n\\n*/\\nexport async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // This script should crawl hosts up to a specified depth\\n    // Function must be async\\n    async function crawl() {\\n        const HOST_SERVER = ns.getHostname();\\n        // Name of file\\n        const SCRIPT_NAME = ns.getScriptName();\\n        // Error Log\\n        const ERROR_LOG = \\\"logs/errors/crawl-error.txt\\\";\\n        // Log crawled hosts\\n        const CRAWL_LOG = \\\"/logs/known-hosts.txt\\\";\\n        const CRAWL_REPORT = \\\"/logs/crawl-report.txt\\\";\\n        /* ARGUMENTS */\\n        // args[0] - crawl depth\\n        // Parse the target system from the argument, checking its type to give it a definite type\\n        let arg0 = 0;\\n        if (typeof (ns.args[0]) == \\\"number\\\") {\\n            arg0 = ns.args[0];\\n            if (arg0 <= 0) {\\n                ns.tprint(\\\"Error: args[0] - Crawl Depth must be greater than or equal 1.\\\");\\n            }\\n        }\\n        const CRAWL_DEPTH = arg0;\\n        /* VARIABLES */\\n        // Keep track of the hosts that we crawl\\n        let crawledServers = new Array();\\n        let hostsToScan = new Array();\\n        let currentDepth;\\n        async function initialize() {\\n            ns.print(\\\"Initializing...\\\");\\n            currentDepth = 0;\\n            hostsToScan.push(HOST_SERVER);\\n            crawledServers.push(HOST_SERVER);\\n            // Write the depth and host to start the file off\\n            await ns.write(CRAWL_REPORT, \\\"Depth 0: \\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_LOG, HOST_SERVER + \\\"\\\\n\\\", \\\"w\\\");\\n            await ns.write(CRAWL_REPORT, HOST_SERVER + \\\"\\\\n\\\", \\\"a\\\");\\n            ns.print(\\\"Initialization complete...\\\");\\n        }\\n        async function crawlToDepth(depth) {\\n            ns.print(\\\"Beginning crawl...\\\");\\n            while (currentDepth < depth) {\\n                ns.print(\\\"Crawling at a depth of \\\" + (currentDepth + 1) + \\\" / \\\" + CRAWL_DEPTH);\\n                ns.print(\\\"Hosts to scan: \\\" + hostsToScan);\\n                // Write the depth we are crawling at in the log. We need to add 1.\\n                await ns.write(CRAWL_REPORT, \\\"\\\\nDepth \\\" + (currentDepth + 1) + \\\": \\\\n\\\", \\\"a\\\");\\n                let newHostsToScan = new Array();\\n                while (hostsToScan.length > 0) {\\n                    let host = hostsToScan.shift();\\n                    let scannedServers = ns.scan(host);\\n                    for (let server of scannedServers) {\\n                        // Only add a server to be crawled if we haven't crawled it yet.\\n                        if (!crawledServers.includes(server)) {\\n                            newHostsToScan.push(server);\\n                            crawledServers.push(server);\\n                            await ns.write(CRAWL_LOG, server + \\\"\\\\n\\\", \\\"a\\\");\\n                            await ns.write(CRAWL_REPORT, server + \\\"\\\\n\\\", \\\"a\\\");\\n                        }\\n                    }\\n                }\\n                // Copy the new hosts to scan to the hosts to scan so we can scan those hosts\\n                hostsToScan = [...newHostsToScan];\\n                currentDepth++;\\n                ns.print(\\\"Current depth crawl complete.\\\");\\n                ns.print(\\\"Hosts scanned: \\\" + crawledServers.length);\\n            }\\n        }\\n        await initialize();\\n        await crawlToDepth(CRAWL_DEPTH);\\n    }\\n    // Run the function or it's useless\\n    await crawl();\\n}\",\"filename\":\"/js/crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/crawl.js\",\"url\":\"blob:file:///486b89e3-c019-4da5-aaad-2ead2a930134\"}],\"ramUsage\":1.85,\"server\":\"bleach\",\"_hash\":\"1469fa015fd6853b77db631751f27df0c8eb5c2df64bb56dcad9a36a637ca041\",\"moduleSequenceNumber\":20364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Wrap the function to prevent anything from entering the global namespace (unless we want to add it)\\n    //ns.tail();\\n    // Function must be async\\n    // This function isn't quite right. It's hacked to run simpleHack on all known hosts (or try to).\\n    async function runOnKnownHosts() {\\n        const KNOWN_HOSTS_FILE = \\\"/logs/known-hosts.txt\\\";\\n        const HOST_SERVER = ns.getHostname();\\n        /* ARGUMENTS */\\n        // args[0] - script to run\\n        ns.print(ns.args);\\n        // Parse the script from the argument, checking its type to give it a definite type\\n        let arg0 = \\\"\\\";\\n        if (typeof (ns.args[0]) == \\\"string\\\") {\\n            arg0 = ns.args[0];\\n        }\\n        else {\\n            ns.tprint(\\\"Error: args[0] is not a string. It should be the script to run. Got: \\\" + ns.args[0]);\\n        }\\n        const SCRIPT_NAME = arg0;\\n        let arg1 = 1;\\n        if (ns.args.length > 1) {\\n            if (typeof (ns.args[1]) == \\\"number\\\") {\\n                arg1 = ns.args[1];\\n            }\\n            else {\\n                ns.tprint(\\\"Error: args[1] is not a number. It should be the number of threads to use.\\\");\\n            }\\n        }\\n        const THREADS = arg1;\\n        let knownHosts = new Array();\\n        async function initiailize() {\\n            if (!ns.fileExists(KNOWN_HOSTS_FILE)) {\\n                ns.tprint(\\\"Error: Missing hosts file.\\\");\\n            }\\n            let fileText = await ns.read(KNOWN_HOSTS_FILE);\\n            knownHosts = fileText.split(\\\"\\\\n\\\");\\n            if (knownHosts.length <= 0) {\\n                ns.tprint(\\\"Error: No known hosts.\\\");\\n            }\\n        }\\n        async function remoteExecute() {\\n            for (let host of knownHosts) {\\n                if (host != \\\"\\\") {\\n                    while ((ns.getServerUsedRam(HOST_SERVER) + ns.getScriptRam(SCRIPT_NAME, HOST_SERVER))\\n                        > 0.9 * ns.getServerMaxRam(HOST_SERVER)) {\\n                        await ns.sleep(100);\\n                    }\\n                    ns.run(SCRIPT_NAME, THREADS, host);\\n                }\\n            }\\n        }\\n        await initiailize();\\n        await remoteExecute();\\n    }\\n    // Run the function or it's useless\\n    await runOnKnownHosts();\\n}\",\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/js/runOnKnownHosts.js\",\"url\":\"blob:file:///51b82fb1-5466-42b1-825b-88e159aee6b1\"}],\"ramUsage\":2.95,\"server\":\"bleach\",\"_hash\":\"873db4ca763e722f0522b05750a628569977fcdf6d6ae18a3b75cd394957bd7c\",\"moduleSequenceNumber\":20554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/crawl-report.txt\",\"text\":\"Depth 0: \\nbleach\\n\\nDepth 1: \\nhome\\n\\nDepth 2: \\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\n\\nDepth 3: \\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\n\\nDepth 4: \\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\n\\nDepth 5: \\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\n\\nDepth 6: \\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\n\\nDepth 7: \\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\n\\nDepth 8: \\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\n\\nDepth 9: \\nomnia\\ndeltaone\\nunitalife\\n\\nDepth 10: \\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\n\\nDepth 11: \\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\n\\nDepth 12: \\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\n\\nDepth 13: \\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\n\\nDepth 14: \\nomnitek\\n.\\n4sigma\\nkuai-gong\\n\\nDepth 15: \\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\n\\nDepth 16: \\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\\nDepth 17: \\n\\nDepth 18: \\n\\nDepth 19: \\n\\nDepth 20: \\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/known-hosts.txt\",\"text\":\"bleach\\nhome\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\ndarkweb\\nmirage\\ngremlin\\nfear\\nswig\\nboomer\\nleper\\ncrave\\nvexed\\npoleman\\nwool\\norca\\nsunburst\\nchronic-noir\\nalderman\\nnugget\\ntreacher\\nxion\\nhalogenic\\nblood-rain\\ngaucho\\nzer0\\nnectar-net\\nmax-hardware\\nCSEC\\nneo-net\\nomega-net\\nphantasy\\nsilver-helix\\ncomptek\\njohnson-ortho\\ncrush-fitness\\navmnite-02h\\nthe-hub\\nnetlink\\nzb-institute\\nsyscore\\nrothman-uni\\nI.I.I.I\\nsummit-uni\\ncatalyst\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nlexo-corp\\nglobal-pharm\\nsnap-fitness\\naerocorp\\ngalactic-cyber\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nuniv-energy\\nicarus\\nsolaris\\nzeus-med\\ninfocomm\\ntaiyang-digital\\nnova-med\\nzb-def\\nmicrodyne\\napplied-energetics\\ntitan-labs\\nrun4theh111z\\nfulcrumtech\\nhelios\\nstormtech\\nvitalife\\nomnitek\\n.\\n4sigma\\nkuai-gong\\nblade\\nnwo\\npowerhouse-fitness\\nclarkinc\\nb-and-a\\nmegacorp\\nThe-Cave\\necorp\\nfulcrumassets\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":40.48412615384636,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":4335.5668461508,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":1967.941666667827}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":16356.327743565274}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":33604.75769229912}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":1994.1700205140653}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":3506.3493333297038}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":17859.263591101208,\"lastPrice\":17877.016530184825,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":17.472578684719874,\"otlkMagForecast\":69.36565610952265,\"cap\":432569164,\"spreadPerc\":0.1,\"shareTxForMovement\":47184,\"shareTxUntilMovement\":28182,\"totalShares\":129100000,\"maxShares\":25800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":37197.779518444644,\"lastPrice\":37167.483627638125,\"playerShares\":80000,\"playerAvgPx\":30816.5878087645,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":true,\"otlkMag\":17.970715127090422,\"otlkMagForecast\":69.95105089936384,\"cap\":117899692,\"spreadPerc\":0.1,\"shareTxForMovement\":80193,\"shareTxUntilMovement\":3093,\"totalShares\":75300000,\"maxShares\":15100000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":14384.167721288317,\"lastPrice\":14406.473431328051,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":13.055619613364001,\"otlkMagForecast\":37.165262897965945,\"cap\":93961551,\"spreadPerc\":0.4,\"shareTxForMovement\":78654,\"shareTxUntilMovement\":78654,\"totalShares\":126600000,\"maxShares\":25300000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":18034.958050717236,\"lastPrice\":18010.60944860128,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":13.041765790094047,\"otlkMagForecast\":62.05468196305357,\"cap\":402770942,\"spreadPerc\":0.1,\"shareTxForMovement\":53194,\"shareTxUntilMovement\":53194,\"totalShares\":78400000,\"maxShares\":15700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":30050.292863098264,\"lastPrice\":30089.125669428642,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":12.281413771425091,\"otlkMagForecast\":35.967063964384366,\"cap\":417285935,\"spreadPerc\":0.6,\"shareTxForMovement\":70044,\"shareTxUntilMovement\":70044,\"totalShares\":54100000,\"maxShares\":10800000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":46027.99600377647,\"lastPrice\":46124.079340614975,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.05,\"b\":false,\"otlkMag\":18.25229731064155,\"otlkMagForecast\":32.48817684531196,\"cap\":526810131,\"spreadPerc\":0.8,\"shareTxForMovement\":75892,\"shareTxUntilMovement\":41402,\"totalShares\":29600000,\"maxShares\":5900000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":27060.88235148023,\"lastPrice\":27106.611971233197,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":11.479021884007278,\"otlkMagForecast\":60.53757279884174,\"cap\":333699032,\"spreadPerc\":0.1,\"shareTxForMovement\":49361,\"shareTxUntilMovement\":49361,\"totalShares\":73800000,\"maxShares\":14800000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":16747.328639007264,\"lastPrice\":16787.615889081848,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":false,\"otlkMag\":18.072302254837293,\"otlkMagForecast\":33.96985370456179,\"cap\":80631764,\"spreadPerc\":0.8,\"shareTxForMovement\":79271,\"shareTxUntilMovement\":26691,\"totalShares\":63300000,\"maxShares\":12700000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":22848.797660455944,\"lastPrice\":22810.25109366501,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":6.430241761480914,\"otlkMagForecast\":57.348260969048795,\"cap\":341038273,\"spreadPerc\":0.7,\"shareTxForMovement\":48482,\"shareTxUntilMovement\":48482,\"totalShares\":56100000,\"maxShares\":11200000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":16714.421906573403,\"lastPrice\":16737.018188490616,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":9.201429762136279,\"otlkMagForecast\":60.72382896034323,\"cap\":286270619,\"spreadPerc\":0.4,\"shareTxForMovement\":42024,\"shareTxUntilMovement\":30024,\"totalShares\":53700000,\"maxShares\":10700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":11011.545266718953,\"lastPrice\":10998.207336253587,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":9.041356254409363,\"otlkMagForecast\":59.07868698498958,\"cap\":319710879,\"spreadPerc\":0.9,\"shareTxForMovement\":107573,\"shareTxUntilMovement\":107573,\"totalShares\":62200000,\"maxShares\":12400000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":8007.488153007364,\"lastPrice\":8018.631895196686,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.334114724240161,\"otlkMagForecast\":56.82076714943859,\"cap\":148301871,\"spreadPerc\":0.2,\"shareTxForMovement\":63596,\"shareTxUntilMovement\":63596,\"totalShares\":122800000,\"maxShares\":24600000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":10687.71129252038,\"lastPrice\":10702.160044548147,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":8.04450762993968,\"otlkMagForecast\":43.20967915480454,\"cap\":275405647,\"spreadPerc\":0.4,\"shareTxForMovement\":97501,\"shareTxUntilMovement\":97501,\"totalShares\":57200000,\"maxShares\":11400000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":27593.76349374702,\"lastPrice\":27626.67887572075,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":8.05138979869609,\"otlkMagForecast\":40.302320377027065,\"cap\":442286918,\"spreadPerc\":0.7,\"shareTxForMovement\":72557,\"shareTxUntilMovement\":72557,\"totalShares\":37500000,\"maxShares\":7500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":18179.787426305516,\"lastPrice\":18158.84856733588,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":5.367191972729248,\"otlkMagForecast\":55.94610802884744,\"cap\":89749456,\"spreadPerc\":0.3,\"shareTxForMovement\":115429,\"shareTxUntilMovement\":115429,\"totalShares\":43000000,\"maxShares\":8600000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":18577.765993191275,\"lastPrice\":18550.10648958205,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":5.531092151417158,\"otlkMagForecast\":44.66016318526598,\"cap\":318641219,\"spreadPerc\":0.5,\"shareTxForMovement\":51742,\"shareTxUntilMovement\":51742,\"totalShares\":45600000,\"maxShares\":9100000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":17908.99393237363,\"lastPrice\":17937.477729744864,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":9.199932218126392,\"otlkMagForecast\":58.20231874072821,\"cap\":469099020,\"spreadPerc\":1.2,\"shareTxForMovement\":95286,\"shareTxUntilMovement\":95286,\"totalShares\":36200000,\"maxShares\":7200000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":25661.5345212211,\"lastPrice\":25691.63485738847,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":false,\"otlkMag\":10.283294760030687,\"otlkMagForecast\":39.57955192381964,\"cap\":161359923,\"spreadPerc\":0.5,\"shareTxForMovement\":56937,\"shareTxUntilMovement\":25467,\"totalShares\":25400000,\"maxShares\":5100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":18136.184363197466,\"lastPrice\":18164.308372696738,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":5.305497853053945,\"otlkMagForecast\":45.140727035365586,\"cap\":493213077,\"spreadPerc\":0.8,\"shareTxForMovement\":98250,\"shareTxUntilMovement\":98250,\"totalShares\":24100000,\"maxShares\":4800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":3881.845635447877,\"lastPrice\":3862.11256066663,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.57,\"b\":true,\"otlkMag\":6.181996537854117,\"otlkMagForecast\":53.74332084664546,\"cap\":41396890,\"spreadPerc\":0.5,\"shareTxForMovement\":13485,\"shareTxUntilMovement\":13485,\"totalShares\":103500000,\"maxShares\":20700000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6320.635395006719,\"lastPrice\":6305.967280687366,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.17,\"b\":false,\"otlkMag\":5.833734887830344,\"otlkMagForecast\":43.49518582919486,\"cap\":49377918,\"spreadPerc\":0.7,\"shareTxForMovement\":55967,\"shareTxUntilMovement\":55967,\"totalShares\":57500000,\"maxShares\":11500000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3000.5129287808063,\"lastPrice\":2996.699988954478,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":2.01884867721506,\"otlkMagForecast\":48.6377423634969,\"cap\":22738493,\"spreadPerc\":0.7,\"shareTxForMovement\":77342,\"shareTxUntilMovement\":77342,\"totalShares\":51800000,\"maxShares\":10400000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":6941.623934507106,\"lastPrice\":6917.419580399406,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.76,\"b\":true,\"otlkMag\":7.7473153040971185,\"otlkMagForecast\":59.76990020792345,\"cap\":129062948,\"spreadPerc\":1.5,\"shareTxForMovement\":53941,\"shareTxUntilMovement\":53941,\"totalShares\":38800000,\"maxShares\":7800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":3956.716053099797,\"lastPrice\":3943.544628409899,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.68,\"b\":true,\"otlkMag\":5.552306532816469,\"otlkMagForecast\":54.187048109473565,\"cap\":67333539,\"spreadPerc\":1.1,\"shareTxForMovement\":39148,\"shareTxUntilMovement\":39148,\"totalShares\":40300000,\"maxShares\":8100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2869.1200106059587,\"lastPrice\":2864.4502797323335,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":true,\"otlkMag\":5.124252405349947,\"otlkMagForecast\":53.86277793592621,\"cap\":22433129,\"spreadPerc\":0.9,\"shareTxForMovement\":78474,\"shareTxUntilMovement\":78474,\"totalShares\":44000000,\"maxShares\":8800000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2863.5067835718555,\"lastPrice\":2874.8926195521476,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2,\"b\":true,\"otlkMag\":3.5961961552715924,\"otlkMagForecast\":53.17034183063848,\"cap\":45394602,\"spreadPerc\":0.8,\"shareTxForMovement\":43782,\"shareTxUntilMovement\":43782,\"totalShares\":20500000,\"maxShares\":4100000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":6302.97605838723,\"lastPrice\":6289.97080912103,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":false,\"otlkMag\":1.956928561960345,\"otlkMagForecast\":48.58454610122934,\"cap\":29009079,\"spreadPerc\":0.7,\"shareTxForMovement\":34120,\"shareTxUntilMovement\":34120,\"totalShares\":9900000,\"maxShares\":2000000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":750.6157939297851,\"lastPrice\":749.5577586145075,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":2.5915889088115676,\"otlkMagForecast\":51.78031820859719,\"cap\":6493492,\"spreadPerc\":0.8,\"shareTxForMovement\":121671,\"shareTxUntilMovement\":121671,\"totalShares\":73900000,\"maxShares\":14800000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2591.093303563336,\"lastPrice\":2599.4384656778248,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.62,\"b\":false,\"otlkMag\":2.0347683241159746,\"otlkMagForecast\":48.59162334492918,\"cap\":41596833,\"spreadPerc\":1.3,\"shareTxForMovement\":61740,\"shareTxUntilMovement\":61740,\"totalShares\":9200000,\"maxShares\":1800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":888.1442684621575,\"lastPrice\":893.9534657607455,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.29,\"b\":true,\"otlkMag\":5.516275515876608,\"otlkMagForecast\":54.4921979590705,\"cap\":11518066,\"spreadPerc\":0.9,\"shareTxForMovement\":29416,\"shareTxUntilMovement\":29416,\"totalShares\":49200000,\"maxShares\":9800000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":542.8226916950548,\"lastPrice\":541.3052986044308,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.41,\"b\":true,\"otlkMag\":11.34172650792734,\"otlkMagForecast\":63.879122966816745,\"cap\":15246496,\"spreadPerc\":0.6,\"shareTxForMovement\":51938,\"shareTxUntilMovement\":51938,\"totalShares\":129500000,\"maxShares\":25900000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":42113.30669371994,\"lastPrice\":42176.10057359042,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":7.736692622090366,\"otlkMagForecast\":58.4276073681001,\"cap\":158540873,\"spreadPerc\":0.8,\"shareTxForMovement\":199165,\"shareTxUntilMovement\":199165,\"totalShares\":12100000,\"maxShares\":2400000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":15289.722420011682,\"lastPrice\":15307.352906892518,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":9.43088215471765,\"otlkMagForecast\":39.47140568621003,\"cap\":237788736,\"spreadPerc\":1,\"shareTxForMovement\":119949,\"shareTxUntilMovement\":119949,\"totalShares\":29800000,\"maxShares\":6000000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":23,\"lastUpdate\":1642245671028,\"ticksUntilCycle\":7}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#BA55D3\",\"primary\":\"#9370DB\",\"primarydark\":\"#8A2BE2\",\"successlight\":\"#BA55D3\",\"success\":\"#9370DB\",\"successdark\":\"#8A2BE2\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1642245675642","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642245675685"}}